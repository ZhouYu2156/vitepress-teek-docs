window.__VP_HASH_MAP__=JSON.parse("{\"@pages_archives.md\":\"CUq2LV5Y\",\"@pages_categories.md\":\"DCoeGTey\",\"@pages_tags.md\":\"CIk0gjlx\",\"index.md\":\"DfLIMcAx\",\"public_snippets_preface.md\":\"CmXt1Bvk\",\"web开发_前端_javascript_canvas.md\":\"5RiTiWCR\",\"web开发_前端_javascript_index.md\":\"K94C4C5i\",\"web开发_前端_javascript_javascript常识.md\":\"lPOfiw5g\",\"web开发_前端_javascript_promise.md\":\"Cb6B1Ef5\",\"web开发_前端_javascript_typescript.md\":\"DsK2wen0\",\"web开发_前端_javascript_webapi.md\":\"evCbpJPX\",\"web开发_前端_javascript_事件循环.md\":\"BAPTG5_F\",\"web开发_前端_javascript_原型链.md\":\"D9aSyF7g\",\"web开发_前端_javascript_高级核心概念.md\":\"CwmjXMPx\",\"web开发_前端_vue_index.md\":\"DB6VeDX0\",\"web开发_后端_cpp_index.md\":\"CnLMSNKG\",\"web开发_后端_lua_index.md\":\"3tHwPL_j\",\"web开发_后端_mongodb_index.md\":\"C3GoGaFM\",\"web开发_后端_mysql_index.md\":\"CqpEUgtz\",\"web开发_后端_nodejs_index.md\":\"rCunGaJx\",\"web开发_后端_nodejs_模块化规范演进.md\":\"CDJ_Y3NA\",\"web开发_后端_python_django快速入门教程.md\":\"DsH2Wuhr\",\"web开发_后端_python_index.md\":\"xRnV4KSY\",\"web开发_后端_python_qq微信消息轰炸.md\":\"DFD3ogBB\",\"web开发_后端_python_restframework.md\":\"CxbeecfS\",\"web开发_后端_python_支付宝沙箱支付教程.md\":\"DkHU6aSS\",\"web开发_后端_python_爬取酷狗付费音乐.md\":\"Bw-PIafY\",\"web开发_后端_桌面应用开发_index.md\":\"DdOgceS9\",\"web开发_开发者工具_git_index.md\":\"BY_UcBb9\",\"web开发_开发者工具_vscode_index.md\":\"DjNPsTMr\",\"web开发_开发者工具_vscode_我的配置.md\":\"BjyV6D_K\",\"web开发_开发者工具_vscode_配置linux开发环境.md\":\"D-xkhUH2\",\"web开发_运维_linux_index.md\":\"D2vPbdt0\",\"web开发_运维_linux_linux环境安装.md\":\"DOzxCB4G\",\"web开发_运维_nginx_index.md\":\"da7OtaRp\",\"web开发_运维_服务器_index.md\":\"DfPJJe9t\",\"web开发_运维_服务器_搭建服务器.md\":\"CgTdAJQa\",\"前沿领域_人工智能_ollama_index.md\":\"BJc-n_E7\",\"视觉与设计_adoube_photoshop_index.md\":\"doXZGPKE\"}");window.__VP_SITE_DATA__=JSON.parse("{\"lang\":\"zh-CN\",\"dir\":\"ltr\",\"title\":\"极客兔\",\"description\":\"vitepress-theme-teek 使用文档,vitepress 主题框架\",\"base\":\"/vitepress-teek-docs/\",\"head\":[],\"router\":{\"prefetchLinks\":true},\"appearance\":true,\"themeConfig\":{\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"footerInfo\":{\"topMessage\":[\"初闻不知曲中意，再听已是曲中人\"],\"bottomMessage\":[\"<span style=\\\"margin: 0; display: inline;\\\">本人已在地球上苟活了 <span id=\\\"footer-runtime\\\"></span></span>\",\"<script id=\\\"LA-DATA-WIDGET\\\" crossorigin=\\\"anonymous\\\" charset=\\\"UTF-8\\\" src=\\\"https://v6-widget.51.la/v6/3LmZHLhDZIDpMaT0/quote.js?theme=#1690FF,#333333,#999999,#007BFF,#FFFFFF,#1690FF,12&f=12&display=0,0,1,1,1,1,1,1\\\"></script>\",\"<a href=\\\"https://51.la/\\\" target=\\\"_blank\\\" style=\\\"display:flex;align-items:center;justify-content:center;\\\">本网站由51.LA <img src=\\\"https://51.la/favicon.ico\\\" style=\\\"width:16px;height:16px;margin-inline: 5px;\\\" alt=\\\"51.LA\\\"> 提供数据统计服务</a>\"],\"theme\":{\"name\":\"Theme By Teek@1.0.2-2025.4.10\"},\"copyright\":{\"createYear\":2025,\"suffix\":\"程序员皮蛋鸽鸽\"},\"icpRecord\":{\"name\":\"湘ICP备2024064075号-1\",\"link\":\"https://beian.miit.gov.cn/\"},\"securityRecord\":{\"name\":\"湘公网安备43112402000148号\",\"link\":\"https://ywtb.mps.gov.cn/\"}},\"articleShare\":{\"enabled\":true},\"topArticle\":{\"enabled\":true,\"limit\":4,\"autoPage\":false,\"pageSpeed\":4000,\"dateFormat\":\"yyyy-MM-dd\"},\"docAnalysis\":{\"createTime\":\"2021-10-19\",\"statistics\":{\"provider\":\"busuanzi\"},\"wordCount\":true,\"readingTime\":true,\"appendInfo\":[{\"key\":\"index\",\"label\":\"序号\",\"value\":\"One\"}]},\"post\":{\"coverImgMode\":\"full\"},\"appreciation\":{\"position\":\"doc-after\",\"options\":{\"icon\":\"weChatPay\",\"expandTitle\":\"打赏支持\",\"collapseTitle\":\"下次一定\",\"content\":\"<img src='/vitepress-teek-docs/social-icons/wechat-QR.jpg'><img src='/vitepress-teek-docs/social-icons/zfb-QR.jpg'>\",\"expand\":true}},\"siteAnalytics\":{\"provider\":\"baidu\",\"options\":{\"id\":\"你的id\"}},\"logo\":\"/rabbit.svg\",\"darkModeSwitchLabel\":\"主题\",\"sidebarMenuLabel\":\"菜单\",\"returnToTopLabel\":\"返回顶部\",\"lastUpdatedText\":\"上次更新时间\",\"outline\":{\"level\":[2,4],\"label\":\"本页导航\"},\"docFooter\":{\"prev\":\"上一页\",\"next\":\"下一页\"},\"nav\":[{\"text\":\"首页\",\"link\":\"/\"},{\"text\":\"web开发\",\"items\":[{\"text\":\"前端\",\"items\":[{\"text\":\"JavaScript\",\"link\":\"/web开发/前端/JavaScript/\"},{\"text\":\"Vue\",\"link\":\"/web开发/前端/Vue/\"}]},{\"text\":\"后端\",\"items\":[{\"text\":\"Cpp\",\"link\":\"/web开发/后端/Cpp/\"},{\"text\":\"Lua\",\"link\":\"/web开发/后端/Lua/\"},{\"text\":\"MongoDB\",\"link\":\"/web开发/后端/MongoDB/\"},{\"text\":\"MySQL\",\"link\":\"/web开发/后端/MySQL/\"},{\"text\":\"Nodejs\",\"link\":\"/web开发/后端/Nodejs/\"},{\"text\":\"Python\",\"link\":\"/web开发/后端/Python/\"},{\"text\":\"桌面应用开发\",\"link\":\"/web开发/后端/桌面应用开发/\"}]},{\"text\":\"开发者工具\",\"items\":[{\"text\":\"Git\",\"link\":\"/web开发/开发者工具/Git/\"},{\"text\":\"VSCode\",\"link\":\"/web开发/开发者工具/VSCode/\"}]},{\"text\":\"运维\",\"items\":[{\"text\":\"Linux\",\"link\":\"/web开发/运维/Linux/\"},{\"text\":\"Nginx\",\"link\":\"/web开发/运维/Nginx/\"},{\"text\":\"服务器\",\"link\":\"/web开发/运维/服务器/\"}]}]},{\"text\":\"前沿领域\",\"items\":[{\"text\":\"人工智能\",\"items\":[{\"text\":\"Ollama\",\"link\":\"/前沿领域/人工智能/Ollama/\"}]}]},{\"text\":\"视觉与设计\",\"items\":[{\"text\":\"Adoube\",\"items\":[{\"text\":\"PhotoShop\",\"link\":\"/视觉与设计/Adoube/PhotoShop/\"}]}]},{\"text\":\"索引\",\"items\":[{\"text\":\"分类\",\"link\":\"/categories\",\"activeMatch\":\"@pages/categories\"},{\"text\":\"标签\",\"link\":\"/tags\",\"activeMatch\":\"@pages/tags\"},{\"text\":\"归档\",\"link\":\"/archives\",\"activeMatch\":\"@pages/archives\"}],\"activeMatch\":\"@pages\"}],\"sidebar\":{\"/\":[],\"/web开发/\":[{\"collapsed\":true,\"items\":[{\"text\":\"前端\",\"collapsed\":true,\"items\":[{\"text\":\"JavaScript\",\"collapsed\":true,\"items\":[{\"text\":\"index\",\"collapsed\":true,\"link\":\"/web开发/前端/JavaScript/index\"},{\"text\":\"Canvas\",\"collapsed\":true,\"link\":\"/web开发/前端/JavaScript/Canvas\"},{\"text\":\"JavaScript常识\",\"collapsed\":true,\"link\":\"/web开发/前端/JavaScript/JavaScript常识\"},{\"text\":\"Promise\",\"collapsed\":true,\"link\":\"/web开发/前端/JavaScript/Promise\"},{\"text\":\"TypeScript\",\"collapsed\":true,\"link\":\"/web开发/前端/JavaScript/TypeScript\"},{\"text\":\"WebAPI\",\"collapsed\":true,\"link\":\"/web开发/前端/JavaScript/WebAPI\"},{\"text\":\"components\",\"collapsed\":true,\"items\":[]},{\"text\":\"事件循环\",\"collapsed\":true,\"link\":\"/web开发/前端/JavaScript/事件循环\"},{\"text\":\"原型链\",\"collapsed\":true,\"link\":\"/web开发/前端/JavaScript/原型链\"},{\"text\":\"高级核心概念\",\"collapsed\":true,\"link\":\"/web开发/前端/JavaScript/高级核心概念\"}]},{\"text\":\"Vue\",\"collapsed\":true,\"items\":[{\"text\":\"Vue快速入门\",\"collapsed\":true,\"link\":\"/web开发/前端/Vue/index\"}]}]},{\"text\":\"后端\",\"collapsed\":true,\"items\":[{\"text\":\"Cpp\",\"collapsed\":true,\"items\":[{\"text\":\"C++语言快速入门\",\"collapsed\":true,\"link\":\"/web开发/后端/Cpp/index\"}]},{\"text\":\"Lua\",\"collapsed\":true,\"items\":[{\"text\":\"Lua语言快速入门\",\"collapsed\":true,\"link\":\"/web开发/后端/Lua/index\"}]},{\"text\":\"MongoDB\",\"collapsed\":true,\"items\":[{\"text\":\"index\",\"collapsed\":true,\"link\":\"/web开发/后端/MongoDB/index\"}]},{\"text\":\"MySQL\",\"collapsed\":true,\"items\":[{\"text\":\"index\",\"collapsed\":true,\"link\":\"/web开发/后端/MySQL/index\"}]},{\"text\":\"Nodejs\",\"collapsed\":true,\"items\":[{\"text\":\"Nodejs 安装教程\",\"collapsed\":true,\"link\":\"/web开发/后端/Nodejs/index\"},{\"text\":\"模块化规范演进\",\"collapsed\":true,\"link\":\"/web开发/后端/Nodejs/模块化规范演进\"}]},{\"text\":\"Python\",\"collapsed\":true,\"items\":[{\"text\":\"index\",\"collapsed\":true,\"link\":\"/web开发/后端/Python/index\"},{\"text\":\"Django快速入门教程\",\"collapsed\":true,\"link\":\"/web开发/后端/Python/Django快速入门教程\"},{\"text\":\"QQ微信消息轰炸\",\"collapsed\":true,\"link\":\"/web开发/后端/Python/QQ微信消息轰炸\"},{\"text\":\"RestFramework\",\"collapsed\":true,\"link\":\"/web开发/后端/Python/RestFramework\"},{\"text\":\"components\",\"collapsed\":true,\"items\":[]},{\"text\":\"支付宝沙箱支付教程\",\"collapsed\":true,\"link\":\"/web开发/后端/Python/支付宝沙箱支付教程\"},{\"text\":\"爬取酷狗付费音乐\",\"collapsed\":true,\"link\":\"/web开发/后端/Python/爬取酷狗付费音乐\"}]},{\"text\":\"桌面应用开发\",\"collapsed\":true,\"items\":[{\"text\":\"全网最新最全的 electron 项目环境搭建方式与踩坑经验分享\",\"collapsed\":true,\"link\":\"/web开发/后端/桌面应用开发/index\"}]}]},{\"text\":\"开发者工具\",\"collapsed\":true,\"items\":[{\"text\":\"Git\",\"collapsed\":true,\"items\":[{\"text\":\"index\",\"collapsed\":true,\"link\":\"/web开发/开发者工具/Git/index\"}]},{\"text\":\"VSCode\",\"collapsed\":true,\"items\":[{\"text\":\"index\",\"collapsed\":true,\"link\":\"/web开发/开发者工具/VSCode/index\"},{\"text\":\"我的配置\",\"collapsed\":true,\"link\":\"/web开发/开发者工具/VSCode/我的配置\"},{\"text\":\"从零配置Linux与Windows互通的开发环境\",\"collapsed\":true,\"link\":\"/web开发/开发者工具/VSCode/配置Linux开发环境\"}]}]},{\"text\":\"运维\",\"collapsed\":true,\"items\":[{\"text\":\"Linux\",\"collapsed\":true,\"items\":[{\"text\":\"index\",\"collapsed\":true,\"link\":\"/web开发/运维/Linux/index\"},{\"text\":\"Linux环境安装\",\"collapsed\":true,\"link\":\"/web开发/运维/Linux/Linux环境安装\"}]},{\"text\":\"Nginx\",\"collapsed\":true,\"items\":[{\"text\":\"index\",\"collapsed\":true,\"link\":\"/web开发/运维/Nginx/index\"}]},{\"text\":\"服务器\",\"collapsed\":true,\"items\":[{\"text\":\"index\",\"collapsed\":true,\"link\":\"/web开发/运维/服务器/index\"},{\"text\":\"搭建服务器\",\"collapsed\":true,\"link\":\"/web开发/运维/服务器/搭建服务器\"}]}]}]}],\"/前沿领域/\":[{\"collapsed\":true,\"items\":[{\"text\":\"人工智能\",\"collapsed\":true,\"items\":[{\"text\":\"Ollama\",\"collapsed\":true,\"items\":[{\"text\":\"index\",\"collapsed\":true,\"link\":\"/前沿领域/人工智能/Ollama/index\"}]}]}]}],\"/视觉与设计/\":[{\"collapsed\":true,\"items\":[{\"text\":\"Adoube\",\"collapsed\":true,\"items\":[{\"text\":\"PhotoShop\",\"collapsed\":true,\"items\":[{\"text\":\"index\",\"collapsed\":true,\"link\":\"/视觉与设计/Adoube/PhotoShop/index\"}]}]}]}],\"/web开发/前端/\":[{\"text\":\"JavaScript\",\"collapsed\":false,\"items\":[{\"text\":\"Canvas\",\"link\":\"/web开发/前端/JavaScript/Canvas\"},{\"text\":\"JavaScript常识\",\"link\":\"/web开发/前端/JavaScript/JavaScript常识\"},{\"text\":\"Promise\",\"link\":\"/web开发/前端/JavaScript/Promise\"},{\"text\":\"TypeScript\",\"link\":\"/web开发/前端/JavaScript/TypeScript\"},{\"text\":\"WebAPI\",\"link\":\"/web开发/前端/JavaScript/WebAPI\"},{\"text\":\"基础教程\",\"link\":\"/web开发/前端/JavaScript/index\"},{\"text\":\"事件循环\",\"link\":\"/web开发/前端/JavaScript/事件循环\"},{\"text\":\"原型链\",\"link\":\"/web开发/前端/JavaScript/原型链\"},{\"text\":\"高级核心概念\",\"link\":\"/web开发/前端/JavaScript/高级核心概念\"}]},{\"text\":\"Vue\",\"collapsed\":false,\"items\":[{\"text\":\"基础教程\",\"link\":\"/web开发/前端/Vue/index\"}]}],\"/web开发/后端/\":[{\"text\":\"Cpp\",\"collapsed\":false,\"items\":[{\"text\":\"基础教程\",\"link\":\"/web开发/后端/Cpp/index\"}]},{\"text\":\"Lua\",\"collapsed\":false,\"items\":[{\"text\":\"基础教程\",\"link\":\"/web开发/后端/Lua/index\"}]},{\"text\":\"MongoDB\",\"collapsed\":false,\"items\":[{\"text\":\"基础教程\",\"link\":\"/web开发/后端/MongoDB/index\"}]},{\"text\":\"MySQL\",\"collapsed\":false,\"items\":[{\"text\":\"基础教程\",\"link\":\"/web开发/后端/MySQL/index\"}]},{\"text\":\"Nodejs\",\"collapsed\":false,\"items\":[{\"text\":\"基础教程\",\"link\":\"/web开发/后端/Nodejs/index\"},{\"text\":\"模块化规范演进\",\"link\":\"/web开发/后端/Nodejs/模块化规范演进\"}]},{\"text\":\"Python\",\"collapsed\":false,\"items\":[{\"text\":\"Django快速入门教程\",\"link\":\"/web开发/后端/Python/Django快速入门教程\"},{\"text\":\"QQ微信消息轰炸\",\"link\":\"/web开发/后端/Python/QQ微信消息轰炸\"},{\"text\":\"RestFramework\",\"link\":\"/web开发/后端/Python/RestFramework\"},{\"text\":\"基础教程\",\"link\":\"/web开发/后端/Python/index\"},{\"text\":\"支付宝沙箱支付教程\",\"link\":\"/web开发/后端/Python/支付宝沙箱支付教程\"},{\"text\":\"爬取酷狗付费音乐\",\"link\":\"/web开发/后端/Python/爬取酷狗付费音乐\"}]},{\"text\":\"桌面应用开发\",\"collapsed\":false,\"items\":[{\"text\":\"基础教程\",\"link\":\"/web开发/后端/桌面应用开发/index\"}]}],\"/web开发/开发者工具/\":[{\"text\":\"Git\",\"collapsed\":false,\"items\":[{\"text\":\"基础教程\",\"link\":\"/web开发/开发者工具/Git/index\"}]},{\"text\":\"VSCode\",\"collapsed\":false,\"items\":[{\"text\":\"基础教程\",\"link\":\"/web开发/开发者工具/VSCode/index\"},{\"text\":\"我的配置\",\"link\":\"/web开发/开发者工具/VSCode/我的配置\"},{\"text\":\"配置Linux开发环境\",\"link\":\"/web开发/开发者工具/VSCode/配置Linux开发环境\"}]}],\"/web开发/运维/\":[{\"text\":\"Linux\",\"collapsed\":false,\"items\":[{\"text\":\"Linux环境安装\",\"link\":\"/web开发/运维/Linux/Linux环境安装\"},{\"text\":\"基础教程\",\"link\":\"/web开发/运维/Linux/index\"}]},{\"text\":\"Nginx\",\"collapsed\":false,\"items\":[{\"text\":\"基础教程\",\"link\":\"/web开发/运维/Nginx/index\"}]},{\"text\":\"服务器\",\"collapsed\":false,\"items\":[{\"text\":\"基础教程\",\"link\":\"/web开发/运维/服务器/index\"},{\"text\":\"搭建服务器\",\"link\":\"/web开发/运维/服务器/搭建服务器\"}]}],\"/前沿领域/人工智能/\":[{\"text\":\"Ollama\",\"collapsed\":false,\"items\":[{\"text\":\"基础教程\",\"link\":\"/前沿领域/人工智能/Ollama/index\"}]}],\"/视觉与设计/Adoube/\":[{\"text\":\"PhotoShop\",\"collapsed\":false,\"items\":[{\"text\":\"基础教程\",\"link\":\"/视觉与设计/Adoube/PhotoShop/index\"}]}]},\"socialLinks\":[{\"icon\":\"github\",\"link\":\"https://github.com/ZhouYu2156\"}],\"search\":{\"provider\":\"local\",\"options\":{\"translations\":{\"button\":{\"buttonText\":\"搜索文档\",\"buttonAriaLabel\":\"搜索文档\"},\"modal\":{\"noResultsText\":\"无法找到相关结果\",\"resetButtonTitle\":\"清除查询条件\",\"displayDetails\":\"显示详情列表\",\"footer\":{\"selectText\":\"选择\",\"navigateText\":\"切换\",\"closeText\":\"关闭\"}}}}},\"editLink\":{\"text\":\"在 GitHub 上编辑此页\",\"pattern\":\"https://github.com/Kele-Bingtang/vitepress-theme-teek/edit/master/docs/:path\"},\"permalinks\":{\"map\":{\"@pages/archives\":\"/archives\",\"@pages/categories\":\"/categories\",\"@pages/tags\":\"/tags\",\"web开发/前端/JavaScript/Canvas\":\"/pages/60efec\",\"web开发/前端/JavaScript/JavaScript常识\":\"/pages/f7e507\",\"web开发/前端/JavaScript/Promise\":\"/pages/233f86\",\"web开发/前端/JavaScript/TypeScript\":\"/pages/3b643f\",\"web开发/前端/JavaScript/WebAPI\":\"/pages/3faec5\",\"web开发/前端/JavaScript/index\":\"/pages/81bda3\",\"web开发/前端/JavaScript/事件循环\":\"/pages/4c45cd\",\"web开发/前端/JavaScript/原型链\":\"/pages/17549b\",\"web开发/前端/JavaScript/高级核心概念\":\"/pages/09b3f6\",\"web开发/前端/Vue/index\":\"/pages/e1485a\",\"web开发/后端/Cpp/index\":\"/pages/2aeaba\",\"web开发/后端/Lua/index\":\"/pages/e7b99e\",\"web开发/后端/MongoDB/index\":\"/pages/634615\",\"web开发/后端/MySQL/index\":\"/pages/0a9104\",\"web开发/后端/Nodejs/index\":\"/pages/b609ed\",\"web开发/后端/Nodejs/模块化规范演进\":\"/pages/d20f11\",\"web开发/后端/Python/Django快速入门教程\":\"/pages/5e2304\",\"web开发/后端/Python/QQ微信消息轰炸\":\"/pages/9abc85\",\"web开发/后端/Python/RestFramework\":\"/pages/baaa17\",\"web开发/后端/Python/index\":\"/pages/de8c40\",\"web开发/后端/Python/支付宝沙箱支付教程\":\"/pages/4f6a36\",\"web开发/后端/Python/爬取酷狗付费音乐\":\"/pages/624064\",\"web开发/后端/桌面应用开发/index\":\"/pages/75a1df\",\"web开发/开发者工具/Git/index\":\"/pages/f4f5d9\",\"web开发/开发者工具/VSCode/index\":\"/pages/277ec2\",\"web开发/开发者工具/VSCode/我的配置\":\"/pages/991531\",\"web开发/开发者工具/VSCode/配置Linux开发环境\":\"/pages/e47200\",\"web开发/运维/Linux/Linux环境安装\":\"/pages/21e258\",\"web开发/运维/Linux/index\":\"/pages/49880a\",\"web开发/运维/Nginx/index\":\"/pages/0e6ca2\",\"web开发/运维/服务器/index\":\"/pages/fec2e6\",\"web开发/运维/服务器/搭建服务器\":\"/pages/bcf0fc\",\"前沿领域/人工智能/Ollama/index\":\"/pages/066462\",\"视觉与设计/Adoube/PhotoShop/index\":\"/pages/629cfa\"},\"inv\":{\"/archives\":\"@pages/archives\",\"/categories\":\"@pages/categories\",\"/tags\":\"@pages/tags\",\"/pages/60efec\":\"web开发/前端/JavaScript/Canvas\",\"/pages/f7e507\":\"web开发/前端/JavaScript/JavaScript常识\",\"/pages/233f86\":\"web开发/前端/JavaScript/Promise\",\"/pages/3b643f\":\"web开发/前端/JavaScript/TypeScript\",\"/pages/3faec5\":\"web开发/前端/JavaScript/WebAPI\",\"/pages/81bda3\":\"web开发/前端/JavaScript/index\",\"/pages/4c45cd\":\"web开发/前端/JavaScript/事件循环\",\"/pages/17549b\":\"web开发/前端/JavaScript/原型链\",\"/pages/09b3f6\":\"web开发/前端/JavaScript/高级核心概念\",\"/pages/e1485a\":\"web开发/前端/Vue/index\",\"/pages/2aeaba\":\"web开发/后端/Cpp/index\",\"/pages/e7b99e\":\"web开发/后端/Lua/index\",\"/pages/634615\":\"web开发/后端/MongoDB/index\",\"/pages/0a9104\":\"web开发/后端/MySQL/index\",\"/pages/b609ed\":\"web开发/后端/Nodejs/index\",\"/pages/d20f11\":\"web开发/后端/Nodejs/模块化规范演进\",\"/pages/5e2304\":\"web开发/后端/Python/Django快速入门教程\",\"/pages/9abc85\":\"web开发/后端/Python/QQ微信消息轰炸\",\"/pages/baaa17\":\"web开发/后端/Python/RestFramework\",\"/pages/de8c40\":\"web开发/后端/Python/index\",\"/pages/4f6a36\":\"web开发/后端/Python/支付宝沙箱支付教程\",\"/pages/624064\":\"web开发/后端/Python/爬取酷狗付费音乐\",\"/pages/75a1df\":\"web开发/后端/桌面应用开发/index\",\"/pages/f4f5d9\":\"web开发/开发者工具/Git/index\",\"/pages/277ec2\":\"web开发/开发者工具/VSCode/index\",\"/pages/991531\":\"web开发/开发者工具/VSCode/我的配置\",\"/pages/e47200\":\"web开发/开发者工具/VSCode/配置Linux开发环境\",\"/pages/21e258\":\"web开发/运维/Linux/Linux环境安装\",\"/pages/49880a\":\"web开发/运维/Linux/index\",\"/pages/0e6ca2\":\"web开发/运维/Nginx/index\",\"/pages/fec2e6\":\"web开发/运维/服务器/index\",\"/pages/bcf0fc\":\"web开发/运维/服务器/搭建服务器\",\"/pages/066462\":\"前沿领域/人工智能/Ollama/index\",\"/pages/629cfa\":\"视觉与设计/Adoube/PhotoShop/index\"}},\"docAnalysisInfo\":{\"fileList\":[{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/前端/JavaScript/Canvas.md\",\"relativePath\":\"web开发/前端/JavaScript/Canvas.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/前端/JavaScript/JavaScript常识.md\",\"relativePath\":\"web开发/前端/JavaScript/JavaScript常识.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/前端/JavaScript/Promise.md\",\"relativePath\":\"web开发/前端/JavaScript/Promise.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/前端/JavaScript/TypeScript.md\",\"relativePath\":\"web开发/前端/JavaScript/TypeScript.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/前端/JavaScript/WebAPI.md\",\"relativePath\":\"web开发/前端/JavaScript/WebAPI.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/前端/JavaScript/index.md\",\"relativePath\":\"web开发/前端/JavaScript/index.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/前端/JavaScript/事件循环.md\",\"relativePath\":\"web开发/前端/JavaScript/事件循环.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/前端/JavaScript/原型链.md\",\"relativePath\":\"web开发/前端/JavaScript/原型链.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/前端/JavaScript/高级核心概念.md\",\"relativePath\":\"web开发/前端/JavaScript/高级核心概念.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/前端/Vue/index.md\",\"relativePath\":\"web开发/前端/Vue/index.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/Cpp/index.md\",\"relativePath\":\"web开发/后端/Cpp/index.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/Lua/index.md\",\"relativePath\":\"web开发/后端/Lua/index.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/MongoDB/index.md\",\"relativePath\":\"web开发/后端/MongoDB/index.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/MySQL/index.md\",\"relativePath\":\"web开发/后端/MySQL/index.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/Nodejs/index.md\",\"relativePath\":\"web开发/后端/Nodejs/index.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/Nodejs/模块化规范演进.md\",\"relativePath\":\"web开发/后端/Nodejs/模块化规范演进.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/Python/Django快速入门教程.md\",\"relativePath\":\"web开发/后端/Python/Django快速入门教程.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/Python/QQ微信消息轰炸.md\",\"relativePath\":\"web开发/后端/Python/QQ微信消息轰炸.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/Python/RestFramework.md\",\"relativePath\":\"web开发/后端/Python/RestFramework.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/Python/index.md\",\"relativePath\":\"web开发/后端/Python/index.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/Python/支付宝沙箱支付教程.md\",\"relativePath\":\"web开发/后端/Python/支付宝沙箱支付教程.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/Python/爬取酷狗付费音乐.md\",\"relativePath\":\"web开发/后端/Python/爬取酷狗付费音乐.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/桌面应用开发/index.md\",\"relativePath\":\"web开发/后端/桌面应用开发/index.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/开发者工具/Git/index.md\",\"relativePath\":\"web开发/开发者工具/Git/index.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/开发者工具/VSCode/index.md\",\"relativePath\":\"web开发/开发者工具/VSCode/index.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/开发者工具/VSCode/我的配置.md\",\"relativePath\":\"web开发/开发者工具/VSCode/我的配置.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/开发者工具/VSCode/配置Linux开发环境.md\",\"relativePath\":\"web开发/开发者工具/VSCode/配置Linux开发环境.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/运维/Linux/Linux环境安装.md\",\"relativePath\":\"web开发/运维/Linux/Linux环境安装.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/运维/Linux/index.md\",\"relativePath\":\"web开发/运维/Linux/index.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/运维/Nginx/index.md\",\"relativePath\":\"web开发/运维/Nginx/index.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/运维/服务器/index.md\",\"relativePath\":\"web开发/运维/服务器/index.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/运维/服务器/搭建服务器.md\",\"relativePath\":\"web开发/运维/服务器/搭建服务器.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/前沿领域/人工智能/Ollama/index.md\",\"relativePath\":\"前沿领域/人工智能/Ollama/index.md\"},{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/视觉与设计/Adoube/PhotoShop/index.md\",\"relativePath\":\"视觉与设计/Adoube/PhotoShop/index.md\"}],\"totalFileWords\":115437,\"eachFileWords\":[{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/前端/JavaScript/Canvas.md\",\"relativePath\":\"web开发/前端/JavaScript/Canvas.md\"},\"wordCount\":5550,\"readingTime\":\"24m\",\"frontmatter\":{\"date\":{},\"title\":\"Canvas\",\"permalink\":\"/pages/60efec\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/前端/JavaScript/JavaScript常识.md\",\"relativePath\":\"web开发/前端/JavaScript/JavaScript常识.md\"},\"wordCount\":1203,\"readingTime\":\"4.3m\",\"frontmatter\":{\"date\":{},\"title\":\"JavaScript常识\",\"permalink\":\"/pages/f7e507\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/前端/JavaScript/Promise.md\",\"relativePath\":\"web开发/前端/JavaScript/Promise.md\"},\"wordCount\":2081,\"readingTime\":\"8.2m\",\"frontmatter\":{\"date\":{},\"title\":\"Promise\",\"permalink\":\"/pages/233f86\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/前端/JavaScript/TypeScript.md\",\"relativePath\":\"web开发/前端/JavaScript/TypeScript.md\"},\"wordCount\":6231,\"readingTime\":\"26.9m\",\"frontmatter\":{\"date\":{},\"title\":\"TypeScript\",\"permalink\":\"/pages/3b643f\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/前端/JavaScript/WebAPI.md\",\"relativePath\":\"web开发/前端/JavaScript/WebAPI.md\"},\"wordCount\":1583,\"readingTime\":\"6.6m\",\"frontmatter\":{\"date\":{},\"title\":\"WebAPI\",\"permalink\":\"/pages/3faec5\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/前端/JavaScript/index.md\",\"relativePath\":\"web开发/前端/JavaScript/index.md\"},\"wordCount\":4365,\"readingTime\":\"18.3m\",\"frontmatter\":{\"date\":{},\"title\":\"index\",\"permalink\":\"/pages/81bda3\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/前端/JavaScript/事件循环.md\",\"relativePath\":\"web开发/前端/JavaScript/事件循环.md\"},\"wordCount\":1994,\"readingTime\":\"7.8m\",\"frontmatter\":{\"date\":{},\"title\":\"事件循环\",\"permalink\":\"/pages/4c45cd\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/前端/JavaScript/原型链.md\",\"relativePath\":\"web开发/前端/JavaScript/原型链.md\"},\"wordCount\":993,\"readingTime\":\"3.8m\",\"frontmatter\":{\"date\":{},\"title\":\"原型链\",\"permalink\":\"/pages/17549b\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/前端/JavaScript/高级核心概念.md\",\"relativePath\":\"web开发/前端/JavaScript/高级核心概念.md\"},\"wordCount\":6352,\"readingTime\":\"25.9m\",\"frontmatter\":{\"date\":{},\"title\":\"高级核心概念\",\"permalink\":\"/pages/09b3f6\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/前端/Vue/index.md\",\"relativePath\":\"web开发/前端/Vue/index.md\"},\"wordCount\":5,\"readingTime\":\"1\",\"frontmatter\":{\"date\":{},\"title\":\"Vue快速入门\",\"permalink\":\"/pages/e1485a\",\"categories\":[\"web开发\",\"前端\",\"Vue\"],\"coverImg\":\"/banner/5.webp\",\"description\":\"讲解Vue的快速上手\",\"article\":false}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/Cpp/index.md\",\"relativePath\":\"web开发/后端/Cpp/index.md\"},\"wordCount\":1050,\"readingTime\":\"4.4m\",\"frontmatter\":{\"date\":{},\"title\":\"C++语言快速入门\",\"categories\":[\"后端\"],\"tags\":[\"C++\"],\"description\":\"C++是一种静态类型的中级语言，综合了高级语言和低级语言的特点\",\"coverImg\":\"/banner/8.webp\",\"permalink\":\"/pages/2aeaba\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/Lua/index.md\",\"relativePath\":\"web开发/后端/Lua/index.md\"},\"wordCount\":1972,\"readingTime\":\"7.7m\",\"frontmatter\":{\"date\":{},\"title\":\"Lua语言快速入门\",\"categories\":[\"后端\"],\"tags\":[\"Lua\"],\"description\":\"Lua 是一款轻量级、高效灵活、跨平台的多范式编程语言\",\"coverImg\":\"/banner/1.webp\",\"permalink\":\"/pages/e7b99e\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/MongoDB/index.md\",\"relativePath\":\"web开发/后端/MongoDB/index.md\"},\"wordCount\":209,\"readingTime\":\"1m\",\"frontmatter\":{\"date\":{},\"title\":\"index\",\"permalink\":\"/pages/634615\",\"categories\":[\"web开发\",\"后端\",\"MongoDB\"]}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/MySQL/index.md\",\"relativePath\":\"web开发/后端/MySQL/index.md\"},\"wordCount\":7358,\"readingTime\":\"30.6m\",\"frontmatter\":{\"date\":{},\"title\":\"index\",\"permalink\":\"/pages/0a9104\",\"categories\":[\"web开发\",\"后端\",\"MySQL\"]}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/Nodejs/index.md\",\"relativePath\":\"web开发/后端/Nodejs/index.md\"},\"wordCount\":940,\"readingTime\":\"3.9m\",\"frontmatter\":{\"date\":{},\"layout\":\"doc\",\"title\":\"Nodejs 安装教程\",\"navbar\":true,\"sidebar\":true,\"aside\":true,\"footer\":false,\"pageClass\":null,\"head\":[[\"meta\",{\"name\":\"description\",\"content\":\"Nodejs 详细安装教程附带配置\"}],[\"meta\",{\"name\":\"keywords\",\"content\":\"保姆级Nodejs安装和配置教程\"}]],\"permalink\":\"/pages/b609ed\",\"categories\":[\"后端\"],\"tags\":[\"Nodejs\"],\"coverImg\":\"/screenshots/Nodejs/nodejs官网.png\",\"top\":true,\"sticky\":4,\"description\":\"windows版安装和配置Nodejs保姆级详细教程\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/Nodejs/模块化规范演进.md\",\"relativePath\":\"web开发/后端/Nodejs/模块化规范演进.md\"},\"wordCount\":1548,\"readingTime\":\"6.5m\",\"frontmatter\":{\"date\":{},\"title\":\"模块化规范演进\",\"permalink\":\"/pages/d20f11\",\"categories\":[\"后端\"],\"tags\":[\"Nodejs\"],\"coverImg\":\"/screenshots/Nodejs/JS模块化规范演进.png\",\"top\":true,\"sticky\":1,\"description\":\"简明扼要的概述了 JS 模块化规范演进的整个历史\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/Python/Django快速入门教程.md\",\"relativePath\":\"web开发/后端/Python/Django快速入门教程.md\"},\"wordCount\":392,\"readingTime\":\"1.5m\",\"frontmatter\":{\"date\":{},\"title\":\"Django快速入门教程\",\"permalink\":\"/pages/5e2304\",\"categories\":[\"后端\",\"Python\"],\"tags\":[\"Django\"],\"description\":\"Django 哲学宗旨：懂得越多，写得越少\",\"coverImg\":\"/screenshots/Python/Django快速入门教程.png\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/Python/QQ微信消息轰炸.md\",\"relativePath\":\"web开发/后端/Python/QQ微信消息轰炸.md\"},\"wordCount\":115,\"readingTime\":\"1\",\"frontmatter\":{\"date\":{},\"title\":\"QQ微信消息轰炸\",\"permalink\":\"/pages/9abc85\",\"categories\":[\"web开发\",\"后端\",\"Python\"]}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/Python/RestFramework.md\",\"relativePath\":\"web开发/后端/Python/RestFramework.md\"},\"wordCount\":3404,\"readingTime\":\"16.8m\",\"frontmatter\":{\"date\":{},\"title\":\"RestFramework\",\"permalink\":\"/pages/baaa17\",\"categories\":[\"web开发\",\"后端\",\"Python\"]}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/Python/index.md\",\"relativePath\":\"web开发/后端/Python/index.md\"},\"wordCount\":11946,\"readingTime\":\"49.9m\",\"frontmatter\":{\"date\":{},\"title\":\"index\",\"permalink\":\"/pages/de8c40\",\"categories\":[\"web开发\",\"后端\",\"Python\"]}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/Python/支付宝沙箱支付教程.md\",\"relativePath\":\"web开发/后端/Python/支付宝沙箱支付教程.md\"},\"wordCount\":4060,\"readingTime\":\"15.5m\",\"frontmatter\":{\"date\":{},\"title\":\"支付宝沙箱支付教程\",\"permalink\":\"/pages/4f6a36\",\"categories\":[\"后端\"],\"tags\":[\"Python\",\"Flask\"],\"coverImg\":\"/screenshots/支付宝沙箱支付详细使用教程/支付宝教程封面.png\",\"top\":true,\"sticky\":2,\"description\":\"详细介绍了在Python Web开发中集成支付宝沙箱支付的完整流程\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/Python/爬取酷狗付费音乐.md\",\"relativePath\":\"web开发/后端/Python/爬取酷狗付费音乐.md\"},\"wordCount\":1416,\"readingTime\":\"6.2m\",\"frontmatter\":{\"date\":{},\"title\":\"爬取酷狗付费音乐\",\"permalink\":\"/pages/624064\",\"categories\":[\"后端\"],\"tags\":[\"Python\",\"爬虫\"],\"article\":false}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/后端/桌面应用开发/index.md\",\"relativePath\":\"web开发/后端/桌面应用开发/index.md\"},\"wordCount\":1368,\"readingTime\":\"5.6m\",\"frontmatter\":{\"date\":{},\"title\":\"全网最新最全的 electron 项目环境搭建方式与踩坑经验分享\",\"head\":[[\"meta\",{\"name\":\"description\",\"content\":\"全网最全最新 electron 项目环境搭建方式与踩坑经验分享，帮你避坑，少走弯路，节省时间，还等什么，快来参考一下我的 electron 环境搭建指南！\"},{\"name\":\"keywords\",\"content\":\"electron 项目环境搭建 踩坑经验分享\"}]],\"footer\":false,\"permalink\":\"/pages/75a1df\",\"categories\":[\"后端\"],\"tags\":[\"桌面应用开发\"],\"coverImg\":\"/screenshots/Nodejs/Electron安装踩坑经验总结.png\",\"top\":true,\"sticky\":5,\"description\":\"全网最全最新 electron 项目环境搭建方式与踩坑经验分享\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/开发者工具/Git/index.md\",\"relativePath\":\"web开发/开发者工具/Git/index.md\"},\"wordCount\":709,\"readingTime\":\"2.7m\",\"frontmatter\":{\"date\":{},\"title\":\"index\",\"permalink\":\"/pages/f4f5d9\",\"categories\":[\"web开发\",\"开发者工具\",\"Git\"]}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/开发者工具/VSCode/index.md\",\"relativePath\":\"web开发/开发者工具/VSCode/index.md\"},\"wordCount\":781,\"readingTime\":\"3.2m\",\"frontmatter\":{\"date\":{},\"title\":\"index\",\"permalink\":\"/pages/277ec2\",\"categories\":[\"web开发\",\"开发者工具\",\"VSCode\"]}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/开发者工具/VSCode/我的配置.md\",\"relativePath\":\"web开发/开发者工具/VSCode/我的配置.md\"},\"wordCount\":4560,\"readingTime\":\"19.6m\",\"frontmatter\":{\"date\":{},\"title\":\"我的配置\",\"permalink\":\"/pages/991531\",\"categories\":[\"web开发\",\"开发者工具\",\"VSCode\"]}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/开发者工具/VSCode/配置Linux开发环境.md\",\"relativePath\":\"web开发/开发者工具/VSCode/配置Linux开发环境.md\"},\"wordCount\":1624,\"readingTime\":\"7.4m\",\"frontmatter\":{\"date\":{},\"title\":\"从零配置Linux与Windows互通的开发环境\",\"permalink\":\"/pages/e47200\",\"categories\":[\"开发者工具\"],\"tags\":[\"VSCode\"],\"coverImg\":\"/screenshots/VSCode/搭建linux开发环境.png\",\"top\":true,\"sticky\":3,\"description\":\"从零打造 Linux 和 Windows 互通的开发环境\"}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/运维/Linux/Linux环境安装.md\",\"relativePath\":\"web开发/运维/Linux/Linux环境安装.md\"},\"wordCount\":4233,\"readingTime\":\"18.3m\",\"frontmatter\":{\"date\":{},\"title\":\"Linux环境安装\",\"permalink\":\"/pages/21e258\",\"categories\":[\"web开发\",\"运维\",\"Linux\"]}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/运维/Linux/index.md\",\"relativePath\":\"web开发/运维/Linux/index.md\"},\"wordCount\":23048,\"readingTime\":\"1h32m\",\"frontmatter\":{\"date\":{},\"title\":\"index\",\"permalink\":\"/pages/49880a\",\"categories\":[\"web开发\",\"运维\",\"Linux\"]}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/运维/Nginx/index.md\",\"relativePath\":\"web开发/运维/Nginx/index.md\"},\"wordCount\":3101,\"readingTime\":\"12.1m\",\"frontmatter\":{\"date\":{},\"title\":\"index\",\"permalink\":\"/pages/0e6ca2\",\"categories\":[\"web开发\",\"运维\",\"Nginx\"]}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/运维/服务器/index.md\",\"relativePath\":\"web开发/运维/服务器/index.md\"},\"wordCount\":9587,\"readingTime\":\"39.7m\",\"frontmatter\":{\"date\":{},\"title\":\"index\",\"permalink\":\"/pages/fec2e6\",\"categories\":[\"web开发\",\"运维\",\"服务器\"]}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/web开发/运维/服务器/搭建服务器.md\",\"relativePath\":\"web开发/运维/服务器/搭建服务器.md\"},\"wordCount\":1081,\"readingTime\":\"3.7m\",\"frontmatter\":{\"date\":{},\"title\":\"搭建服务器\",\"permalink\":\"/pages/bcf0fc\",\"categories\":[\"web开发\",\"运维\",\"服务器\"]}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/前沿领域/人工智能/Ollama/index.md\",\"relativePath\":\"前沿领域/人工智能/Ollama/index.md\"},\"wordCount\":451,\"readingTime\":\"2m\",\"frontmatter\":{\"date\":{},\"title\":\"index\",\"permalink\":\"/pages/066462\",\"categories\":[\"人工智能\"],\"tags\":[\"Ollama\"]}},{\"fileInfo\":{\"filePath\":\"/home/runner/work/vitepress-teek-docs/vitepress-teek-docs/src/视觉与设计/Adoube/PhotoShop/index.md\",\"relativePath\":\"视觉与设计/Adoube/PhotoShop/index.md\"},\"wordCount\":127,\"readingTime\":\"1\",\"frontmatter\":{\"date\":{},\"title\":\"index\",\"permalink\":\"/pages/629cfa\",\"categories\":[\"视觉与设计\",\"Adoube\",\"PhotoShop\"]}}],\"lastCommitTime\":\"2025-04-23 02:32:48\"},\"catalogues\":{\"arr\":[],\"map\":{},\"inv\":{}},\"posts\":{\"originPosts\":[{\"url\":\"/web开发/前端/JavaScript/Canvas\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:32\",\"title\":\"Canvas\",\"permalink\":\"/pages/60efec\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Canvas\",\"date\":\"2025-04-20 23:56:32\",\"excerpt\":\"\",\"capture\":\"Canvas 绘图\\r\\n\\r\\n::: tip\\r\\n\\r\\n-   推荐：前往优秀文档\\r\\n-   参考博客：菜鸟教程\\r\\n-   核心思想：`canvas`是基于状态的方式进行绘图的\\r\\n-   `canvas`坐标空间：以画布左上角为原点，向右为`x正半轴`，向下为`y正半轴`，以`1px`为单位距离\\r\\n\\r\\n:::\\r\\n\\r\\n 基础\\r\\n\\r\\n 画布默认大小\\r\\n\\r\\n-   `canvas`画布的默认大小是 `宽 x 高 = 300 x 150`\\r\\n\\r\\n 获取画布\\r\\n\\r\\n```ts\\r\\n// 获取画布元素\\r\\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\\r\\n// 获取上下文对象: context\\r\\nconst ctx = canvas.getContext('2d') as CanvasRenderingContext2D\\r\"},{\"url\":\"/web开发/前端/JavaScript/JavaScript常识\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"JavaScript常识\",\"permalink\":\"/pages/f7e507\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"JavaScript常识\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"JavaScript常识整理\\r\\n\\r\\n nodejs 默认采用 commonjs 模块化规范\\r\\n\\r\\n::: tip 科普\\r\\n- (1)每个模块都Node.js 应用由模块组成，每个文件就是一个模块，有自己的作用域。\\r\\n- (2)在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。\\r\\n- (3)每个模块内部有两个变量可以使用，`require` 和 `module`。`require` 用来加载某个模块，`module` 代表当前模块，是一个对象，保存了当前模块需要导出的信息。\\r\\n- (4)`exports` 是 `module` 上的一个属性，保存了当前模块要导出的接口或者变量，使用 require 加载的某个模块获取到的值就是那个模块使用 `exports` 导出的值。\\r\\n- (5)注意: exports 和 module.exports 是指向同一个对象。最终`requir\"},{\"url\":\"/web开发/前端/JavaScript/Promise\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"Promise\",\"permalink\":\"/pages/233f86\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Promise\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"深入学习 Promise\\r\\n\\r\\n Promise 是什么？\\r\\n\\r\\n1. 抽象表达\\r\\n  - ES6 规范\\r\\n  - JS进行异步变成的新解决方案（旧方案是回调函数）\\r\\n2. 具体表达\\r\\n   - 从语法上来说：Promise是一个构造函数\\r\\n   - 从功能上来说：Promise对象用来封装一个一步操作并可以获取其成功或失败的结果值\\r\\n\\r\\n\\r\\n&gt; * fs文件操作\\r\\n&gt; * 数据库操作\\r\\n&gt; * ajax\\r\\n&gt; * 定时器\\r\\n&gt; * ...\\r\\n\\r\\n\\r\\n 为什么要用Promise？\\r\\n- 指定回调函数的方式更加灵活\\r\\n- 支持链式调用，可以解决回调地域问题\\r\\n\\r\\n Promise的状态\\r\\n1. pending （待定状态）\\r\\n2. pending 变为 `fulfilled`\\r\\n3. pending 变为 `rejected`\\r\\n\\r\\n&gt; 说明：只有这三种，\"},{\"url\":\"/web开发/前端/JavaScript/TypeScript\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"TypeScript\",\"permalink\":\"/pages/3b643f\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"TypeScript\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"TypeScript 学习笔记\\r\\n\\r\\n\\r\\n&gt;\\r\\n&gt; - 中文学习网: TypeScript\\r\\n&gt; \\r\\n&gt; - 推荐阅读：jsdocs文档\\r\\n&gt; \\r\\n&gt; - 推荐阅读：npm包管理器\\r\\n\\r\\n::: warning 注意\\r\\n- 记住：类型注释永远不会改变程序的运行时行为。\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n- `tsc`命令行编译选项\\r\\n\\r\\n| 参数              |                               功能 |\\r\\n| :---------------- | ---------------------------------: |\\r\\n| `--noEmitOnError` | TS代码有错误时，不要编译生成JS文件 |\\r\\n| `--target`        |    编译生成JS的目标版本，默认`ES5` |\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"},{\"url\":\"/web开发/前端/JavaScript/WebAPI\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"WebAPI\",\"permalink\":\"/pages/3faec5\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"WebAPI\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"常用 Web API\\r\\n\\r\\n 电池\\r\\n\\r\\n\\r\\n&gt;\\r\\n&gt; `navigator.getBattery()` 提供有关系统电池电量的信息。\\r\\n&gt;\\r\\n&gt; 事件\\r\\n&gt;\\r\\n&gt; -   `chargingchange`：当电池充电状态（charging 属性）更新时触发。\\r\\n&gt; -   `chargingtimechange`：当电池充电时间（chargingTime 属性）更新时触发。\\r\\n&gt; -   `dischargingtimechange`：当电池续航时间（dischargingTime 属性）更新时触发。\\r\\n&gt; -   `levelchange`：当电池电量（level 属性）更新时触发。\\r\\n\\r\\n::: code-group\\r\\n\\r\\n```ts [电池信息]\\r\\nnavigator.getBattery().then((battery) =&\"},{\"url\":\"/web开发/前端/JavaScript/\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"index\",\"permalink\":\"/pages/81bda3\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"JS 的使用技巧\\r\\n\\r\\n `var`、`let`、`const`区别\\r\\n\\r\\n::: tip 详解\\r\\n\\r\\n| 关键字  | 作用及注意事项                                                                                                                         |\\r\\n| ------- | -------------------------------------------------------------------------------------------------------------------------------------- |\\r\\n| `var`   | 定义`具有穿透作用域的`（全局）变量，不管在哪里定义，都会变成全局作用域的变量，定义后可以修\"},{\"url\":\"/web开发/前端/JavaScript/事件循环\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:32\",\"title\":\"事件循环\",\"permalink\":\"/pages/4c45cd\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"事件循环\",\"date\":\"2025-04-20 23:56:32\",\"excerpt\":\"\",\"capture\":\"事件循环原理\\r\\n\\r\\n::: tip\\r\\n\\r\\n\\r\\n\\r\\n:::\\r\\n\\r\\n 事件循环概述\\r\\n\\r\\n::: info\\r\\n\\r\\n&gt; 在事件循环中，当主线程执行完当前的同步任务后，会检查事件队列中是否有待处理的事件。如果有，主线程会取出事件并执行对应的回调函数。这个循环的过程被称为事件循环（Event Loop），它由主线程和任务队列两部分组成。主线程负责执行同步任务，而异步任务则通过任务队列进行处理。这种机制保证了异步任务在适当的时机能够插入执行，从而实现了 JavaScript 的`非阻塞异步执行`。\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n事件循环流程如下：\\r\\n\\r\\n&gt; 1. 主线程读取 JavaScript 代码，形成相应的堆和执行栈。\\r\\n&gt; 2. 当主线程遇到异步任务时，将其委托给对应的异步进程（如 Web API）处理。\\r\\n&gt; 3. 异步任务完成后，将相应的回调函数推入任务队列。\\r\\n&g\"},{\"url\":\"/web开发/前端/JavaScript/原型链\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:32\",\"title\":\"原型链\",\"permalink\":\"/pages/17549b\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"原型链\",\"date\":\"2025-04-20 23:56:32\",\"excerpt\":\"\",\"capture\":\"原型链\\r\\n\\r\\n::: info 说明\\r\\n\\r\\n1. 原型：函数都有prototype属性，称之为原型，也称为原型对象\\r\\n\\r\\n    - 原型可以放一些属性和方法，共享给实例对象使用\\r\\n    - 原型可以做继承\\r\\n\\r\\n2. 原型链：对象都有 \\\\_\\\\_proto\\\\_\\\\_ 属性，这个属性指向它的原型对象，原型对象也是对象，也有自己的 \\\\_\\\\_proto\\\\_\\\\_ 属性，指向原型对象的原型对象，这样一层一层形成的链式结构称为原型链，最顶层找不到则返回 _null_。\\r\\n   :::\\r\\n\\r\\n 类\\r\\n\\r\\n::: info 概念\\r\\n类: 类是一种创建对象的蓝图或模板, 在 js 中, 类本质还是一个构造函数。\\r\\n:::\\r\\n\\r\\n 构造器(也称 `constructor` 或 `构造函数`)\\r\\n\\r\\n::: info 概念\\r\\n构造函数: 用 new 来执行的函数。\\r\\n:::\\r\\n::: tip 介绍\\r\\n原本以前是\"},{\"url\":\"/web开发/前端/JavaScript/高级核心概念\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"高级核心概念\",\"permalink\":\"/pages/09b3f6\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"高级核心概念\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"JS 高级核心概念\\r\\n\\r\\n 事件循环原理\\r\\n\\r\\n::: tip\\r\\n\\r\\n\\r\\n\\r\\n:::\\r\\n\\r\\n 事件循环概述\\r\\n\\r\\n::: info\\r\\n\\r\\n&gt; 在事件循环中，当主线程执行完当前的同步任务后，会检查事件队列中是否有待处理的事件。如果有，主线程会取出事件并执行对应的回调函数。这个循环的过程被称为事件循环（Event Loop），它由主线程和任务队列两部分组成。主线程负责执行同步任务，而异步任务则通过任务队列进行处理。这种机制保证了异步任务在适当的时机能够插入执行，从而实现了 JavaScript 的`非阻塞异步执行`。\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n事件循环流程如下：\\r\\n\\r\\n&gt; 1. 主线程读取 JavaScript 代码，形成相应的堆和执行栈。\\r\\n&gt; 2. 当主线程遇到异步任务时，将其委托给对应的异步进程（如 Web API）处理。\\r\\n&gt; 3. 异步任务完成后，将相应的回\"},{\"url\":\"/web开发/后端/Cpp/\",\"frontmatter\":{\"date\":\"2025-04-19 15:24:14\",\"title\":\"C++语言快速入门\",\"categories\":[\"后端\"],\"tags\":[\"C++\"],\"description\":\"C++是一种静态类型的中级语言，综合了高级语言和低级语言的特点\",\"coverImg\":\"/banner/8.webp\",\"permalink\":\"/pages/2aeaba\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"C++语言快速入门\",\"date\":\"2025-04-19 15:24:14\",\"excerpt\":\"\",\"capture\":\"C++语言快速入门\\n 安装 `C++` 编译环境\\n```bash\\n $ sudo subscription-manager repos --enable codeready-builder-for-rhel-8-x86_64-rpms\\n$ sudo dnf install -y gcc gcc-c++ make\\n 或者安装完整的开发工具组（包含更多工具如gdb、git等）\\n$ sudo dnf groupinstall -y \\\"Development Tools\\\"\\n 检查安装\\n$ gcc --version\\n$ g++ --version\\n$ make --version\\n```\\n 第一个 `C++` 程序\\n```c++\\n// main.cpp\\ninclude &lt;iostream\\nusing namespace std;\\nint main()\\n{\\n    cout &lt;&lt; \"},{\"url\":\"/web开发/后端/Lua/\",\"frontmatter\":{\"date\":\"2025-04-19 07:24:14\",\"title\":\"Lua语言快速入门\",\"categories\":[\"后端\"],\"tags\":[\"Lua\"],\"description\":\"Lua 是一款轻量级、高效灵活、跨平台的多范式编程语言\",\"coverImg\":\"/banner/1.webp\",\"permalink\":\"/pages/e7b99e\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Lua语言快速入门\",\"date\":\"2025-04-19 07:24:14\",\"excerpt\":\"\",\"capture\":\"Lua语言快速入门\\n 环境安装\\n- 了解更多，请参考：菜鸟教程-Lua 环境安装\\n- Linux 系统(CentOS)\\n```bash\\n$ sudo yum install -y epel-release\\n$ sudo yum install -y lua\\n```\\n 快速体验\\n 交互式\\n```bash\\n$ man lua                  查看 lua 命令行帮助说明\\n$ lua -v                   查看版本信息\\n$ lua -i                   进入交互模式\\n\\n```\\n 脚本式编程\\n- 创建 `*.lua` 文件\\n```lua\\n!/usr/local/bin/lua\\nprint(\\\"Hello world!\\\")\\n```\\n- 赋予可执行权限\\n```bash\\n$ chmod 700 hello.lua\\n```\\n- 执行脚本\\n```bas\"},{\"url\":\"/web开发/后端/MongoDB/\",\"frontmatter\":{\"date\":\"2025-04-22 18:33:06\",\"title\":\"index\",\"permalink\":\"/pages/634615\",\"categories\":[\"web开发\",\"后端\",\"MongoDB\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-22 18:33:06\",\"excerpt\":\"\",\"capture\":\"MongoDB 快速入门\\n 安装\\n\\n```bash\\n 安装 mongodb server\\n$ wget https://repo.mongodb.org/yum/redhat/8/mongodb-org/8.0/x86_64/RPMS/mongodb-org-server-8.0.8-1.el8.x86_64.rpm\\n$ du -sh ./*                       可以查看一下文件大小\\n$ rpm -ivh ./mongodb-org-server-8.0.8-1.el8.x86_64.rpm\\n$ systemctl status mongod          查看服务状态\\n$ systemctl enable mongod --now    设置开机自启\\n 安装命令行工具 cli：https://www.mongodb.com/try/download/shell\"},{\"url\":\"/web开发/后端/MySQL/\",\"frontmatter\":{\"date\":\"2025-04-20 23:07:19\",\"title\":\"index\",\"permalink\":\"/pages/0a9104\",\"categories\":[\"web开发\",\"后端\",\"MySQL\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:07:19\",\"excerpt\":\"\",\"capture\":\"MySQL 数据库\\r\\n\\r\\n 基础篇\\r\\n\\r\\n MySQL 概述\\r\\n\\r\\n-   数据库相关概念：\\r\\n\\r\\n|      名称      |                                 全称                                 |               简称               |\\r\\n| :------------: | :------------------------------------------------------------------: | :------------------------------: |\\r\\n|     数据库     |               `存储数据的仓库`，数据是有组织的进行存储               |           DataBase(DB)           |\\r\\n\"},{\"url\":\"/web开发/后端/Nodejs/\",\"frontmatter\":{\"date\":\"2025-04-19 22:04:01\",\"layout\":\"doc\",\"title\":\"Nodejs 安装教程\",\"navbar\":true,\"sidebar\":true,\"aside\":true,\"footer\":false,\"pageClass\":null,\"head\":[[\"meta\",{\"name\":\"description\",\"content\":\"Nodejs 详细安装教程附带配置\"}],[\"meta\",{\"name\":\"keywords\",\"content\":\"保姆级Nodejs安装和配置教程\"}]],\"permalink\":\"/pages/b609ed\",\"categories\":[\"后端\"],\"tags\":[\"Nodejs\"],\"coverImg\":\"/screenshots/Nodejs/nodejs官网.png\",\"top\":true,\"sticky\":4,\"description\":\"windows版安装和配置Nodejs保姆级详细教程\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Nodejs 安装教程\",\"date\":\"2025-04-19 22:04:01\",\"excerpt\":\"\",\"capture\":\"Nodejs 安装教程\\r\\n\\r\\n 一、安装 `Nodejs`\\r\\n\\r\\n::: info 访问`Nodejs`官网\\r\\n点击前往：Nodejs 官网\\r\\n\\r\\n一直点击下一步安装完即可（可以选择自行选择安装路径）。\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n- 安装完成后，打开`cmd`，输入`node -v`，如果显示版本号，则安装成功。\\r\\n\\r\\n```bash\\r\\n$ node -v\\r\\n$ npm -v\\r\\n```\\r\\n\\r\\n 二、配置\\r\\n\\r\\n\\r\\n\\r\\n 1. 创建目录\\r\\n\\r\\n创建`node_global`和`node_cache`目录，并且在`node_global`目录下创建`node_modules`目录。\\r\\n\\r\\n```bash\\r\\n 进入 E:/enviroments/nodejs/ 路径下\\r\\nmkdir -p node_global/node_modules node_cache\\r\\n```\\r\\n\\r\\n 2. 设置权限\\r\\n\\r\"},{\"url\":\"/web开发/后端/Nodejs/模块化规范演进\",\"frontmatter\":{\"date\":\"2025-04-19 22:02:31\",\"title\":\"模块化规范演进\",\"permalink\":\"/pages/d20f11\",\"categories\":[\"后端\"],\"tags\":[\"Nodejs\"],\"coverImg\":\"/screenshots/Nodejs/JS模块化规范演进.png\",\"top\":true,\"sticky\":1,\"description\":\"简明扼要的概述了 JS 模块化规范演进的整个历史\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"模块化规范演进\",\"date\":\"2025-04-19 22:02:31\",\"excerpt\":\"\",\"capture\":\"JS 模块化规范演进历史\\r\\n\\r\\n 1. 原始的 JS 模块化\\r\\n\\r\\n每个人编写的`模块`通过 `script`标签引入到`页面`中，然后就可以使用`模块`中的内容了。\\r\\n\\r\\n 2. CommonJS 模块化规范\\r\\n\\r\\n随着 `nodejs` 的诞生，为了解决在 `nodejs` 中的模块化问题，社区自发形成了很多的模块化方案，其中 `CommonJS` 模块化规范得到了时间的检验，并最终确定为主流的模块化规范，这是一套社区的模块化规范，使用 `commonjs` 规范编写的模块并不能直接在浏览器中运行。后来出现了`browserify`，`webpack` 等编译、打包工具，使得 `CommonJS` 模块化规范编写的代码经过编译、打包后也可以用于浏览器中运行。\\r\\n\\r\\n::: code-group\\r\\n\\r\\n```js [utils.js]\\r\\n// 1. 使用 exports 导出模块\\r\\nex\"},{\"url\":\"/web开发/后端/Python/Django快速入门教程\",\"frontmatter\":{\"date\":\"2025-04-21 18:17:55\",\"title\":\"Django快速入门教程\",\"permalink\":\"/pages/5e2304\",\"categories\":[\"后端\",\"Python\"],\"tags\":[\"Django\"],\"description\":\"Django 哲学宗旨：懂得越多，写得越少\",\"coverImg\":\"/screenshots/Python/Django快速入门教程.png\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Django快速入门教程\",\"date\":\"2025-04-21 18:17:55\",\"excerpt\":\"\",\"capture\":\"Django 快速入门\\n 安装 Django\\n```bash\\n$ pip install django\\n```\\n 创建项目\\n```bash\\n$ mkdir &lt;项目名称\\n$ django-admin startproject [&lt;settings&gt;] &lt;项目名称&gt;    settings 是配置目录名称。如果不指定，配置目录的名称与项目名称一致\\n$ cd &lt;项目名称&gt;\\n```\\n- `manage.py`：管理 `Django` 项目的命令行工具。\\n- `settings/`：项目系统配置目录。\\n- `settings/settings.py`：`Django` 项目的配置文件。\\n- `settings/urls.py`：Django 项目的 URL 声明，就像你网站的 `路由` 。\\n- `settings/asgi.py`：项目运行在 `ASGI` \"},{\"url\":\"/web开发/后端/Python/QQ微信消息轰炸\",\"frontmatter\":{\"date\":\"2025-04-20 23:04:51\",\"title\":\"QQ微信消息轰炸\",\"permalink\":\"/pages/9abc85\",\"categories\":[\"web开发\",\"后端\",\"Python\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"QQ微信消息轰炸\",\"date\":\"2025-04-20 23:04:51\",\"excerpt\":\"\",\"capture\":\"消息轰炸\\r\\n\\r\\n 安装依赖\\r\\n\\r\\n```bash\\r\\n$ pip install pyautogui\\r\\n```\\r\\n\\r\\n 程序启动\\r\\n\\r\\n```python\\r\\npython message.py\\r\\n```\\r\\n\\r\\n 源代码\\r\\n\\r\\n```python\\r\\nimport time\\r\\n\\r\\nimport pyautogui\\r\\nimport pyperclip\\r\\n\\r\\ndef send_message(message, interval=1):\\r\\n    pyperclip.copy(message)\\r\\n    pyautogui.hotkey('ctrl', 'v')\\r\\n    pyautogui.press('enter')\\r\\n    time.sleep(interval)\\r\\n\\r\\n\\r\\ndef bomber(file_path='./messages.txt'):\\r\\n    \\\"\\\"\\\"\\r\\n    在微信、QQ\"},{\"url\":\"/web开发/后端/Python/RestFramework\",\"frontmatter\":{\"date\":\"2025-04-21 00:50:31\",\"title\":\"RestFramework\",\"permalink\":\"/pages/baaa17\",\"categories\":[\"web开发\",\"后端\",\"Python\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"RestFramework\",\"date\":\"2025-04-21 00:50:31\",\"excerpt\":\"\",\"capture\":\"DRF 框架\\r\\n\\r\\n::: tip 介绍\\r\\n\\r\\n-   推荐 1：前往官方文档\\r\\n\\r\\n-   推荐 2: bilibili 教程\\r\\n\\r\\n-   推荐 3：深入理解什么是 Restful 规范\\r\\n    :::\\r\\n\\r\\n\\r\\n\\r\\n Restful API 最佳实践\\r\\n\\r\\n-   协议\\r\\n-   域名\\r\\n-   版本\\r\\n-   路径\\r\\n-   HTTP 动词\\r\\n-   过滤信息(Filtering)\\r\\n-   状态码(Status Codes)\\r\\n-   错误处理(Error handling)\\r\\n-   返回结果\\r\\n-   Hypermedia API\\r\\n\\r\\n HTTP 请求方法详解\\r\\n\\r\\n-   `GET (SELECT)`: 从服务器取出资源(一项或多项)\\r\\n-   `POST (CREATE)`: 在服务器新建一个资源\\r\\n-   `PUT (UPDATE)`: 在服务器更新资源(客户端提供\"},{\"url\":\"/web开发/后端/Python/\",\"frontmatter\":{\"date\":\"2025-04-21 00:51:35\",\"title\":\"index\",\"permalink\":\"/pages/de8c40\",\"categories\":[\"web开发\",\"后端\",\"Python\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-21 00:51:35\",\"excerpt\":\"\",\"capture\":\"Python 基础到高级\\r\\n\\r\\n::: tip 基础教程\\r\\n\\r\\n-   推荐 1：Python 官网\\r\\n\\r\\n-   推荐 2：极客教程\\r\\n\\r\\n-   推荐 3：清华源镜像站\\r\\n\\r\\n国内下载镜像：\\r\\n\\r\\n-   清华：https://pypi.tuna.tsinghua.edu.cn/simple\\r\\n-   阿里云：http://mirrors.aliyun.com/pypi/simple/\\r\\n-   豆瓣：https://pypi.douban.com/simple/\\r\\n-   中国科技大学：https://pypi.mirrors.ustc.edu.cn/simple/\\r\\n-   华中理工大学：http://pypi.hustunique.com/\\r\\n-   山东理工大学：http://pypi.sdutLinux.org/\\r\\n\\r\\n设置镜像源的命令：\\r\\n\\r\\n::: code-group\\r\"},{\"url\":\"/web开发/后端/Python/支付宝沙箱支付教程\",\"frontmatter\":{\"date\":\"2025-04-19 22:58:03\",\"title\":\"支付宝沙箱支付教程\",\"permalink\":\"/pages/4f6a36\",\"categories\":[\"后端\"],\"tags\":[\"Python\",\"Flask\"],\"coverImg\":\"/screenshots/支付宝沙箱支付详细使用教程/支付宝教程封面.png\",\"top\":true,\"sticky\":2,\"description\":\"详细介绍了在Python Web开发中集成支付宝沙箱支付的完整流程\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"支付宝沙箱支付教程\",\"date\":\"2025-04-19 22:58:03\",\"excerpt\":\"\",\"capture\":\"支付宝沙箱支付详细使用教程\\n详细介绍支付宝沙箱支付的全流程配置最新教程，通俗易懂，图文并茂，手把手教你一步步实现完整沙箱支付功能。亲测可用，文章撰写非常用心，包你学会！\\n&lt;!--@include: @/public/snippets/preface.md--\\n 一、前言\\n由于支付宝官方对Java等语言的文档说明支持较好，在Python方面相对较弱，而且依赖包还安装不了等Bug，所以接下来我将分享《在Python Web开发中如何集成支付宝沙箱支付》的详细教程，如果这篇文章有帮助到你，请记得关注我的公众号，我会定期分享实用的技术教程。如果没有帮到你，也可以留个免费的关注，以后或许会有你感兴趣的教程，而且文章质量都超高哦！\\n在个人平常（或准备后续对接支付宝正式支付环境）的项目中，使用沙箱支付来测试支付功能显得很有必要；如果是在校大学生的话，在你的项目中集成支付宝的沙箱支付，也能让你的项目\"},{\"url\":\"/web开发/后端/桌面应用开发/\",\"frontmatter\":{\"date\":\"2025-04-19 22:52:13\",\"title\":\"全网最新最全的 electron 项目环境搭建方式与踩坑经验分享\",\"head\":[[\"meta\",{\"name\":\"description\",\"content\":\"全网最全最新 electron 项目环境搭建方式与踩坑经验分享，帮你避坑，少走弯路，节省时间，还等什么，快来参考一下我的 electron 环境搭建指南！\"},{\"name\":\"keywords\",\"content\":\"electron 项目环境搭建 踩坑经验分享\"}]],\"footer\":false,\"permalink\":\"/pages/75a1df\",\"categories\":[\"后端\"],\"tags\":[\"桌面应用开发\"],\"coverImg\":\"/screenshots/Nodejs/Electron安装踩坑经验总结.png\",\"top\":true,\"sticky\":5,\"description\":\"全网最全最新 electron 项目环境搭建方式与踩坑经验分享\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"全网最新最全的 electron 项目环境搭建方式与踩坑经验分享\",\"date\":\"2025-04-19 22:52:13\",\"excerpt\":\"\",\"capture\":\"&lt;!--@include: @/public/snippets/preface.md--\\r\\n\\r\\n&gt; 本文项目搭建演示的`nodejs`版本如下：\\r\\n\\r\\n```bash\\r\\n$ node -v\\r\\n v22.14.0\\r\\n```\\r\\n\\r\\n 一、官方文档手动搭建\\r\\n\\r\\n文档地址：快速入门 | Electron，按照文档步骤操作即可，项目只包含了`electron`依赖，仅仅只是一个`hello world`展示。\\r\\n\\r\\n&gt; ⚠️ 注意：失败！我设置了代理（网络问题）和切换镜像源（淘宝）等操作都没用。截图如下：\\r\\n\\r\\n\\r\\n\\r\\n 二、官方脚手架方式创建\\r\\n\\r\\n- 创建项目命令如下：\\r\\n\\r\\n```bash\\r\\n$ npm init electron-app@latest my-app -- --template=vite  my-app:项目名(自定义)\\r\\n 或\\r\\n$ npm create \"},{\"url\":\"/web开发/开发者工具/Git/\",\"frontmatter\":{\"date\":\"2025-04-20 22:59:44\",\"title\":\"index\",\"permalink\":\"/pages/f4f5d9\",\"categories\":[\"web开发\",\"开发者工具\",\"Git\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 22:59:44\",\"excerpt\":\"\",\"capture\":\"Git 版本控制系统\\r\\n\\r\\n::: tip 概述\\r\\n\\r\\n`Git`是一个免费的、开源的分布式版本控制系统，可以快速高效地处理从小型到大型的各种项目。\\r\\n\\r\\n`Git`易于学习，内存占用小，性能极快。它具有廉价的本地库，方便的暂存区域和多个工作流分支等特性。\\r\\n\\r\\n`Git工具下载`：推荐前往官网\\r\\n\\r\\n:::\\r\\n\\r\\n Git 本地管理\\r\\n\\r\\n 设置签名\\r\\n\\r\\n```bash\\r\\n$ git config --global user.name \\\"用户名\\\"\\t\\t 设置用户签名\\r\\n$ git config --global user.email \\\"邮箱\\\"\\t\\t  设置邮箱签名\\r\\n```\\r\\n\\r\\n 查看特定级别的配置信息\\r\\n\\r\\n 查看全局配置\\r\\n\\r\\n\\r\\n\\r\\n```bash\\r\\n$ git config --global --list\\r\\n```\\r\\n\\r\\n 查看特定配置项的值\\r\\n\\r\\n```bash\\r\\n$ git \"},{\"url\":\"/web开发/开发者工具/VSCode/\",\"frontmatter\":{\"date\":\"2025-04-20 23:34:24\",\"title\":\"index\",\"permalink\":\"/pages/277ec2\",\"categories\":[\"web开发\",\"开发者工具\",\"VSCode\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:34:24\",\"excerpt\":\"\",\"capture\":\"VSCode 开发工具\\r\\n\\r\\n 一、常用插件\\r\\n\\r\\n|               插件名称               |                             功能                             |\\r\\n| :----------------------------------: | :----------------------------------------------------------: |\\r\\n|   Chinese (Simplified) (简体中文)    |              VSCode 界面简体中文插件(⭐⭐⭐⭐)               |\\r\\n|             Monokai Pro              |                  舒适美观的主题(⭐⭐⭐⭐⭐)         \"},{\"url\":\"/web开发/开发者工具/VSCode/我的配置\",\"frontmatter\":{\"date\":\"2025-04-20 23:33:51\",\"title\":\"我的配置\",\"permalink\":\"/pages/991531\",\"categories\":[\"web开发\",\"开发者工具\",\"VSCode\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"我的配置\",\"date\":\"2025-04-20 23:33:51\",\"excerpt\":\"\",\"capture\":\"一、VSCode 个性化配置\\r\\n\\r\\n 主题\\r\\n\\r\\n-   插件依赖：\\r\\n\\r\\n| 插件名称              | 插件描述           |\\r\\n| :-------------------- | ------------------ |\\r\\n| 🎨Monokai Pro         | 编辑器颜色主题     |\\r\\n| 📁Material Icon Theme | 文件、目录图标主题 |\\r\\n\\r\\n-   配置内容：\\r\\n\\r\\n```json\\r\\n/** settings.json */\\r\\n{\\r\\n    \\\"workbench.tree.indent\\\": 16, // 目录树视图缩进宽度\\r\\n    \\\"workbench.colorTheme\\\": \\\"Monokai Pro (Filter Spectrum)\\\", // 主题颜色\\r\\n    \\\"workbench.iconTheme\\\": \\\"\"},{\"url\":\"/web开发/开发者工具/VSCode/配置Linux开发环境\",\"frontmatter\":{\"date\":\"2025-04-19 23:19:49\",\"title\":\"从零配置Linux与Windows互通的开发环境\",\"permalink\":\"/pages/e47200\",\"categories\":[\"开发者工具\"],\"tags\":[\"VSCode\"],\"coverImg\":\"/screenshots/VSCode/搭建linux开发环境.png\",\"top\":true,\"sticky\":3,\"description\":\"从零打造 Linux 和 Windows 互通的开发环境\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"从零配置Linux与Windows互通的开发环境\",\"date\":\"2025-04-19 23:19:49\",\"excerpt\":\"\",\"capture\":\"从零配置 Linux 与 Windows 互通的开发环境\\n以下配置基于 `Red Hat 8`（红帽 8）的 Linux 最基础（无界面）系统，不同的 Linux 发行版会有一些区别，请注意自己系统的是否符合该以上条件。\\n 前置条件\\n\\n```bash\\n 关闭防火墙\\n$ systemctl stop firewalld --now     立即生效\\n$ systemctl status firewalld\\n$ systemctl disable firewalld        永久禁用\\n 关闭 selinux 安全策略\\n$ setenforce 0       本次生效\\n$ getenforce         验证\\n$ sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config     改写配置文件，永久关闭\\n``\"},{\"url\":\"/web开发/运维/Linux/Linux环境安装\",\"frontmatter\":{\"date\":\"2025-04-20 23:18:51\",\"title\":\"Linux环境安装\",\"permalink\":\"/pages/21e258\",\"categories\":[\"web开发\",\"运维\",\"Linux\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Linux环境安装\",\"date\":\"2025-04-20 23:18:51\",\"excerpt\":\"\",\"capture\":\"Linux安装运行环境\\r\\n\\r\\n 安装基础工具\\r\\n\\r\\n```bash\\r\\n$ yum install -y make gcc patch libffi-devel python3-devel zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel xz-devel lrzsz tree zip unzip\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n 1、安装 nginx\\r\\n\\r\\n\\r\\n\\r\\n (1)安装 nginx\\r\\n\\r\\n```bash\\r\\n$ yum install -y nginx\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n (2)配置 `/etc/nginx/nginx.conf`\\r\\n\\r\\n- 开放静态资源\\r\\n- 配置反向代理\\r\\n- ...\\r\\n\\r\\n\\r\\n\\r\\n (3)验证配置有效性\\r\\n\\r\\n```b\"},{\"url\":\"/web开发/运维/Linux/\",\"frontmatter\":{\"date\":\"2025-04-20 23:23:56\",\"title\":\"index\",\"permalink\":\"/pages/49880a\",\"categories\":[\"web开发\",\"运维\",\"Linux\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:23:56\",\"excerpt\":\"\",\"capture\":\"Linux 笔记\\r\\n\\r\\n\\r\\n\\r\\n 命令查询网站\\r\\n\\r\\n\\r\\n\\r\\n 单元五、磁盘管理\\r\\n\\r\\n&gt; 一定要注意关联上下文信息进行阅读、操作\\r\\n\\r\\n&gt; 推荐几个在主机上方便操作 Linux 服务器的软件：`XShell` 、 `WindTerm` 、 `FinalShell`\\r\\n\\r\\n 一、磁盘分区\\r\\n\\r\\n&gt; fdisk 命令中的参数及其作用\\r\\n\\r\\n| 参数 | 作用                           |\\r\\n| ---- | ------------------------------ |\\r\\n| m    | 查看全部可用的参数（帮忙信息） |\\r\\n| n    | 添加新的分区                   |\\r\\n| d    | 删除某个分区信息               |\\r\\n| l    | 列出所有可用的分区类型         |\\r\\n| t    \"},{\"url\":\"/web开发/运维/Nginx/\",\"frontmatter\":{\"date\":\"2025-04-20 23:22:47\",\"title\":\"index\",\"permalink\":\"/pages/0e6ca2\",\"categories\":[\"web开发\",\"运维\",\"Nginx\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:22:47\",\"excerpt\":\"\",\"capture\":\"前置条件\\r\\n\\r\\n 配置静态 IP\\r\\n\\r\\n```bash\\r\\n 一键配置 静态IP地址 并 启用\\r\\nnmcli c add type ethernet con-name \\\"static_conn\\\" ifname ens160 ipv4.addresses 192.168.232.20/24 gw4 192.168.232.2 ipv4.dns \\\"8.8.8.8 114.114.114.114\\\" ipv4.method manual autoconnect yes && nmcli c up static_conn\\r\\n```\\r\\n\\r\\n 关闭防火墙\\r\\n\\r\\n```bash\\r\\n$ systemctl stop firewalld       本次开机关闭防火墙（重新开机防火墙又会启动）\\r\\n$ systemctl disable firewalld    永久禁用防火墙（以后不会再自动启动了）\\r\\n\\r\\n$ \"},{\"url\":\"/web开发/运维/服务器/\",\"frontmatter\":{\"date\":\"2025-04-20 23:12:29\",\"title\":\"index\",\"permalink\":\"/pages/fec2e6\",\"categories\":[\"web开发\",\"运维\",\"服务器\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:12:29\",\"excerpt\":\"\",\"capture\":\"云计算\\r\\n\\r\\n 一、Linux 下载与安装\\r\\n\\r\\n::: tip 推荐：\\r\\n\\r\\n`RHEL 下载`：登陆红帽官网后, 访问该网址跳转到下载镜像界面\\r\\n\\r\\n`RHEL8 安装` 参考博客：教程\\r\\n\\r\\n:::\\r\\n\\r\\n 二、包管理器配置\\r\\n\\r\\n RHEL 注册\\r\\n\\r\\n::: info\\r\\n\\r\\n-   去官网注册\\r\\n\\r\\n:::\\r\\n\\r\\n 配置 `yum 官方仓库源`\\r\\n\\r\\n```bash\\r\\n 终端登录红帽子账号\\r\\n$ subscription-manager register --username=账户名称 --password='账户对应的密码' --auto-attach\\r\\n 查看仓库名称\\r\\n$ yum repolist\\r\\n 配置好仓库后，下载安装这个软件，便于后面Linux服务器和本地window电脑进行上传和下载\\r\\n$ yum install -y lrzsz\\r\\n```\\r\\n\\r\\n 三、远程登录工\"},{\"url\":\"/web开发/运维/服务器/搭建服务器\",\"frontmatter\":{\"date\":\"2025-04-20 23:12:24\",\"title\":\"搭建服务器\",\"permalink\":\"/pages/bcf0fc\",\"categories\":[\"web开发\",\"运维\",\"服务器\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"搭建服务器\",\"date\":\"2025-04-20 23:12:24\",\"excerpt\":\"\",\"capture\":\"搭建自己的服务器\\r\\n\\r\\n\\r\\n\\r\\n 1. 购买服务器\\r\\n\\r\\n\\r\\n\\r\\n::: tip 提示\\r\\n\\r\\n- 自己选择一个喜欢的或者合适的服务器运营商，购买他们的`Linux`服务器，像阿里云提供了以学生身份可以免费申请`3个月`的服务器试用，跟正常购买的服务器差不多，但是性能肯定不是特别好咯，毕竟是免费的嘛，但是个人的使用一般没问题，比如托管静态资源、云服务器学习使用等，这些都能够满足了。等学会了，再根据以后自己的项目性能要求，购买性能更加优质的服务器就行了。遇到一些促销日也可以看看官方是否有便宜点的服务器促销，低价促销的时候，也可以便宜的购买一个几年的来使用。哈哈 :smile:\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n::: warning 注意\\r\\n\\r\\n- 服务器购买了之后，会分配给你公网访问服务器的IP，此时你只需要在服务器上安装好Nginx、Apache之类的服务器软件，简单的启动、配置一下，那么就可以\"},{\"url\":\"/前沿领域/人工智能/Ollama/\",\"frontmatter\":{\"date\":\"2025-04-20 23:43:03\",\"title\":\"index\",\"permalink\":\"/pages/066462\",\"categories\":[\"人工智能\"],\"tags\":[\"Ollama\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:43:03\",\"excerpt\":\"\",\"capture\":\"Ollama 开源大模型\\r\\n\\r\\n::: info 文档\\r\\n\\r\\nOllama 是一个开源的大型语言模型（LLM）服务工具，它允许用户在本地机器上运行和部署大型语言模型。\\r\\n\\r\\n-   推荐 1：Ollama 官网\\r\\n-   推荐 2：Ollama Github 仓库\\r\\n\\r\\n:::\\r\\n\\r\\n::: tip 提示\\r\\n\\r\\n-   `ollama`命令行工具的使用很类似`docker`命令，通过 `olloma -h` 可查看帮助\\r\\n-   推荐阅读：博客文章\\r\\n\\r\\n:::\\r\\n\\r\\n 列出已有模型\\r\\n\\r\\n```bash\\r\\n$ ollama list\\r\\n```\\r\\n\\r\\n 创建模型\\r\\n\\r\\n\\r\\n\\r\\n```bash\\r\\n$ ollama create mymodel -f ./Modelfile\\r\\n```\\r\\n\\r\\n 拉取模型\\r\\n\\r\\n&gt; 拉取本地已经存在的模型会自动比较两者差异进行更新\\r\\n\\r\\n```bash\\r\\n$\"},{\"url\":\"/视觉与设计/Adoube/PhotoShop/\",\"frontmatter\":{\"date\":\"2025-04-20 23:46:06\",\"title\":\"index\",\"permalink\":\"/pages/629cfa\",\"categories\":[\"视觉与设计\",\"Adoube\",\"PhotoShop\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:46:06\",\"excerpt\":\"\",\"capture\":\"PhotoShop\\r\\n\\r\\n 界面了解\\r\\n\\r\\n-   菜单栏\\r\\n-   工具栏\\r\\n-   属性栏\\r\\n-   状态栏\\r\\n-   工作区\\r\\n-   图层面板\\r\\n\\r\\n 常用快捷键\\r\\n\\r\\n| 快捷键                | 功能             | 转换功能 |\\r\\n| :-------------------- | ---------------- | -------- |\\r\\n| Ctrl + S              | 保存             |          |\\r\\n| Ctrl + Z              | 撤销             |          |\\r\\n| Ctrl + N              | 新建             |          |\\r\\n| ESC                   | 取消             \"}],\"sortPostsByDateAndSticky\":[{\"url\":\"/web开发/后端/Nodejs/模块化规范演进\",\"frontmatter\":{\"date\":\"2025-04-19 22:02:31\",\"title\":\"模块化规范演进\",\"permalink\":\"/pages/d20f11\",\"categories\":[\"后端\"],\"tags\":[\"Nodejs\"],\"coverImg\":\"/screenshots/Nodejs/JS模块化规范演进.png\",\"top\":true,\"sticky\":1,\"description\":\"简明扼要的概述了 JS 模块化规范演进的整个历史\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"模块化规范演进\",\"date\":\"2025-04-19 22:02:31\",\"excerpt\":\"\",\"capture\":\"JS 模块化规范演进历史\\r\\n\\r\\n 1. 原始的 JS 模块化\\r\\n\\r\\n每个人编写的`模块`通过 `script`标签引入到`页面`中，然后就可以使用`模块`中的内容了。\\r\\n\\r\\n 2. CommonJS 模块化规范\\r\\n\\r\\n随着 `nodejs` 的诞生，为了解决在 `nodejs` 中的模块化问题，社区自发形成了很多的模块化方案，其中 `CommonJS` 模块化规范得到了时间的检验，并最终确定为主流的模块化规范，这是一套社区的模块化规范，使用 `commonjs` 规范编写的模块并不能直接在浏览器中运行。后来出现了`browserify`，`webpack` 等编译、打包工具，使得 `CommonJS` 模块化规范编写的代码经过编译、打包后也可以用于浏览器中运行。\\r\\n\\r\\n::: code-group\\r\\n\\r\\n```js [utils.js]\\r\\n// 1. 使用 exports 导出模块\\r\\nex\"},{\"url\":\"/web开发/后端/Python/支付宝沙箱支付教程\",\"frontmatter\":{\"date\":\"2025-04-19 22:58:03\",\"title\":\"支付宝沙箱支付教程\",\"permalink\":\"/pages/4f6a36\",\"categories\":[\"后端\"],\"tags\":[\"Python\",\"Flask\"],\"coverImg\":\"/screenshots/支付宝沙箱支付详细使用教程/支付宝教程封面.png\",\"top\":true,\"sticky\":2,\"description\":\"详细介绍了在Python Web开发中集成支付宝沙箱支付的完整流程\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"支付宝沙箱支付教程\",\"date\":\"2025-04-19 22:58:03\",\"excerpt\":\"\",\"capture\":\"支付宝沙箱支付详细使用教程\\n详细介绍支付宝沙箱支付的全流程配置最新教程，通俗易懂，图文并茂，手把手教你一步步实现完整沙箱支付功能。亲测可用，文章撰写非常用心，包你学会！\\n&lt;!--@include: @/public/snippets/preface.md--\\n 一、前言\\n由于支付宝官方对Java等语言的文档说明支持较好，在Python方面相对较弱，而且依赖包还安装不了等Bug，所以接下来我将分享《在Python Web开发中如何集成支付宝沙箱支付》的详细教程，如果这篇文章有帮助到你，请记得关注我的公众号，我会定期分享实用的技术教程。如果没有帮到你，也可以留个免费的关注，以后或许会有你感兴趣的教程，而且文章质量都超高哦！\\n在个人平常（或准备后续对接支付宝正式支付环境）的项目中，使用沙箱支付来测试支付功能显得很有必要；如果是在校大学生的话，在你的项目中集成支付宝的沙箱支付，也能让你的项目\"},{\"url\":\"/web开发/开发者工具/VSCode/配置Linux开发环境\",\"frontmatter\":{\"date\":\"2025-04-19 23:19:49\",\"title\":\"从零配置Linux与Windows互通的开发环境\",\"permalink\":\"/pages/e47200\",\"categories\":[\"开发者工具\"],\"tags\":[\"VSCode\"],\"coverImg\":\"/screenshots/VSCode/搭建linux开发环境.png\",\"top\":true,\"sticky\":3,\"description\":\"从零打造 Linux 和 Windows 互通的开发环境\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"从零配置Linux与Windows互通的开发环境\",\"date\":\"2025-04-19 23:19:49\",\"excerpt\":\"\",\"capture\":\"从零配置 Linux 与 Windows 互通的开发环境\\n以下配置基于 `Red Hat 8`（红帽 8）的 Linux 最基础（无界面）系统，不同的 Linux 发行版会有一些区别，请注意自己系统的是否符合该以上条件。\\n 前置条件\\n\\n```bash\\n 关闭防火墙\\n$ systemctl stop firewalld --now     立即生效\\n$ systemctl status firewalld\\n$ systemctl disable firewalld        永久禁用\\n 关闭 selinux 安全策略\\n$ setenforce 0       本次生效\\n$ getenforce         验证\\n$ sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config     改写配置文件，永久关闭\\n``\"},{\"url\":\"/web开发/后端/Nodejs/\",\"frontmatter\":{\"date\":\"2025-04-19 22:04:01\",\"layout\":\"doc\",\"title\":\"Nodejs 安装教程\",\"navbar\":true,\"sidebar\":true,\"aside\":true,\"footer\":false,\"pageClass\":null,\"head\":[[\"meta\",{\"name\":\"description\",\"content\":\"Nodejs 详细安装教程附带配置\"}],[\"meta\",{\"name\":\"keywords\",\"content\":\"保姆级Nodejs安装和配置教程\"}]],\"permalink\":\"/pages/b609ed\",\"categories\":[\"后端\"],\"tags\":[\"Nodejs\"],\"coverImg\":\"/screenshots/Nodejs/nodejs官网.png\",\"top\":true,\"sticky\":4,\"description\":\"windows版安装和配置Nodejs保姆级详细教程\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Nodejs 安装教程\",\"date\":\"2025-04-19 22:04:01\",\"excerpt\":\"\",\"capture\":\"Nodejs 安装教程\\r\\n\\r\\n 一、安装 `Nodejs`\\r\\n\\r\\n::: info 访问`Nodejs`官网\\r\\n点击前往：Nodejs 官网\\r\\n\\r\\n一直点击下一步安装完即可（可以选择自行选择安装路径）。\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n- 安装完成后，打开`cmd`，输入`node -v`，如果显示版本号，则安装成功。\\r\\n\\r\\n```bash\\r\\n$ node -v\\r\\n$ npm -v\\r\\n```\\r\\n\\r\\n 二、配置\\r\\n\\r\\n\\r\\n\\r\\n 1. 创建目录\\r\\n\\r\\n创建`node_global`和`node_cache`目录，并且在`node_global`目录下创建`node_modules`目录。\\r\\n\\r\\n```bash\\r\\n 进入 E:/enviroments/nodejs/ 路径下\\r\\nmkdir -p node_global/node_modules node_cache\\r\\n```\\r\\n\\r\\n 2. 设置权限\\r\\n\\r\"},{\"url\":\"/web开发/后端/桌面应用开发/\",\"frontmatter\":{\"date\":\"2025-04-19 22:52:13\",\"title\":\"全网最新最全的 electron 项目环境搭建方式与踩坑经验分享\",\"head\":[[\"meta\",{\"name\":\"description\",\"content\":\"全网最全最新 electron 项目环境搭建方式与踩坑经验分享，帮你避坑，少走弯路，节省时间，还等什么，快来参考一下我的 electron 环境搭建指南！\"},{\"name\":\"keywords\",\"content\":\"electron 项目环境搭建 踩坑经验分享\"}]],\"footer\":false,\"permalink\":\"/pages/75a1df\",\"categories\":[\"后端\"],\"tags\":[\"桌面应用开发\"],\"coverImg\":\"/screenshots/Nodejs/Electron安装踩坑经验总结.png\",\"top\":true,\"sticky\":5,\"description\":\"全网最全最新 electron 项目环境搭建方式与踩坑经验分享\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"全网最新最全的 electron 项目环境搭建方式与踩坑经验分享\",\"date\":\"2025-04-19 22:52:13\",\"excerpt\":\"\",\"capture\":\"&lt;!--@include: @/public/snippets/preface.md--\\r\\n\\r\\n&gt; 本文项目搭建演示的`nodejs`版本如下：\\r\\n\\r\\n```bash\\r\\n$ node -v\\r\\n v22.14.0\\r\\n```\\r\\n\\r\\n 一、官方文档手动搭建\\r\\n\\r\\n文档地址：快速入门 | Electron，按照文档步骤操作即可，项目只包含了`electron`依赖，仅仅只是一个`hello world`展示。\\r\\n\\r\\n&gt; ⚠️ 注意：失败！我设置了代理（网络问题）和切换镜像源（淘宝）等操作都没用。截图如下：\\r\\n\\r\\n\\r\\n\\r\\n 二、官方脚手架方式创建\\r\\n\\r\\n- 创建项目命令如下：\\r\\n\\r\\n```bash\\r\\n$ npm init electron-app@latest my-app -- --template=vite  my-app:项目名(自定义)\\r\\n 或\\r\\n$ npm create \"},{\"url\":\"/web开发/后端/MongoDB/\",\"frontmatter\":{\"date\":\"2025-04-22 18:33:06\",\"title\":\"index\",\"permalink\":\"/pages/634615\",\"categories\":[\"web开发\",\"后端\",\"MongoDB\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-22 18:33:06\",\"excerpt\":\"\",\"capture\":\"MongoDB 快速入门\\n 安装\\n\\n```bash\\n 安装 mongodb server\\n$ wget https://repo.mongodb.org/yum/redhat/8/mongodb-org/8.0/x86_64/RPMS/mongodb-org-server-8.0.8-1.el8.x86_64.rpm\\n$ du -sh ./*                       可以查看一下文件大小\\n$ rpm -ivh ./mongodb-org-server-8.0.8-1.el8.x86_64.rpm\\n$ systemctl status mongod          查看服务状态\\n$ systemctl enable mongod --now    设置开机自启\\n 安装命令行工具 cli：https://www.mongodb.com/try/download/shell\"},{\"url\":\"/web开发/后端/Python/Django快速入门教程\",\"frontmatter\":{\"date\":\"2025-04-21 18:17:55\",\"title\":\"Django快速入门教程\",\"permalink\":\"/pages/5e2304\",\"categories\":[\"后端\",\"Python\"],\"tags\":[\"Django\"],\"description\":\"Django 哲学宗旨：懂得越多，写得越少\",\"coverImg\":\"/screenshots/Python/Django快速入门教程.png\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Django快速入门教程\",\"date\":\"2025-04-21 18:17:55\",\"excerpt\":\"\",\"capture\":\"Django 快速入门\\n 安装 Django\\n```bash\\n$ pip install django\\n```\\n 创建项目\\n```bash\\n$ mkdir &lt;项目名称\\n$ django-admin startproject [&lt;settings&gt;] &lt;项目名称&gt;    settings 是配置目录名称。如果不指定，配置目录的名称与项目名称一致\\n$ cd &lt;项目名称&gt;\\n```\\n- `manage.py`：管理 `Django` 项目的命令行工具。\\n- `settings/`：项目系统配置目录。\\n- `settings/settings.py`：`Django` 项目的配置文件。\\n- `settings/urls.py`：Django 项目的 URL 声明，就像你网站的 `路由` 。\\n- `settings/asgi.py`：项目运行在 `ASGI` \"},{\"url\":\"/web开发/后端/Python/\",\"frontmatter\":{\"date\":\"2025-04-21 00:51:35\",\"title\":\"index\",\"permalink\":\"/pages/de8c40\",\"categories\":[\"web开发\",\"后端\",\"Python\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-21 00:51:35\",\"excerpt\":\"\",\"capture\":\"Python 基础到高级\\r\\n\\r\\n::: tip 基础教程\\r\\n\\r\\n-   推荐 1：Python 官网\\r\\n\\r\\n-   推荐 2：极客教程\\r\\n\\r\\n-   推荐 3：清华源镜像站\\r\\n\\r\\n国内下载镜像：\\r\\n\\r\\n-   清华：https://pypi.tuna.tsinghua.edu.cn/simple\\r\\n-   阿里云：http://mirrors.aliyun.com/pypi/simple/\\r\\n-   豆瓣：https://pypi.douban.com/simple/\\r\\n-   中国科技大学：https://pypi.mirrors.ustc.edu.cn/simple/\\r\\n-   华中理工大学：http://pypi.hustunique.com/\\r\\n-   山东理工大学：http://pypi.sdutLinux.org/\\r\\n\\r\\n设置镜像源的命令：\\r\\n\\r\\n::: code-group\\r\"},{\"url\":\"/web开发/后端/Python/RestFramework\",\"frontmatter\":{\"date\":\"2025-04-21 00:50:31\",\"title\":\"RestFramework\",\"permalink\":\"/pages/baaa17\",\"categories\":[\"web开发\",\"后端\",\"Python\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"RestFramework\",\"date\":\"2025-04-21 00:50:31\",\"excerpt\":\"\",\"capture\":\"DRF 框架\\r\\n\\r\\n::: tip 介绍\\r\\n\\r\\n-   推荐 1：前往官方文档\\r\\n\\r\\n-   推荐 2: bilibili 教程\\r\\n\\r\\n-   推荐 3：深入理解什么是 Restful 规范\\r\\n    :::\\r\\n\\r\\n\\r\\n\\r\\n Restful API 最佳实践\\r\\n\\r\\n-   协议\\r\\n-   域名\\r\\n-   版本\\r\\n-   路径\\r\\n-   HTTP 动词\\r\\n-   过滤信息(Filtering)\\r\\n-   状态码(Status Codes)\\r\\n-   错误处理(Error handling)\\r\\n-   返回结果\\r\\n-   Hypermedia API\\r\\n\\r\\n HTTP 请求方法详解\\r\\n\\r\\n-   `GET (SELECT)`: 从服务器取出资源(一项或多项)\\r\\n-   `POST (CREATE)`: 在服务器新建一个资源\\r\\n-   `PUT (UPDATE)`: 在服务器更新资源(客户端提供\"},{\"url\":\"/web开发/前端/JavaScript/Canvas\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:32\",\"title\":\"Canvas\",\"permalink\":\"/pages/60efec\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Canvas\",\"date\":\"2025-04-20 23:56:32\",\"excerpt\":\"\",\"capture\":\"Canvas 绘图\\r\\n\\r\\n::: tip\\r\\n\\r\\n-   推荐：前往优秀文档\\r\\n-   参考博客：菜鸟教程\\r\\n-   核心思想：`canvas`是基于状态的方式进行绘图的\\r\\n-   `canvas`坐标空间：以画布左上角为原点，向右为`x正半轴`，向下为`y正半轴`，以`1px`为单位距离\\r\\n\\r\\n:::\\r\\n\\r\\n 基础\\r\\n\\r\\n 画布默认大小\\r\\n\\r\\n-   `canvas`画布的默认大小是 `宽 x 高 = 300 x 150`\\r\\n\\r\\n 获取画布\\r\\n\\r\\n```ts\\r\\n// 获取画布元素\\r\\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\\r\\n// 获取上下文对象: context\\r\\nconst ctx = canvas.getContext('2d') as CanvasRenderingContext2D\\r\"},{\"url\":\"/web开发/前端/JavaScript/事件循环\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:32\",\"title\":\"事件循环\",\"permalink\":\"/pages/4c45cd\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"事件循环\",\"date\":\"2025-04-20 23:56:32\",\"excerpt\":\"\",\"capture\":\"事件循环原理\\r\\n\\r\\n::: tip\\r\\n\\r\\n\\r\\n\\r\\n:::\\r\\n\\r\\n 事件循环概述\\r\\n\\r\\n::: info\\r\\n\\r\\n&gt; 在事件循环中，当主线程执行完当前的同步任务后，会检查事件队列中是否有待处理的事件。如果有，主线程会取出事件并执行对应的回调函数。这个循环的过程被称为事件循环（Event Loop），它由主线程和任务队列两部分组成。主线程负责执行同步任务，而异步任务则通过任务队列进行处理。这种机制保证了异步任务在适当的时机能够插入执行，从而实现了 JavaScript 的`非阻塞异步执行`。\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n事件循环流程如下：\\r\\n\\r\\n&gt; 1. 主线程读取 JavaScript 代码，形成相应的堆和执行栈。\\r\\n&gt; 2. 当主线程遇到异步任务时，将其委托给对应的异步进程（如 Web API）处理。\\r\\n&gt; 3. 异步任务完成后，将相应的回调函数推入任务队列。\\r\\n&g\"},{\"url\":\"/web开发/前端/JavaScript/原型链\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:32\",\"title\":\"原型链\",\"permalink\":\"/pages/17549b\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"原型链\",\"date\":\"2025-04-20 23:56:32\",\"excerpt\":\"\",\"capture\":\"原型链\\r\\n\\r\\n::: info 说明\\r\\n\\r\\n1. 原型：函数都有prototype属性，称之为原型，也称为原型对象\\r\\n\\r\\n    - 原型可以放一些属性和方法，共享给实例对象使用\\r\\n    - 原型可以做继承\\r\\n\\r\\n2. 原型链：对象都有 \\\\_\\\\_proto\\\\_\\\\_ 属性，这个属性指向它的原型对象，原型对象也是对象，也有自己的 \\\\_\\\\_proto\\\\_\\\\_ 属性，指向原型对象的原型对象，这样一层一层形成的链式结构称为原型链，最顶层找不到则返回 _null_。\\r\\n   :::\\r\\n\\r\\n 类\\r\\n\\r\\n::: info 概念\\r\\n类: 类是一种创建对象的蓝图或模板, 在 js 中, 类本质还是一个构造函数。\\r\\n:::\\r\\n\\r\\n 构造器(也称 `constructor` 或 `构造函数`)\\r\\n\\r\\n::: info 概念\\r\\n构造函数: 用 new 来执行的函数。\\r\\n:::\\r\\n::: tip 介绍\\r\\n原本以前是\"},{\"url\":\"/web开发/前端/JavaScript/JavaScript常识\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"JavaScript常识\",\"permalink\":\"/pages/f7e507\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"JavaScript常识\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"JavaScript常识整理\\r\\n\\r\\n nodejs 默认采用 commonjs 模块化规范\\r\\n\\r\\n::: tip 科普\\r\\n- (1)每个模块都Node.js 应用由模块组成，每个文件就是一个模块，有自己的作用域。\\r\\n- (2)在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。\\r\\n- (3)每个模块内部有两个变量可以使用，`require` 和 `module`。`require` 用来加载某个模块，`module` 代表当前模块，是一个对象，保存了当前模块需要导出的信息。\\r\\n- (4)`exports` 是 `module` 上的一个属性，保存了当前模块要导出的接口或者变量，使用 require 加载的某个模块获取到的值就是那个模块使用 `exports` 导出的值。\\r\\n- (5)注意: exports 和 module.exports 是指向同一个对象。最终`requir\"},{\"url\":\"/web开发/前端/JavaScript/Promise\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"Promise\",\"permalink\":\"/pages/233f86\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Promise\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"深入学习 Promise\\r\\n\\r\\n Promise 是什么？\\r\\n\\r\\n1. 抽象表达\\r\\n  - ES6 规范\\r\\n  - JS进行异步变成的新解决方案（旧方案是回调函数）\\r\\n2. 具体表达\\r\\n   - 从语法上来说：Promise是一个构造函数\\r\\n   - 从功能上来说：Promise对象用来封装一个一步操作并可以获取其成功或失败的结果值\\r\\n\\r\\n\\r\\n&gt; * fs文件操作\\r\\n&gt; * 数据库操作\\r\\n&gt; * ajax\\r\\n&gt; * 定时器\\r\\n&gt; * ...\\r\\n\\r\\n\\r\\n 为什么要用Promise？\\r\\n- 指定回调函数的方式更加灵活\\r\\n- 支持链式调用，可以解决回调地域问题\\r\\n\\r\\n Promise的状态\\r\\n1. pending （待定状态）\\r\\n2. pending 变为 `fulfilled`\\r\\n3. pending 变为 `rejected`\\r\\n\\r\\n&gt; 说明：只有这三种，\"},{\"url\":\"/web开发/前端/JavaScript/TypeScript\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"TypeScript\",\"permalink\":\"/pages/3b643f\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"TypeScript\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"TypeScript 学习笔记\\r\\n\\r\\n\\r\\n&gt;\\r\\n&gt; - 中文学习网: TypeScript\\r\\n&gt; \\r\\n&gt; - 推荐阅读：jsdocs文档\\r\\n&gt; \\r\\n&gt; - 推荐阅读：npm包管理器\\r\\n\\r\\n::: warning 注意\\r\\n- 记住：类型注释永远不会改变程序的运行时行为。\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n- `tsc`命令行编译选项\\r\\n\\r\\n| 参数              |                               功能 |\\r\\n| :---------------- | ---------------------------------: |\\r\\n| `--noEmitOnError` | TS代码有错误时，不要编译生成JS文件 |\\r\\n| `--target`        |    编译生成JS的目标版本，默认`ES5` |\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"},{\"url\":\"/web开发/前端/JavaScript/WebAPI\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"WebAPI\",\"permalink\":\"/pages/3faec5\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"WebAPI\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"常用 Web API\\r\\n\\r\\n 电池\\r\\n\\r\\n\\r\\n&gt;\\r\\n&gt; `navigator.getBattery()` 提供有关系统电池电量的信息。\\r\\n&gt;\\r\\n&gt; 事件\\r\\n&gt;\\r\\n&gt; -   `chargingchange`：当电池充电状态（charging 属性）更新时触发。\\r\\n&gt; -   `chargingtimechange`：当电池充电时间（chargingTime 属性）更新时触发。\\r\\n&gt; -   `dischargingtimechange`：当电池续航时间（dischargingTime 属性）更新时触发。\\r\\n&gt; -   `levelchange`：当电池电量（level 属性）更新时触发。\\r\\n\\r\\n::: code-group\\r\\n\\r\\n```ts [电池信息]\\r\\nnavigator.getBattery().then((battery) =&\"},{\"url\":\"/web开发/前端/JavaScript/\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"index\",\"permalink\":\"/pages/81bda3\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"JS 的使用技巧\\r\\n\\r\\n `var`、`let`、`const`区别\\r\\n\\r\\n::: tip 详解\\r\\n\\r\\n| 关键字  | 作用及注意事项                                                                                                                         |\\r\\n| ------- | -------------------------------------------------------------------------------------------------------------------------------------- |\\r\\n| `var`   | 定义`具有穿透作用域的`（全局）变量，不管在哪里定义，都会变成全局作用域的变量，定义后可以修\"},{\"url\":\"/web开发/前端/JavaScript/高级核心概念\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"高级核心概念\",\"permalink\":\"/pages/09b3f6\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"高级核心概念\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"JS 高级核心概念\\r\\n\\r\\n 事件循环原理\\r\\n\\r\\n::: tip\\r\\n\\r\\n\\r\\n\\r\\n:::\\r\\n\\r\\n 事件循环概述\\r\\n\\r\\n::: info\\r\\n\\r\\n&gt; 在事件循环中，当主线程执行完当前的同步任务后，会检查事件队列中是否有待处理的事件。如果有，主线程会取出事件并执行对应的回调函数。这个循环的过程被称为事件循环（Event Loop），它由主线程和任务队列两部分组成。主线程负责执行同步任务，而异步任务则通过任务队列进行处理。这种机制保证了异步任务在适当的时机能够插入执行，从而实现了 JavaScript 的`非阻塞异步执行`。\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n事件循环流程如下：\\r\\n\\r\\n&gt; 1. 主线程读取 JavaScript 代码，形成相应的堆和执行栈。\\r\\n&gt; 2. 当主线程遇到异步任务时，将其委托给对应的异步进程（如 Web API）处理。\\r\\n&gt; 3. 异步任务完成后，将相应的回\"},{\"url\":\"/视觉与设计/Adoube/PhotoShop/\",\"frontmatter\":{\"date\":\"2025-04-20 23:46:06\",\"title\":\"index\",\"permalink\":\"/pages/629cfa\",\"categories\":[\"视觉与设计\",\"Adoube\",\"PhotoShop\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:46:06\",\"excerpt\":\"\",\"capture\":\"PhotoShop\\r\\n\\r\\n 界面了解\\r\\n\\r\\n-   菜单栏\\r\\n-   工具栏\\r\\n-   属性栏\\r\\n-   状态栏\\r\\n-   工作区\\r\\n-   图层面板\\r\\n\\r\\n 常用快捷键\\r\\n\\r\\n| 快捷键                | 功能             | 转换功能 |\\r\\n| :-------------------- | ---------------- | -------- |\\r\\n| Ctrl + S              | 保存             |          |\\r\\n| Ctrl + Z              | 撤销             |          |\\r\\n| Ctrl + N              | 新建             |          |\\r\\n| ESC                   | 取消             \"},{\"url\":\"/前沿领域/人工智能/Ollama/\",\"frontmatter\":{\"date\":\"2025-04-20 23:43:03\",\"title\":\"index\",\"permalink\":\"/pages/066462\",\"categories\":[\"人工智能\"],\"tags\":[\"Ollama\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:43:03\",\"excerpt\":\"\",\"capture\":\"Ollama 开源大模型\\r\\n\\r\\n::: info 文档\\r\\n\\r\\nOllama 是一个开源的大型语言模型（LLM）服务工具，它允许用户在本地机器上运行和部署大型语言模型。\\r\\n\\r\\n-   推荐 1：Ollama 官网\\r\\n-   推荐 2：Ollama Github 仓库\\r\\n\\r\\n:::\\r\\n\\r\\n::: tip 提示\\r\\n\\r\\n-   `ollama`命令行工具的使用很类似`docker`命令，通过 `olloma -h` 可查看帮助\\r\\n-   推荐阅读：博客文章\\r\\n\\r\\n:::\\r\\n\\r\\n 列出已有模型\\r\\n\\r\\n```bash\\r\\n$ ollama list\\r\\n```\\r\\n\\r\\n 创建模型\\r\\n\\r\\n\\r\\n\\r\\n```bash\\r\\n$ ollama create mymodel -f ./Modelfile\\r\\n```\\r\\n\\r\\n 拉取模型\\r\\n\\r\\n&gt; 拉取本地已经存在的模型会自动比较两者差异进行更新\\r\\n\\r\\n```bash\\r\\n$\"},{\"url\":\"/web开发/开发者工具/VSCode/\",\"frontmatter\":{\"date\":\"2025-04-20 23:34:24\",\"title\":\"index\",\"permalink\":\"/pages/277ec2\",\"categories\":[\"web开发\",\"开发者工具\",\"VSCode\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:34:24\",\"excerpt\":\"\",\"capture\":\"VSCode 开发工具\\r\\n\\r\\n 一、常用插件\\r\\n\\r\\n|               插件名称               |                             功能                             |\\r\\n| :----------------------------------: | :----------------------------------------------------------: |\\r\\n|   Chinese (Simplified) (简体中文)    |              VSCode 界面简体中文插件(⭐⭐⭐⭐)               |\\r\\n|             Monokai Pro              |                  舒适美观的主题(⭐⭐⭐⭐⭐)         \"},{\"url\":\"/web开发/开发者工具/VSCode/我的配置\",\"frontmatter\":{\"date\":\"2025-04-20 23:33:51\",\"title\":\"我的配置\",\"permalink\":\"/pages/991531\",\"categories\":[\"web开发\",\"开发者工具\",\"VSCode\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"我的配置\",\"date\":\"2025-04-20 23:33:51\",\"excerpt\":\"\",\"capture\":\"一、VSCode 个性化配置\\r\\n\\r\\n 主题\\r\\n\\r\\n-   插件依赖：\\r\\n\\r\\n| 插件名称              | 插件描述           |\\r\\n| :-------------------- | ------------------ |\\r\\n| 🎨Monokai Pro         | 编辑器颜色主题     |\\r\\n| 📁Material Icon Theme | 文件、目录图标主题 |\\r\\n\\r\\n-   配置内容：\\r\\n\\r\\n```json\\r\\n/** settings.json */\\r\\n{\\r\\n    \\\"workbench.tree.indent\\\": 16, // 目录树视图缩进宽度\\r\\n    \\\"workbench.colorTheme\\\": \\\"Monokai Pro (Filter Spectrum)\\\", // 主题颜色\\r\\n    \\\"workbench.iconTheme\\\": \\\"\"},{\"url\":\"/web开发/运维/Linux/\",\"frontmatter\":{\"date\":\"2025-04-20 23:23:56\",\"title\":\"index\",\"permalink\":\"/pages/49880a\",\"categories\":[\"web开发\",\"运维\",\"Linux\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:23:56\",\"excerpt\":\"\",\"capture\":\"Linux 笔记\\r\\n\\r\\n\\r\\n\\r\\n 命令查询网站\\r\\n\\r\\n\\r\\n\\r\\n 单元五、磁盘管理\\r\\n\\r\\n&gt; 一定要注意关联上下文信息进行阅读、操作\\r\\n\\r\\n&gt; 推荐几个在主机上方便操作 Linux 服务器的软件：`XShell` 、 `WindTerm` 、 `FinalShell`\\r\\n\\r\\n 一、磁盘分区\\r\\n\\r\\n&gt; fdisk 命令中的参数及其作用\\r\\n\\r\\n| 参数 | 作用                           |\\r\\n| ---- | ------------------------------ |\\r\\n| m    | 查看全部可用的参数（帮忙信息） |\\r\\n| n    | 添加新的分区                   |\\r\\n| d    | 删除某个分区信息               |\\r\\n| l    | 列出所有可用的分区类型         |\\r\\n| t    \"},{\"url\":\"/web开发/运维/Nginx/\",\"frontmatter\":{\"date\":\"2025-04-20 23:22:47\",\"title\":\"index\",\"permalink\":\"/pages/0e6ca2\",\"categories\":[\"web开发\",\"运维\",\"Nginx\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:22:47\",\"excerpt\":\"\",\"capture\":\"前置条件\\r\\n\\r\\n 配置静态 IP\\r\\n\\r\\n```bash\\r\\n 一键配置 静态IP地址 并 启用\\r\\nnmcli c add type ethernet con-name \\\"static_conn\\\" ifname ens160 ipv4.addresses 192.168.232.20/24 gw4 192.168.232.2 ipv4.dns \\\"8.8.8.8 114.114.114.114\\\" ipv4.method manual autoconnect yes && nmcli c up static_conn\\r\\n```\\r\\n\\r\\n 关闭防火墙\\r\\n\\r\\n```bash\\r\\n$ systemctl stop firewalld       本次开机关闭防火墙（重新开机防火墙又会启动）\\r\\n$ systemctl disable firewalld    永久禁用防火墙（以后不会再自动启动了）\\r\\n\\r\\n$ \"},{\"url\":\"/web开发/运维/Linux/Linux环境安装\",\"frontmatter\":{\"date\":\"2025-04-20 23:18:51\",\"title\":\"Linux环境安装\",\"permalink\":\"/pages/21e258\",\"categories\":[\"web开发\",\"运维\",\"Linux\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Linux环境安装\",\"date\":\"2025-04-20 23:18:51\",\"excerpt\":\"\",\"capture\":\"Linux安装运行环境\\r\\n\\r\\n 安装基础工具\\r\\n\\r\\n```bash\\r\\n$ yum install -y make gcc patch libffi-devel python3-devel zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel xz-devel lrzsz tree zip unzip\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n 1、安装 nginx\\r\\n\\r\\n\\r\\n\\r\\n (1)安装 nginx\\r\\n\\r\\n```bash\\r\\n$ yum install -y nginx\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n (2)配置 `/etc/nginx/nginx.conf`\\r\\n\\r\\n- 开放静态资源\\r\\n- 配置反向代理\\r\\n- ...\\r\\n\\r\\n\\r\\n\\r\\n (3)验证配置有效性\\r\\n\\r\\n```b\"},{\"url\":\"/web开发/运维/服务器/\",\"frontmatter\":{\"date\":\"2025-04-20 23:12:29\",\"title\":\"index\",\"permalink\":\"/pages/fec2e6\",\"categories\":[\"web开发\",\"运维\",\"服务器\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:12:29\",\"excerpt\":\"\",\"capture\":\"云计算\\r\\n\\r\\n 一、Linux 下载与安装\\r\\n\\r\\n::: tip 推荐：\\r\\n\\r\\n`RHEL 下载`：登陆红帽官网后, 访问该网址跳转到下载镜像界面\\r\\n\\r\\n`RHEL8 安装` 参考博客：教程\\r\\n\\r\\n:::\\r\\n\\r\\n 二、包管理器配置\\r\\n\\r\\n RHEL 注册\\r\\n\\r\\n::: info\\r\\n\\r\\n-   去官网注册\\r\\n\\r\\n:::\\r\\n\\r\\n 配置 `yum 官方仓库源`\\r\\n\\r\\n```bash\\r\\n 终端登录红帽子账号\\r\\n$ subscription-manager register --username=账户名称 --password='账户对应的密码' --auto-attach\\r\\n 查看仓库名称\\r\\n$ yum repolist\\r\\n 配置好仓库后，下载安装这个软件，便于后面Linux服务器和本地window电脑进行上传和下载\\r\\n$ yum install -y lrzsz\\r\\n```\\r\\n\\r\\n 三、远程登录工\"},{\"url\":\"/web开发/运维/服务器/搭建服务器\",\"frontmatter\":{\"date\":\"2025-04-20 23:12:24\",\"title\":\"搭建服务器\",\"permalink\":\"/pages/bcf0fc\",\"categories\":[\"web开发\",\"运维\",\"服务器\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"搭建服务器\",\"date\":\"2025-04-20 23:12:24\",\"excerpt\":\"\",\"capture\":\"搭建自己的服务器\\r\\n\\r\\n\\r\\n\\r\\n 1. 购买服务器\\r\\n\\r\\n\\r\\n\\r\\n::: tip 提示\\r\\n\\r\\n- 自己选择一个喜欢的或者合适的服务器运营商，购买他们的`Linux`服务器，像阿里云提供了以学生身份可以免费申请`3个月`的服务器试用，跟正常购买的服务器差不多，但是性能肯定不是特别好咯，毕竟是免费的嘛，但是个人的使用一般没问题，比如托管静态资源、云服务器学习使用等，这些都能够满足了。等学会了，再根据以后自己的项目性能要求，购买性能更加优质的服务器就行了。遇到一些促销日也可以看看官方是否有便宜点的服务器促销，低价促销的时候，也可以便宜的购买一个几年的来使用。哈哈 :smile:\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n::: warning 注意\\r\\n\\r\\n- 服务器购买了之后，会分配给你公网访问服务器的IP，此时你只需要在服务器上安装好Nginx、Apache之类的服务器软件，简单的启动、配置一下，那么就可以\"},{\"url\":\"/web开发/后端/MySQL/\",\"frontmatter\":{\"date\":\"2025-04-20 23:07:19\",\"title\":\"index\",\"permalink\":\"/pages/0a9104\",\"categories\":[\"web开发\",\"后端\",\"MySQL\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:07:19\",\"excerpt\":\"\",\"capture\":\"MySQL 数据库\\r\\n\\r\\n 基础篇\\r\\n\\r\\n MySQL 概述\\r\\n\\r\\n-   数据库相关概念：\\r\\n\\r\\n|      名称      |                                 全称                                 |               简称               |\\r\\n| :------------: | :------------------------------------------------------------------: | :------------------------------: |\\r\\n|     数据库     |               `存储数据的仓库`，数据是有组织的进行存储               |           DataBase(DB)           |\\r\\n\"},{\"url\":\"/web开发/后端/Python/QQ微信消息轰炸\",\"frontmatter\":{\"date\":\"2025-04-20 23:04:51\",\"title\":\"QQ微信消息轰炸\",\"permalink\":\"/pages/9abc85\",\"categories\":[\"web开发\",\"后端\",\"Python\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"QQ微信消息轰炸\",\"date\":\"2025-04-20 23:04:51\",\"excerpt\":\"\",\"capture\":\"消息轰炸\\r\\n\\r\\n 安装依赖\\r\\n\\r\\n```bash\\r\\n$ pip install pyautogui\\r\\n```\\r\\n\\r\\n 程序启动\\r\\n\\r\\n```python\\r\\npython message.py\\r\\n```\\r\\n\\r\\n 源代码\\r\\n\\r\\n```python\\r\\nimport time\\r\\n\\r\\nimport pyautogui\\r\\nimport pyperclip\\r\\n\\r\\ndef send_message(message, interval=1):\\r\\n    pyperclip.copy(message)\\r\\n    pyautogui.hotkey('ctrl', 'v')\\r\\n    pyautogui.press('enter')\\r\\n    time.sleep(interval)\\r\\n\\r\\n\\r\\ndef bomber(file_path='./messages.txt'):\\r\\n    \\\"\\\"\\\"\\r\\n    在微信、QQ\"},{\"url\":\"/web开发/开发者工具/Git/\",\"frontmatter\":{\"date\":\"2025-04-20 22:59:44\",\"title\":\"index\",\"permalink\":\"/pages/f4f5d9\",\"categories\":[\"web开发\",\"开发者工具\",\"Git\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 22:59:44\",\"excerpt\":\"\",\"capture\":\"Git 版本控制系统\\r\\n\\r\\n::: tip 概述\\r\\n\\r\\n`Git`是一个免费的、开源的分布式版本控制系统，可以快速高效地处理从小型到大型的各种项目。\\r\\n\\r\\n`Git`易于学习，内存占用小，性能极快。它具有廉价的本地库，方便的暂存区域和多个工作流分支等特性。\\r\\n\\r\\n`Git工具下载`：推荐前往官网\\r\\n\\r\\n:::\\r\\n\\r\\n Git 本地管理\\r\\n\\r\\n 设置签名\\r\\n\\r\\n```bash\\r\\n$ git config --global user.name \\\"用户名\\\"\\t\\t 设置用户签名\\r\\n$ git config --global user.email \\\"邮箱\\\"\\t\\t  设置邮箱签名\\r\\n```\\r\\n\\r\\n 查看特定级别的配置信息\\r\\n\\r\\n 查看全局配置\\r\\n\\r\\n\\r\\n\\r\\n```bash\\r\\n$ git config --global --list\\r\\n```\\r\\n\\r\\n 查看特定配置项的值\\r\\n\\r\\n```bash\\r\\n$ git \"},{\"url\":\"/web开发/后端/Cpp/\",\"frontmatter\":{\"date\":\"2025-04-19 15:24:14\",\"title\":\"C++语言快速入门\",\"categories\":[\"后端\"],\"tags\":[\"C++\"],\"description\":\"C++是一种静态类型的中级语言，综合了高级语言和低级语言的特点\",\"coverImg\":\"/banner/8.webp\",\"permalink\":\"/pages/2aeaba\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"C++语言快速入门\",\"date\":\"2025-04-19 15:24:14\",\"excerpt\":\"\",\"capture\":\"C++语言快速入门\\n 安装 `C++` 编译环境\\n```bash\\n $ sudo subscription-manager repos --enable codeready-builder-for-rhel-8-x86_64-rpms\\n$ sudo dnf install -y gcc gcc-c++ make\\n 或者安装完整的开发工具组（包含更多工具如gdb、git等）\\n$ sudo dnf groupinstall -y \\\"Development Tools\\\"\\n 检查安装\\n$ gcc --version\\n$ g++ --version\\n$ make --version\\n```\\n 第一个 `C++` 程序\\n```c++\\n// main.cpp\\ninclude &lt;iostream\\nusing namespace std;\\nint main()\\n{\\n    cout &lt;&lt; \"},{\"url\":\"/web开发/后端/Lua/\",\"frontmatter\":{\"date\":\"2025-04-19 07:24:14\",\"title\":\"Lua语言快速入门\",\"categories\":[\"后端\"],\"tags\":[\"Lua\"],\"description\":\"Lua 是一款轻量级、高效灵活、跨平台的多范式编程语言\",\"coverImg\":\"/banner/1.webp\",\"permalink\":\"/pages/e7b99e\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Lua语言快速入门\",\"date\":\"2025-04-19 07:24:14\",\"excerpt\":\"\",\"capture\":\"Lua语言快速入门\\n 环境安装\\n- 了解更多，请参考：菜鸟教程-Lua 环境安装\\n- Linux 系统(CentOS)\\n```bash\\n$ sudo yum install -y epel-release\\n$ sudo yum install -y lua\\n```\\n 快速体验\\n 交互式\\n```bash\\n$ man lua                  查看 lua 命令行帮助说明\\n$ lua -v                   查看版本信息\\n$ lua -i                   进入交互模式\\n\\n```\\n 脚本式编程\\n- 创建 `*.lua` 文件\\n```lua\\n!/usr/local/bin/lua\\nprint(\\\"Hello world!\\\")\\n```\\n- 赋予可执行权限\\n```bash\\n$ chmod 700 hello.lua\\n```\\n- 执行脚本\\n```bas\"}],\"sortPostsByDate\":[{\"url\":\"/web开发/后端/MongoDB/\",\"frontmatter\":{\"date\":\"2025-04-22 18:33:06\",\"title\":\"index\",\"permalink\":\"/pages/634615\",\"categories\":[\"web开发\",\"后端\",\"MongoDB\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-22 18:33:06\",\"excerpt\":\"\",\"capture\":\"MongoDB 快速入门\\n 安装\\n\\n```bash\\n 安装 mongodb server\\n$ wget https://repo.mongodb.org/yum/redhat/8/mongodb-org/8.0/x86_64/RPMS/mongodb-org-server-8.0.8-1.el8.x86_64.rpm\\n$ du -sh ./*                       可以查看一下文件大小\\n$ rpm -ivh ./mongodb-org-server-8.0.8-1.el8.x86_64.rpm\\n$ systemctl status mongod          查看服务状态\\n$ systemctl enable mongod --now    设置开机自启\\n 安装命令行工具 cli：https://www.mongodb.com/try/download/shell\"},{\"url\":\"/web开发/后端/Python/Django快速入门教程\",\"frontmatter\":{\"date\":\"2025-04-21 18:17:55\",\"title\":\"Django快速入门教程\",\"permalink\":\"/pages/5e2304\",\"categories\":[\"后端\",\"Python\"],\"tags\":[\"Django\"],\"description\":\"Django 哲学宗旨：懂得越多，写得越少\",\"coverImg\":\"/screenshots/Python/Django快速入门教程.png\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Django快速入门教程\",\"date\":\"2025-04-21 18:17:55\",\"excerpt\":\"\",\"capture\":\"Django 快速入门\\n 安装 Django\\n```bash\\n$ pip install django\\n```\\n 创建项目\\n```bash\\n$ mkdir &lt;项目名称\\n$ django-admin startproject [&lt;settings&gt;] &lt;项目名称&gt;    settings 是配置目录名称。如果不指定，配置目录的名称与项目名称一致\\n$ cd &lt;项目名称&gt;\\n```\\n- `manage.py`：管理 `Django` 项目的命令行工具。\\n- `settings/`：项目系统配置目录。\\n- `settings/settings.py`：`Django` 项目的配置文件。\\n- `settings/urls.py`：Django 项目的 URL 声明，就像你网站的 `路由` 。\\n- `settings/asgi.py`：项目运行在 `ASGI` \"},{\"url\":\"/web开发/后端/Python/\",\"frontmatter\":{\"date\":\"2025-04-21 00:51:35\",\"title\":\"index\",\"permalink\":\"/pages/de8c40\",\"categories\":[\"web开发\",\"后端\",\"Python\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-21 00:51:35\",\"excerpt\":\"\",\"capture\":\"Python 基础到高级\\r\\n\\r\\n::: tip 基础教程\\r\\n\\r\\n-   推荐 1：Python 官网\\r\\n\\r\\n-   推荐 2：极客教程\\r\\n\\r\\n-   推荐 3：清华源镜像站\\r\\n\\r\\n国内下载镜像：\\r\\n\\r\\n-   清华：https://pypi.tuna.tsinghua.edu.cn/simple\\r\\n-   阿里云：http://mirrors.aliyun.com/pypi/simple/\\r\\n-   豆瓣：https://pypi.douban.com/simple/\\r\\n-   中国科技大学：https://pypi.mirrors.ustc.edu.cn/simple/\\r\\n-   华中理工大学：http://pypi.hustunique.com/\\r\\n-   山东理工大学：http://pypi.sdutLinux.org/\\r\\n\\r\\n设置镜像源的命令：\\r\\n\\r\\n::: code-group\\r\"},{\"url\":\"/web开发/后端/Python/RestFramework\",\"frontmatter\":{\"date\":\"2025-04-21 00:50:31\",\"title\":\"RestFramework\",\"permalink\":\"/pages/baaa17\",\"categories\":[\"web开发\",\"后端\",\"Python\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"RestFramework\",\"date\":\"2025-04-21 00:50:31\",\"excerpt\":\"\",\"capture\":\"DRF 框架\\r\\n\\r\\n::: tip 介绍\\r\\n\\r\\n-   推荐 1：前往官方文档\\r\\n\\r\\n-   推荐 2: bilibili 教程\\r\\n\\r\\n-   推荐 3：深入理解什么是 Restful 规范\\r\\n    :::\\r\\n\\r\\n\\r\\n\\r\\n Restful API 最佳实践\\r\\n\\r\\n-   协议\\r\\n-   域名\\r\\n-   版本\\r\\n-   路径\\r\\n-   HTTP 动词\\r\\n-   过滤信息(Filtering)\\r\\n-   状态码(Status Codes)\\r\\n-   错误处理(Error handling)\\r\\n-   返回结果\\r\\n-   Hypermedia API\\r\\n\\r\\n HTTP 请求方法详解\\r\\n\\r\\n-   `GET (SELECT)`: 从服务器取出资源(一项或多项)\\r\\n-   `POST (CREATE)`: 在服务器新建一个资源\\r\\n-   `PUT (UPDATE)`: 在服务器更新资源(客户端提供\"},{\"url\":\"/web开发/前端/JavaScript/Canvas\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:32\",\"title\":\"Canvas\",\"permalink\":\"/pages/60efec\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Canvas\",\"date\":\"2025-04-20 23:56:32\",\"excerpt\":\"\",\"capture\":\"Canvas 绘图\\r\\n\\r\\n::: tip\\r\\n\\r\\n-   推荐：前往优秀文档\\r\\n-   参考博客：菜鸟教程\\r\\n-   核心思想：`canvas`是基于状态的方式进行绘图的\\r\\n-   `canvas`坐标空间：以画布左上角为原点，向右为`x正半轴`，向下为`y正半轴`，以`1px`为单位距离\\r\\n\\r\\n:::\\r\\n\\r\\n 基础\\r\\n\\r\\n 画布默认大小\\r\\n\\r\\n-   `canvas`画布的默认大小是 `宽 x 高 = 300 x 150`\\r\\n\\r\\n 获取画布\\r\\n\\r\\n```ts\\r\\n// 获取画布元素\\r\\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\\r\\n// 获取上下文对象: context\\r\\nconst ctx = canvas.getContext('2d') as CanvasRenderingContext2D\\r\"},{\"url\":\"/web开发/前端/JavaScript/事件循环\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:32\",\"title\":\"事件循环\",\"permalink\":\"/pages/4c45cd\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"事件循环\",\"date\":\"2025-04-20 23:56:32\",\"excerpt\":\"\",\"capture\":\"事件循环原理\\r\\n\\r\\n::: tip\\r\\n\\r\\n\\r\\n\\r\\n:::\\r\\n\\r\\n 事件循环概述\\r\\n\\r\\n::: info\\r\\n\\r\\n&gt; 在事件循环中，当主线程执行完当前的同步任务后，会检查事件队列中是否有待处理的事件。如果有，主线程会取出事件并执行对应的回调函数。这个循环的过程被称为事件循环（Event Loop），它由主线程和任务队列两部分组成。主线程负责执行同步任务，而异步任务则通过任务队列进行处理。这种机制保证了异步任务在适当的时机能够插入执行，从而实现了 JavaScript 的`非阻塞异步执行`。\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n事件循环流程如下：\\r\\n\\r\\n&gt; 1. 主线程读取 JavaScript 代码，形成相应的堆和执行栈。\\r\\n&gt; 2. 当主线程遇到异步任务时，将其委托给对应的异步进程（如 Web API）处理。\\r\\n&gt; 3. 异步任务完成后，将相应的回调函数推入任务队列。\\r\\n&g\"},{\"url\":\"/web开发/前端/JavaScript/原型链\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:32\",\"title\":\"原型链\",\"permalink\":\"/pages/17549b\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"原型链\",\"date\":\"2025-04-20 23:56:32\",\"excerpt\":\"\",\"capture\":\"原型链\\r\\n\\r\\n::: info 说明\\r\\n\\r\\n1. 原型：函数都有prototype属性，称之为原型，也称为原型对象\\r\\n\\r\\n    - 原型可以放一些属性和方法，共享给实例对象使用\\r\\n    - 原型可以做继承\\r\\n\\r\\n2. 原型链：对象都有 \\\\_\\\\_proto\\\\_\\\\_ 属性，这个属性指向它的原型对象，原型对象也是对象，也有自己的 \\\\_\\\\_proto\\\\_\\\\_ 属性，指向原型对象的原型对象，这样一层一层形成的链式结构称为原型链，最顶层找不到则返回 _null_。\\r\\n   :::\\r\\n\\r\\n 类\\r\\n\\r\\n::: info 概念\\r\\n类: 类是一种创建对象的蓝图或模板, 在 js 中, 类本质还是一个构造函数。\\r\\n:::\\r\\n\\r\\n 构造器(也称 `constructor` 或 `构造函数`)\\r\\n\\r\\n::: info 概念\\r\\n构造函数: 用 new 来执行的函数。\\r\\n:::\\r\\n::: tip 介绍\\r\\n原本以前是\"},{\"url\":\"/web开发/前端/JavaScript/JavaScript常识\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"JavaScript常识\",\"permalink\":\"/pages/f7e507\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"JavaScript常识\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"JavaScript常识整理\\r\\n\\r\\n nodejs 默认采用 commonjs 模块化规范\\r\\n\\r\\n::: tip 科普\\r\\n- (1)每个模块都Node.js 应用由模块组成，每个文件就是一个模块，有自己的作用域。\\r\\n- (2)在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。\\r\\n- (3)每个模块内部有两个变量可以使用，`require` 和 `module`。`require` 用来加载某个模块，`module` 代表当前模块，是一个对象，保存了当前模块需要导出的信息。\\r\\n- (4)`exports` 是 `module` 上的一个属性，保存了当前模块要导出的接口或者变量，使用 require 加载的某个模块获取到的值就是那个模块使用 `exports` 导出的值。\\r\\n- (5)注意: exports 和 module.exports 是指向同一个对象。最终`requir\"},{\"url\":\"/web开发/前端/JavaScript/Promise\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"Promise\",\"permalink\":\"/pages/233f86\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Promise\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"深入学习 Promise\\r\\n\\r\\n Promise 是什么？\\r\\n\\r\\n1. 抽象表达\\r\\n  - ES6 规范\\r\\n  - JS进行异步变成的新解决方案（旧方案是回调函数）\\r\\n2. 具体表达\\r\\n   - 从语法上来说：Promise是一个构造函数\\r\\n   - 从功能上来说：Promise对象用来封装一个一步操作并可以获取其成功或失败的结果值\\r\\n\\r\\n\\r\\n&gt; * fs文件操作\\r\\n&gt; * 数据库操作\\r\\n&gt; * ajax\\r\\n&gt; * 定时器\\r\\n&gt; * ...\\r\\n\\r\\n\\r\\n 为什么要用Promise？\\r\\n- 指定回调函数的方式更加灵活\\r\\n- 支持链式调用，可以解决回调地域问题\\r\\n\\r\\n Promise的状态\\r\\n1. pending （待定状态）\\r\\n2. pending 变为 `fulfilled`\\r\\n3. pending 变为 `rejected`\\r\\n\\r\\n&gt; 说明：只有这三种，\"},{\"url\":\"/web开发/前端/JavaScript/TypeScript\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"TypeScript\",\"permalink\":\"/pages/3b643f\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"TypeScript\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"TypeScript 学习笔记\\r\\n\\r\\n\\r\\n&gt;\\r\\n&gt; - 中文学习网: TypeScript\\r\\n&gt; \\r\\n&gt; - 推荐阅读：jsdocs文档\\r\\n&gt; \\r\\n&gt; - 推荐阅读：npm包管理器\\r\\n\\r\\n::: warning 注意\\r\\n- 记住：类型注释永远不会改变程序的运行时行为。\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n- `tsc`命令行编译选项\\r\\n\\r\\n| 参数              |                               功能 |\\r\\n| :---------------- | ---------------------------------: |\\r\\n| `--noEmitOnError` | TS代码有错误时，不要编译生成JS文件 |\\r\\n| `--target`        |    编译生成JS的目标版本，默认`ES5` |\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"},{\"url\":\"/web开发/前端/JavaScript/WebAPI\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"WebAPI\",\"permalink\":\"/pages/3faec5\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"WebAPI\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"常用 Web API\\r\\n\\r\\n 电池\\r\\n\\r\\n\\r\\n&gt;\\r\\n&gt; `navigator.getBattery()` 提供有关系统电池电量的信息。\\r\\n&gt;\\r\\n&gt; 事件\\r\\n&gt;\\r\\n&gt; -   `chargingchange`：当电池充电状态（charging 属性）更新时触发。\\r\\n&gt; -   `chargingtimechange`：当电池充电时间（chargingTime 属性）更新时触发。\\r\\n&gt; -   `dischargingtimechange`：当电池续航时间（dischargingTime 属性）更新时触发。\\r\\n&gt; -   `levelchange`：当电池电量（level 属性）更新时触发。\\r\\n\\r\\n::: code-group\\r\\n\\r\\n```ts [电池信息]\\r\\nnavigator.getBattery().then((battery) =&\"},{\"url\":\"/web开发/前端/JavaScript/\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"index\",\"permalink\":\"/pages/81bda3\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"JS 的使用技巧\\r\\n\\r\\n `var`、`let`、`const`区别\\r\\n\\r\\n::: tip 详解\\r\\n\\r\\n| 关键字  | 作用及注意事项                                                                                                                         |\\r\\n| ------- | -------------------------------------------------------------------------------------------------------------------------------------- |\\r\\n| `var`   | 定义`具有穿透作用域的`（全局）变量，不管在哪里定义，都会变成全局作用域的变量，定义后可以修\"},{\"url\":\"/web开发/前端/JavaScript/高级核心概念\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"高级核心概念\",\"permalink\":\"/pages/09b3f6\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"高级核心概念\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"JS 高级核心概念\\r\\n\\r\\n 事件循环原理\\r\\n\\r\\n::: tip\\r\\n\\r\\n\\r\\n\\r\\n:::\\r\\n\\r\\n 事件循环概述\\r\\n\\r\\n::: info\\r\\n\\r\\n&gt; 在事件循环中，当主线程执行完当前的同步任务后，会检查事件队列中是否有待处理的事件。如果有，主线程会取出事件并执行对应的回调函数。这个循环的过程被称为事件循环（Event Loop），它由主线程和任务队列两部分组成。主线程负责执行同步任务，而异步任务则通过任务队列进行处理。这种机制保证了异步任务在适当的时机能够插入执行，从而实现了 JavaScript 的`非阻塞异步执行`。\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n事件循环流程如下：\\r\\n\\r\\n&gt; 1. 主线程读取 JavaScript 代码，形成相应的堆和执行栈。\\r\\n&gt; 2. 当主线程遇到异步任务时，将其委托给对应的异步进程（如 Web API）处理。\\r\\n&gt; 3. 异步任务完成后，将相应的回\"},{\"url\":\"/视觉与设计/Adoube/PhotoShop/\",\"frontmatter\":{\"date\":\"2025-04-20 23:46:06\",\"title\":\"index\",\"permalink\":\"/pages/629cfa\",\"categories\":[\"视觉与设计\",\"Adoube\",\"PhotoShop\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:46:06\",\"excerpt\":\"\",\"capture\":\"PhotoShop\\r\\n\\r\\n 界面了解\\r\\n\\r\\n-   菜单栏\\r\\n-   工具栏\\r\\n-   属性栏\\r\\n-   状态栏\\r\\n-   工作区\\r\\n-   图层面板\\r\\n\\r\\n 常用快捷键\\r\\n\\r\\n| 快捷键                | 功能             | 转换功能 |\\r\\n| :-------------------- | ---------------- | -------- |\\r\\n| Ctrl + S              | 保存             |          |\\r\\n| Ctrl + Z              | 撤销             |          |\\r\\n| Ctrl + N              | 新建             |          |\\r\\n| ESC                   | 取消             \"},{\"url\":\"/前沿领域/人工智能/Ollama/\",\"frontmatter\":{\"date\":\"2025-04-20 23:43:03\",\"title\":\"index\",\"permalink\":\"/pages/066462\",\"categories\":[\"人工智能\"],\"tags\":[\"Ollama\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:43:03\",\"excerpt\":\"\",\"capture\":\"Ollama 开源大模型\\r\\n\\r\\n::: info 文档\\r\\n\\r\\nOllama 是一个开源的大型语言模型（LLM）服务工具，它允许用户在本地机器上运行和部署大型语言模型。\\r\\n\\r\\n-   推荐 1：Ollama 官网\\r\\n-   推荐 2：Ollama Github 仓库\\r\\n\\r\\n:::\\r\\n\\r\\n::: tip 提示\\r\\n\\r\\n-   `ollama`命令行工具的使用很类似`docker`命令，通过 `olloma -h` 可查看帮助\\r\\n-   推荐阅读：博客文章\\r\\n\\r\\n:::\\r\\n\\r\\n 列出已有模型\\r\\n\\r\\n```bash\\r\\n$ ollama list\\r\\n```\\r\\n\\r\\n 创建模型\\r\\n\\r\\n\\r\\n\\r\\n```bash\\r\\n$ ollama create mymodel -f ./Modelfile\\r\\n```\\r\\n\\r\\n 拉取模型\\r\\n\\r\\n&gt; 拉取本地已经存在的模型会自动比较两者差异进行更新\\r\\n\\r\\n```bash\\r\\n$\"},{\"url\":\"/web开发/开发者工具/VSCode/\",\"frontmatter\":{\"date\":\"2025-04-20 23:34:24\",\"title\":\"index\",\"permalink\":\"/pages/277ec2\",\"categories\":[\"web开发\",\"开发者工具\",\"VSCode\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:34:24\",\"excerpt\":\"\",\"capture\":\"VSCode 开发工具\\r\\n\\r\\n 一、常用插件\\r\\n\\r\\n|               插件名称               |                             功能                             |\\r\\n| :----------------------------------: | :----------------------------------------------------------: |\\r\\n|   Chinese (Simplified) (简体中文)    |              VSCode 界面简体中文插件(⭐⭐⭐⭐)               |\\r\\n|             Monokai Pro              |                  舒适美观的主题(⭐⭐⭐⭐⭐)         \"},{\"url\":\"/web开发/开发者工具/VSCode/我的配置\",\"frontmatter\":{\"date\":\"2025-04-20 23:33:51\",\"title\":\"我的配置\",\"permalink\":\"/pages/991531\",\"categories\":[\"web开发\",\"开发者工具\",\"VSCode\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"我的配置\",\"date\":\"2025-04-20 23:33:51\",\"excerpt\":\"\",\"capture\":\"一、VSCode 个性化配置\\r\\n\\r\\n 主题\\r\\n\\r\\n-   插件依赖：\\r\\n\\r\\n| 插件名称              | 插件描述           |\\r\\n| :-------------------- | ------------------ |\\r\\n| 🎨Monokai Pro         | 编辑器颜色主题     |\\r\\n| 📁Material Icon Theme | 文件、目录图标主题 |\\r\\n\\r\\n-   配置内容：\\r\\n\\r\\n```json\\r\\n/** settings.json */\\r\\n{\\r\\n    \\\"workbench.tree.indent\\\": 16, // 目录树视图缩进宽度\\r\\n    \\\"workbench.colorTheme\\\": \\\"Monokai Pro (Filter Spectrum)\\\", // 主题颜色\\r\\n    \\\"workbench.iconTheme\\\": \\\"\"},{\"url\":\"/web开发/运维/Linux/\",\"frontmatter\":{\"date\":\"2025-04-20 23:23:56\",\"title\":\"index\",\"permalink\":\"/pages/49880a\",\"categories\":[\"web开发\",\"运维\",\"Linux\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:23:56\",\"excerpt\":\"\",\"capture\":\"Linux 笔记\\r\\n\\r\\n\\r\\n\\r\\n 命令查询网站\\r\\n\\r\\n\\r\\n\\r\\n 单元五、磁盘管理\\r\\n\\r\\n&gt; 一定要注意关联上下文信息进行阅读、操作\\r\\n\\r\\n&gt; 推荐几个在主机上方便操作 Linux 服务器的软件：`XShell` 、 `WindTerm` 、 `FinalShell`\\r\\n\\r\\n 一、磁盘分区\\r\\n\\r\\n&gt; fdisk 命令中的参数及其作用\\r\\n\\r\\n| 参数 | 作用                           |\\r\\n| ---- | ------------------------------ |\\r\\n| m    | 查看全部可用的参数（帮忙信息） |\\r\\n| n    | 添加新的分区                   |\\r\\n| d    | 删除某个分区信息               |\\r\\n| l    | 列出所有可用的分区类型         |\\r\\n| t    \"},{\"url\":\"/web开发/运维/Nginx/\",\"frontmatter\":{\"date\":\"2025-04-20 23:22:47\",\"title\":\"index\",\"permalink\":\"/pages/0e6ca2\",\"categories\":[\"web开发\",\"运维\",\"Nginx\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:22:47\",\"excerpt\":\"\",\"capture\":\"前置条件\\r\\n\\r\\n 配置静态 IP\\r\\n\\r\\n```bash\\r\\n 一键配置 静态IP地址 并 启用\\r\\nnmcli c add type ethernet con-name \\\"static_conn\\\" ifname ens160 ipv4.addresses 192.168.232.20/24 gw4 192.168.232.2 ipv4.dns \\\"8.8.8.8 114.114.114.114\\\" ipv4.method manual autoconnect yes && nmcli c up static_conn\\r\\n```\\r\\n\\r\\n 关闭防火墙\\r\\n\\r\\n```bash\\r\\n$ systemctl stop firewalld       本次开机关闭防火墙（重新开机防火墙又会启动）\\r\\n$ systemctl disable firewalld    永久禁用防火墙（以后不会再自动启动了）\\r\\n\\r\\n$ \"},{\"url\":\"/web开发/运维/Linux/Linux环境安装\",\"frontmatter\":{\"date\":\"2025-04-20 23:18:51\",\"title\":\"Linux环境安装\",\"permalink\":\"/pages/21e258\",\"categories\":[\"web开发\",\"运维\",\"Linux\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Linux环境安装\",\"date\":\"2025-04-20 23:18:51\",\"excerpt\":\"\",\"capture\":\"Linux安装运行环境\\r\\n\\r\\n 安装基础工具\\r\\n\\r\\n```bash\\r\\n$ yum install -y make gcc patch libffi-devel python3-devel zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel xz-devel lrzsz tree zip unzip\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n 1、安装 nginx\\r\\n\\r\\n\\r\\n\\r\\n (1)安装 nginx\\r\\n\\r\\n```bash\\r\\n$ yum install -y nginx\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n (2)配置 `/etc/nginx/nginx.conf`\\r\\n\\r\\n- 开放静态资源\\r\\n- 配置反向代理\\r\\n- ...\\r\\n\\r\\n\\r\\n\\r\\n (3)验证配置有效性\\r\\n\\r\\n```b\"},{\"url\":\"/web开发/运维/服务器/\",\"frontmatter\":{\"date\":\"2025-04-20 23:12:29\",\"title\":\"index\",\"permalink\":\"/pages/fec2e6\",\"categories\":[\"web开发\",\"运维\",\"服务器\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:12:29\",\"excerpt\":\"\",\"capture\":\"云计算\\r\\n\\r\\n 一、Linux 下载与安装\\r\\n\\r\\n::: tip 推荐：\\r\\n\\r\\n`RHEL 下载`：登陆红帽官网后, 访问该网址跳转到下载镜像界面\\r\\n\\r\\n`RHEL8 安装` 参考博客：教程\\r\\n\\r\\n:::\\r\\n\\r\\n 二、包管理器配置\\r\\n\\r\\n RHEL 注册\\r\\n\\r\\n::: info\\r\\n\\r\\n-   去官网注册\\r\\n\\r\\n:::\\r\\n\\r\\n 配置 `yum 官方仓库源`\\r\\n\\r\\n```bash\\r\\n 终端登录红帽子账号\\r\\n$ subscription-manager register --username=账户名称 --password='账户对应的密码' --auto-attach\\r\\n 查看仓库名称\\r\\n$ yum repolist\\r\\n 配置好仓库后，下载安装这个软件，便于后面Linux服务器和本地window电脑进行上传和下载\\r\\n$ yum install -y lrzsz\\r\\n```\\r\\n\\r\\n 三、远程登录工\"},{\"url\":\"/web开发/运维/服务器/搭建服务器\",\"frontmatter\":{\"date\":\"2025-04-20 23:12:24\",\"title\":\"搭建服务器\",\"permalink\":\"/pages/bcf0fc\",\"categories\":[\"web开发\",\"运维\",\"服务器\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"搭建服务器\",\"date\":\"2025-04-20 23:12:24\",\"excerpt\":\"\",\"capture\":\"搭建自己的服务器\\r\\n\\r\\n\\r\\n\\r\\n 1. 购买服务器\\r\\n\\r\\n\\r\\n\\r\\n::: tip 提示\\r\\n\\r\\n- 自己选择一个喜欢的或者合适的服务器运营商，购买他们的`Linux`服务器，像阿里云提供了以学生身份可以免费申请`3个月`的服务器试用，跟正常购买的服务器差不多，但是性能肯定不是特别好咯，毕竟是免费的嘛，但是个人的使用一般没问题，比如托管静态资源、云服务器学习使用等，这些都能够满足了。等学会了，再根据以后自己的项目性能要求，购买性能更加优质的服务器就行了。遇到一些促销日也可以看看官方是否有便宜点的服务器促销，低价促销的时候，也可以便宜的购买一个几年的来使用。哈哈 :smile:\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n::: warning 注意\\r\\n\\r\\n- 服务器购买了之后，会分配给你公网访问服务器的IP，此时你只需要在服务器上安装好Nginx、Apache之类的服务器软件，简单的启动、配置一下，那么就可以\"},{\"url\":\"/web开发/后端/MySQL/\",\"frontmatter\":{\"date\":\"2025-04-20 23:07:19\",\"title\":\"index\",\"permalink\":\"/pages/0a9104\",\"categories\":[\"web开发\",\"后端\",\"MySQL\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:07:19\",\"excerpt\":\"\",\"capture\":\"MySQL 数据库\\r\\n\\r\\n 基础篇\\r\\n\\r\\n MySQL 概述\\r\\n\\r\\n-   数据库相关概念：\\r\\n\\r\\n|      名称      |                                 全称                                 |               简称               |\\r\\n| :------------: | :------------------------------------------------------------------: | :------------------------------: |\\r\\n|     数据库     |               `存储数据的仓库`，数据是有组织的进行存储               |           DataBase(DB)           |\\r\\n\"},{\"url\":\"/web开发/后端/Python/QQ微信消息轰炸\",\"frontmatter\":{\"date\":\"2025-04-20 23:04:51\",\"title\":\"QQ微信消息轰炸\",\"permalink\":\"/pages/9abc85\",\"categories\":[\"web开发\",\"后端\",\"Python\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"QQ微信消息轰炸\",\"date\":\"2025-04-20 23:04:51\",\"excerpt\":\"\",\"capture\":\"消息轰炸\\r\\n\\r\\n 安装依赖\\r\\n\\r\\n```bash\\r\\n$ pip install pyautogui\\r\\n```\\r\\n\\r\\n 程序启动\\r\\n\\r\\n```python\\r\\npython message.py\\r\\n```\\r\\n\\r\\n 源代码\\r\\n\\r\\n```python\\r\\nimport time\\r\\n\\r\\nimport pyautogui\\r\\nimport pyperclip\\r\\n\\r\\ndef send_message(message, interval=1):\\r\\n    pyperclip.copy(message)\\r\\n    pyautogui.hotkey('ctrl', 'v')\\r\\n    pyautogui.press('enter')\\r\\n    time.sleep(interval)\\r\\n\\r\\n\\r\\ndef bomber(file_path='./messages.txt'):\\r\\n    \\\"\\\"\\\"\\r\\n    在微信、QQ\"},{\"url\":\"/web开发/开发者工具/Git/\",\"frontmatter\":{\"date\":\"2025-04-20 22:59:44\",\"title\":\"index\",\"permalink\":\"/pages/f4f5d9\",\"categories\":[\"web开发\",\"开发者工具\",\"Git\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 22:59:44\",\"excerpt\":\"\",\"capture\":\"Git 版本控制系统\\r\\n\\r\\n::: tip 概述\\r\\n\\r\\n`Git`是一个免费的、开源的分布式版本控制系统，可以快速高效地处理从小型到大型的各种项目。\\r\\n\\r\\n`Git`易于学习，内存占用小，性能极快。它具有廉价的本地库，方便的暂存区域和多个工作流分支等特性。\\r\\n\\r\\n`Git工具下载`：推荐前往官网\\r\\n\\r\\n:::\\r\\n\\r\\n Git 本地管理\\r\\n\\r\\n 设置签名\\r\\n\\r\\n```bash\\r\\n$ git config --global user.name \\\"用户名\\\"\\t\\t 设置用户签名\\r\\n$ git config --global user.email \\\"邮箱\\\"\\t\\t  设置邮箱签名\\r\\n```\\r\\n\\r\\n 查看特定级别的配置信息\\r\\n\\r\\n 查看全局配置\\r\\n\\r\\n\\r\\n\\r\\n```bash\\r\\n$ git config --global --list\\r\\n```\\r\\n\\r\\n 查看特定配置项的值\\r\\n\\r\\n```bash\\r\\n$ git \"},{\"url\":\"/web开发/开发者工具/VSCode/配置Linux开发环境\",\"frontmatter\":{\"date\":\"2025-04-19 23:19:49\",\"title\":\"从零配置Linux与Windows互通的开发环境\",\"permalink\":\"/pages/e47200\",\"categories\":[\"开发者工具\"],\"tags\":[\"VSCode\"],\"coverImg\":\"/screenshots/VSCode/搭建linux开发环境.png\",\"top\":true,\"sticky\":3,\"description\":\"从零打造 Linux 和 Windows 互通的开发环境\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"从零配置Linux与Windows互通的开发环境\",\"date\":\"2025-04-19 23:19:49\",\"excerpt\":\"\",\"capture\":\"从零配置 Linux 与 Windows 互通的开发环境\\n以下配置基于 `Red Hat 8`（红帽 8）的 Linux 最基础（无界面）系统，不同的 Linux 发行版会有一些区别，请注意自己系统的是否符合该以上条件。\\n 前置条件\\n\\n```bash\\n 关闭防火墙\\n$ systemctl stop firewalld --now     立即生效\\n$ systemctl status firewalld\\n$ systemctl disable firewalld        永久禁用\\n 关闭 selinux 安全策略\\n$ setenforce 0       本次生效\\n$ getenforce         验证\\n$ sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config     改写配置文件，永久关闭\\n``\"},{\"url\":\"/web开发/后端/Python/支付宝沙箱支付教程\",\"frontmatter\":{\"date\":\"2025-04-19 22:58:03\",\"title\":\"支付宝沙箱支付教程\",\"permalink\":\"/pages/4f6a36\",\"categories\":[\"后端\"],\"tags\":[\"Python\",\"Flask\"],\"coverImg\":\"/screenshots/支付宝沙箱支付详细使用教程/支付宝教程封面.png\",\"top\":true,\"sticky\":2,\"description\":\"详细介绍了在Python Web开发中集成支付宝沙箱支付的完整流程\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"支付宝沙箱支付教程\",\"date\":\"2025-04-19 22:58:03\",\"excerpt\":\"\",\"capture\":\"支付宝沙箱支付详细使用教程\\n详细介绍支付宝沙箱支付的全流程配置最新教程，通俗易懂，图文并茂，手把手教你一步步实现完整沙箱支付功能。亲测可用，文章撰写非常用心，包你学会！\\n&lt;!--@include: @/public/snippets/preface.md--\\n 一、前言\\n由于支付宝官方对Java等语言的文档说明支持较好，在Python方面相对较弱，而且依赖包还安装不了等Bug，所以接下来我将分享《在Python Web开发中如何集成支付宝沙箱支付》的详细教程，如果这篇文章有帮助到你，请记得关注我的公众号，我会定期分享实用的技术教程。如果没有帮到你，也可以留个免费的关注，以后或许会有你感兴趣的教程，而且文章质量都超高哦！\\n在个人平常（或准备后续对接支付宝正式支付环境）的项目中，使用沙箱支付来测试支付功能显得很有必要；如果是在校大学生的话，在你的项目中集成支付宝的沙箱支付，也能让你的项目\"},{\"url\":\"/web开发/后端/桌面应用开发/\",\"frontmatter\":{\"date\":\"2025-04-19 22:52:13\",\"title\":\"全网最新最全的 electron 项目环境搭建方式与踩坑经验分享\",\"head\":[[\"meta\",{\"name\":\"description\",\"content\":\"全网最全最新 electron 项目环境搭建方式与踩坑经验分享，帮你避坑，少走弯路，节省时间，还等什么，快来参考一下我的 electron 环境搭建指南！\"},{\"name\":\"keywords\",\"content\":\"electron 项目环境搭建 踩坑经验分享\"}]],\"footer\":false,\"permalink\":\"/pages/75a1df\",\"categories\":[\"后端\"],\"tags\":[\"桌面应用开发\"],\"coverImg\":\"/screenshots/Nodejs/Electron安装踩坑经验总结.png\",\"top\":true,\"sticky\":5,\"description\":\"全网最全最新 electron 项目环境搭建方式与踩坑经验分享\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"全网最新最全的 electron 项目环境搭建方式与踩坑经验分享\",\"date\":\"2025-04-19 22:52:13\",\"excerpt\":\"\",\"capture\":\"&lt;!--@include: @/public/snippets/preface.md--\\r\\n\\r\\n&gt; 本文项目搭建演示的`nodejs`版本如下：\\r\\n\\r\\n```bash\\r\\n$ node -v\\r\\n v22.14.0\\r\\n```\\r\\n\\r\\n 一、官方文档手动搭建\\r\\n\\r\\n文档地址：快速入门 | Electron，按照文档步骤操作即可，项目只包含了`electron`依赖，仅仅只是一个`hello world`展示。\\r\\n\\r\\n&gt; ⚠️ 注意：失败！我设置了代理（网络问题）和切换镜像源（淘宝）等操作都没用。截图如下：\\r\\n\\r\\n\\r\\n\\r\\n 二、官方脚手架方式创建\\r\\n\\r\\n- 创建项目命令如下：\\r\\n\\r\\n```bash\\r\\n$ npm init electron-app@latest my-app -- --template=vite  my-app:项目名(自定义)\\r\\n 或\\r\\n$ npm create \"},{\"url\":\"/web开发/后端/Nodejs/\",\"frontmatter\":{\"date\":\"2025-04-19 22:04:01\",\"layout\":\"doc\",\"title\":\"Nodejs 安装教程\",\"navbar\":true,\"sidebar\":true,\"aside\":true,\"footer\":false,\"pageClass\":null,\"head\":[[\"meta\",{\"name\":\"description\",\"content\":\"Nodejs 详细安装教程附带配置\"}],[\"meta\",{\"name\":\"keywords\",\"content\":\"保姆级Nodejs安装和配置教程\"}]],\"permalink\":\"/pages/b609ed\",\"categories\":[\"后端\"],\"tags\":[\"Nodejs\"],\"coverImg\":\"/screenshots/Nodejs/nodejs官网.png\",\"top\":true,\"sticky\":4,\"description\":\"windows版安装和配置Nodejs保姆级详细教程\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Nodejs 安装教程\",\"date\":\"2025-04-19 22:04:01\",\"excerpt\":\"\",\"capture\":\"Nodejs 安装教程\\r\\n\\r\\n 一、安装 `Nodejs`\\r\\n\\r\\n::: info 访问`Nodejs`官网\\r\\n点击前往：Nodejs 官网\\r\\n\\r\\n一直点击下一步安装完即可（可以选择自行选择安装路径）。\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n- 安装完成后，打开`cmd`，输入`node -v`，如果显示版本号，则安装成功。\\r\\n\\r\\n```bash\\r\\n$ node -v\\r\\n$ npm -v\\r\\n```\\r\\n\\r\\n 二、配置\\r\\n\\r\\n\\r\\n\\r\\n 1. 创建目录\\r\\n\\r\\n创建`node_global`和`node_cache`目录，并且在`node_global`目录下创建`node_modules`目录。\\r\\n\\r\\n```bash\\r\\n 进入 E:/enviroments/nodejs/ 路径下\\r\\nmkdir -p node_global/node_modules node_cache\\r\\n```\\r\\n\\r\\n 2. 设置权限\\r\\n\\r\"},{\"url\":\"/web开发/后端/Nodejs/模块化规范演进\",\"frontmatter\":{\"date\":\"2025-04-19 22:02:31\",\"title\":\"模块化规范演进\",\"permalink\":\"/pages/d20f11\",\"categories\":[\"后端\"],\"tags\":[\"Nodejs\"],\"coverImg\":\"/screenshots/Nodejs/JS模块化规范演进.png\",\"top\":true,\"sticky\":1,\"description\":\"简明扼要的概述了 JS 模块化规范演进的整个历史\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"模块化规范演进\",\"date\":\"2025-04-19 22:02:31\",\"excerpt\":\"\",\"capture\":\"JS 模块化规范演进历史\\r\\n\\r\\n 1. 原始的 JS 模块化\\r\\n\\r\\n每个人编写的`模块`通过 `script`标签引入到`页面`中，然后就可以使用`模块`中的内容了。\\r\\n\\r\\n 2. CommonJS 模块化规范\\r\\n\\r\\n随着 `nodejs` 的诞生，为了解决在 `nodejs` 中的模块化问题，社区自发形成了很多的模块化方案，其中 `CommonJS` 模块化规范得到了时间的检验，并最终确定为主流的模块化规范，这是一套社区的模块化规范，使用 `commonjs` 规范编写的模块并不能直接在浏览器中运行。后来出现了`browserify`，`webpack` 等编译、打包工具，使得 `CommonJS` 模块化规范编写的代码经过编译、打包后也可以用于浏览器中运行。\\r\\n\\r\\n::: code-group\\r\\n\\r\\n```js [utils.js]\\r\\n// 1. 使用 exports 导出模块\\r\\nex\"},{\"url\":\"/web开发/后端/Cpp/\",\"frontmatter\":{\"date\":\"2025-04-19 15:24:14\",\"title\":\"C++语言快速入门\",\"categories\":[\"后端\"],\"tags\":[\"C++\"],\"description\":\"C++是一种静态类型的中级语言，综合了高级语言和低级语言的特点\",\"coverImg\":\"/banner/8.webp\",\"permalink\":\"/pages/2aeaba\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"C++语言快速入门\",\"date\":\"2025-04-19 15:24:14\",\"excerpt\":\"\",\"capture\":\"C++语言快速入门\\n 安装 `C++` 编译环境\\n```bash\\n $ sudo subscription-manager repos --enable codeready-builder-for-rhel-8-x86_64-rpms\\n$ sudo dnf install -y gcc gcc-c++ make\\n 或者安装完整的开发工具组（包含更多工具如gdb、git等）\\n$ sudo dnf groupinstall -y \\\"Development Tools\\\"\\n 检查安装\\n$ gcc --version\\n$ g++ --version\\n$ make --version\\n```\\n 第一个 `C++` 程序\\n```c++\\n// main.cpp\\ninclude &lt;iostream\\nusing namespace std;\\nint main()\\n{\\n    cout &lt;&lt; \"},{\"url\":\"/web开发/后端/Lua/\",\"frontmatter\":{\"date\":\"2025-04-19 07:24:14\",\"title\":\"Lua语言快速入门\",\"categories\":[\"后端\"],\"tags\":[\"Lua\"],\"description\":\"Lua 是一款轻量级、高效灵活、跨平台的多范式编程语言\",\"coverImg\":\"/banner/1.webp\",\"permalink\":\"/pages/e7b99e\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Lua语言快速入门\",\"date\":\"2025-04-19 07:24:14\",\"excerpt\":\"\",\"capture\":\"Lua语言快速入门\\n 环境安装\\n- 了解更多，请参考：菜鸟教程-Lua 环境安装\\n- Linux 系统(CentOS)\\n```bash\\n$ sudo yum install -y epel-release\\n$ sudo yum install -y lua\\n```\\n 快速体验\\n 交互式\\n```bash\\n$ man lua                  查看 lua 命令行帮助说明\\n$ lua -v                   查看版本信息\\n$ lua -i                   进入交互模式\\n\\n```\\n 脚本式编程\\n- 创建 `*.lua` 文件\\n```lua\\n!/usr/local/bin/lua\\nprint(\\\"Hello world!\\\")\\n```\\n- 赋予可执行权限\\n```bash\\n$ chmod 700 hello.lua\\n```\\n- 执行脚本\\n```bas\"}],\"groupPostsByYear\":{\"2025 \":[{\"url\":\"/web开发/后端/MongoDB/\",\"frontmatter\":{\"date\":\"2025-04-22 18:33:06\",\"title\":\"index\",\"permalink\":\"/pages/634615\",\"categories\":[\"web开发\",\"后端\",\"MongoDB\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-22 18:33:06\",\"excerpt\":\"\",\"capture\":\"MongoDB 快速入门\\n 安装\\n\\n```bash\\n 安装 mongodb server\\n$ wget https://repo.mongodb.org/yum/redhat/8/mongodb-org/8.0/x86_64/RPMS/mongodb-org-server-8.0.8-1.el8.x86_64.rpm\\n$ du -sh ./*                       可以查看一下文件大小\\n$ rpm -ivh ./mongodb-org-server-8.0.8-1.el8.x86_64.rpm\\n$ systemctl status mongod          查看服务状态\\n$ systemctl enable mongod --now    设置开机自启\\n 安装命令行工具 cli：https://www.mongodb.com/try/download/shell\"},{\"url\":\"/web开发/后端/Python/Django快速入门教程\",\"frontmatter\":{\"date\":\"2025-04-21 18:17:55\",\"title\":\"Django快速入门教程\",\"permalink\":\"/pages/5e2304\",\"categories\":[\"后端\",\"Python\"],\"tags\":[\"Django\"],\"description\":\"Django 哲学宗旨：懂得越多，写得越少\",\"coverImg\":\"/screenshots/Python/Django快速入门教程.png\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Django快速入门教程\",\"date\":\"2025-04-21 18:17:55\",\"excerpt\":\"\",\"capture\":\"Django 快速入门\\n 安装 Django\\n```bash\\n$ pip install django\\n```\\n 创建项目\\n```bash\\n$ mkdir &lt;项目名称\\n$ django-admin startproject [&lt;settings&gt;] &lt;项目名称&gt;    settings 是配置目录名称。如果不指定，配置目录的名称与项目名称一致\\n$ cd &lt;项目名称&gt;\\n```\\n- `manage.py`：管理 `Django` 项目的命令行工具。\\n- `settings/`：项目系统配置目录。\\n- `settings/settings.py`：`Django` 项目的配置文件。\\n- `settings/urls.py`：Django 项目的 URL 声明，就像你网站的 `路由` 。\\n- `settings/asgi.py`：项目运行在 `ASGI` \"},{\"url\":\"/web开发/后端/Python/\",\"frontmatter\":{\"date\":\"2025-04-21 00:51:35\",\"title\":\"index\",\"permalink\":\"/pages/de8c40\",\"categories\":[\"web开发\",\"后端\",\"Python\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-21 00:51:35\",\"excerpt\":\"\",\"capture\":\"Python 基础到高级\\r\\n\\r\\n::: tip 基础教程\\r\\n\\r\\n-   推荐 1：Python 官网\\r\\n\\r\\n-   推荐 2：极客教程\\r\\n\\r\\n-   推荐 3：清华源镜像站\\r\\n\\r\\n国内下载镜像：\\r\\n\\r\\n-   清华：https://pypi.tuna.tsinghua.edu.cn/simple\\r\\n-   阿里云：http://mirrors.aliyun.com/pypi/simple/\\r\\n-   豆瓣：https://pypi.douban.com/simple/\\r\\n-   中国科技大学：https://pypi.mirrors.ustc.edu.cn/simple/\\r\\n-   华中理工大学：http://pypi.hustunique.com/\\r\\n-   山东理工大学：http://pypi.sdutLinux.org/\\r\\n\\r\\n设置镜像源的命令：\\r\\n\\r\\n::: code-group\\r\"},{\"url\":\"/web开发/后端/Python/RestFramework\",\"frontmatter\":{\"date\":\"2025-04-21 00:50:31\",\"title\":\"RestFramework\",\"permalink\":\"/pages/baaa17\",\"categories\":[\"web开发\",\"后端\",\"Python\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"RestFramework\",\"date\":\"2025-04-21 00:50:31\",\"excerpt\":\"\",\"capture\":\"DRF 框架\\r\\n\\r\\n::: tip 介绍\\r\\n\\r\\n-   推荐 1：前往官方文档\\r\\n\\r\\n-   推荐 2: bilibili 教程\\r\\n\\r\\n-   推荐 3：深入理解什么是 Restful 规范\\r\\n    :::\\r\\n\\r\\n\\r\\n\\r\\n Restful API 最佳实践\\r\\n\\r\\n-   协议\\r\\n-   域名\\r\\n-   版本\\r\\n-   路径\\r\\n-   HTTP 动词\\r\\n-   过滤信息(Filtering)\\r\\n-   状态码(Status Codes)\\r\\n-   错误处理(Error handling)\\r\\n-   返回结果\\r\\n-   Hypermedia API\\r\\n\\r\\n HTTP 请求方法详解\\r\\n\\r\\n-   `GET (SELECT)`: 从服务器取出资源(一项或多项)\\r\\n-   `POST (CREATE)`: 在服务器新建一个资源\\r\\n-   `PUT (UPDATE)`: 在服务器更新资源(客户端提供\"},{\"url\":\"/web开发/前端/JavaScript/Canvas\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:32\",\"title\":\"Canvas\",\"permalink\":\"/pages/60efec\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Canvas\",\"date\":\"2025-04-20 23:56:32\",\"excerpt\":\"\",\"capture\":\"Canvas 绘图\\r\\n\\r\\n::: tip\\r\\n\\r\\n-   推荐：前往优秀文档\\r\\n-   参考博客：菜鸟教程\\r\\n-   核心思想：`canvas`是基于状态的方式进行绘图的\\r\\n-   `canvas`坐标空间：以画布左上角为原点，向右为`x正半轴`，向下为`y正半轴`，以`1px`为单位距离\\r\\n\\r\\n:::\\r\\n\\r\\n 基础\\r\\n\\r\\n 画布默认大小\\r\\n\\r\\n-   `canvas`画布的默认大小是 `宽 x 高 = 300 x 150`\\r\\n\\r\\n 获取画布\\r\\n\\r\\n```ts\\r\\n// 获取画布元素\\r\\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\\r\\n// 获取上下文对象: context\\r\\nconst ctx = canvas.getContext('2d') as CanvasRenderingContext2D\\r\"},{\"url\":\"/web开发/前端/JavaScript/事件循环\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:32\",\"title\":\"事件循环\",\"permalink\":\"/pages/4c45cd\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"事件循环\",\"date\":\"2025-04-20 23:56:32\",\"excerpt\":\"\",\"capture\":\"事件循环原理\\r\\n\\r\\n::: tip\\r\\n\\r\\n\\r\\n\\r\\n:::\\r\\n\\r\\n 事件循环概述\\r\\n\\r\\n::: info\\r\\n\\r\\n&gt; 在事件循环中，当主线程执行完当前的同步任务后，会检查事件队列中是否有待处理的事件。如果有，主线程会取出事件并执行对应的回调函数。这个循环的过程被称为事件循环（Event Loop），它由主线程和任务队列两部分组成。主线程负责执行同步任务，而异步任务则通过任务队列进行处理。这种机制保证了异步任务在适当的时机能够插入执行，从而实现了 JavaScript 的`非阻塞异步执行`。\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n事件循环流程如下：\\r\\n\\r\\n&gt; 1. 主线程读取 JavaScript 代码，形成相应的堆和执行栈。\\r\\n&gt; 2. 当主线程遇到异步任务时，将其委托给对应的异步进程（如 Web API）处理。\\r\\n&gt; 3. 异步任务完成后，将相应的回调函数推入任务队列。\\r\\n&g\"},{\"url\":\"/web开发/前端/JavaScript/原型链\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:32\",\"title\":\"原型链\",\"permalink\":\"/pages/17549b\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"原型链\",\"date\":\"2025-04-20 23:56:32\",\"excerpt\":\"\",\"capture\":\"原型链\\r\\n\\r\\n::: info 说明\\r\\n\\r\\n1. 原型：函数都有prototype属性，称之为原型，也称为原型对象\\r\\n\\r\\n    - 原型可以放一些属性和方法，共享给实例对象使用\\r\\n    - 原型可以做继承\\r\\n\\r\\n2. 原型链：对象都有 \\\\_\\\\_proto\\\\_\\\\_ 属性，这个属性指向它的原型对象，原型对象也是对象，也有自己的 \\\\_\\\\_proto\\\\_\\\\_ 属性，指向原型对象的原型对象，这样一层一层形成的链式结构称为原型链，最顶层找不到则返回 _null_。\\r\\n   :::\\r\\n\\r\\n 类\\r\\n\\r\\n::: info 概念\\r\\n类: 类是一种创建对象的蓝图或模板, 在 js 中, 类本质还是一个构造函数。\\r\\n:::\\r\\n\\r\\n 构造器(也称 `constructor` 或 `构造函数`)\\r\\n\\r\\n::: info 概念\\r\\n构造函数: 用 new 来执行的函数。\\r\\n:::\\r\\n::: tip 介绍\\r\\n原本以前是\"},{\"url\":\"/web开发/前端/JavaScript/JavaScript常识\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"JavaScript常识\",\"permalink\":\"/pages/f7e507\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"JavaScript常识\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"JavaScript常识整理\\r\\n\\r\\n nodejs 默认采用 commonjs 模块化规范\\r\\n\\r\\n::: tip 科普\\r\\n- (1)每个模块都Node.js 应用由模块组成，每个文件就是一个模块，有自己的作用域。\\r\\n- (2)在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。\\r\\n- (3)每个模块内部有两个变量可以使用，`require` 和 `module`。`require` 用来加载某个模块，`module` 代表当前模块，是一个对象，保存了当前模块需要导出的信息。\\r\\n- (4)`exports` 是 `module` 上的一个属性，保存了当前模块要导出的接口或者变量，使用 require 加载的某个模块获取到的值就是那个模块使用 `exports` 导出的值。\\r\\n- (5)注意: exports 和 module.exports 是指向同一个对象。最终`requir\"},{\"url\":\"/web开发/前端/JavaScript/Promise\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"Promise\",\"permalink\":\"/pages/233f86\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Promise\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"深入学习 Promise\\r\\n\\r\\n Promise 是什么？\\r\\n\\r\\n1. 抽象表达\\r\\n  - ES6 规范\\r\\n  - JS进行异步变成的新解决方案（旧方案是回调函数）\\r\\n2. 具体表达\\r\\n   - 从语法上来说：Promise是一个构造函数\\r\\n   - 从功能上来说：Promise对象用来封装一个一步操作并可以获取其成功或失败的结果值\\r\\n\\r\\n\\r\\n&gt; * fs文件操作\\r\\n&gt; * 数据库操作\\r\\n&gt; * ajax\\r\\n&gt; * 定时器\\r\\n&gt; * ...\\r\\n\\r\\n\\r\\n 为什么要用Promise？\\r\\n- 指定回调函数的方式更加灵活\\r\\n- 支持链式调用，可以解决回调地域问题\\r\\n\\r\\n Promise的状态\\r\\n1. pending （待定状态）\\r\\n2. pending 变为 `fulfilled`\\r\\n3. pending 变为 `rejected`\\r\\n\\r\\n&gt; 说明：只有这三种，\"},{\"url\":\"/web开发/前端/JavaScript/TypeScript\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"TypeScript\",\"permalink\":\"/pages/3b643f\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"TypeScript\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"TypeScript 学习笔记\\r\\n\\r\\n\\r\\n&gt;\\r\\n&gt; - 中文学习网: TypeScript\\r\\n&gt; \\r\\n&gt; - 推荐阅读：jsdocs文档\\r\\n&gt; \\r\\n&gt; - 推荐阅读：npm包管理器\\r\\n\\r\\n::: warning 注意\\r\\n- 记住：类型注释永远不会改变程序的运行时行为。\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n- `tsc`命令行编译选项\\r\\n\\r\\n| 参数              |                               功能 |\\r\\n| :---------------- | ---------------------------------: |\\r\\n| `--noEmitOnError` | TS代码有错误时，不要编译生成JS文件 |\\r\\n| `--target`        |    编译生成JS的目标版本，默认`ES5` |\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"},{\"url\":\"/web开发/前端/JavaScript/WebAPI\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"WebAPI\",\"permalink\":\"/pages/3faec5\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"WebAPI\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"常用 Web API\\r\\n\\r\\n 电池\\r\\n\\r\\n\\r\\n&gt;\\r\\n&gt; `navigator.getBattery()` 提供有关系统电池电量的信息。\\r\\n&gt;\\r\\n&gt; 事件\\r\\n&gt;\\r\\n&gt; -   `chargingchange`：当电池充电状态（charging 属性）更新时触发。\\r\\n&gt; -   `chargingtimechange`：当电池充电时间（chargingTime 属性）更新时触发。\\r\\n&gt; -   `dischargingtimechange`：当电池续航时间（dischargingTime 属性）更新时触发。\\r\\n&gt; -   `levelchange`：当电池电量（level 属性）更新时触发。\\r\\n\\r\\n::: code-group\\r\\n\\r\\n```ts [电池信息]\\r\\nnavigator.getBattery().then((battery) =&\"},{\"url\":\"/web开发/前端/JavaScript/\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"index\",\"permalink\":\"/pages/81bda3\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"JS 的使用技巧\\r\\n\\r\\n `var`、`let`、`const`区别\\r\\n\\r\\n::: tip 详解\\r\\n\\r\\n| 关键字  | 作用及注意事项                                                                                                                         |\\r\\n| ------- | -------------------------------------------------------------------------------------------------------------------------------------- |\\r\\n| `var`   | 定义`具有穿透作用域的`（全局）变量，不管在哪里定义，都会变成全局作用域的变量，定义后可以修\"},{\"url\":\"/web开发/前端/JavaScript/高级核心概念\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"高级核心概念\",\"permalink\":\"/pages/09b3f6\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"高级核心概念\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"JS 高级核心概念\\r\\n\\r\\n 事件循环原理\\r\\n\\r\\n::: tip\\r\\n\\r\\n\\r\\n\\r\\n:::\\r\\n\\r\\n 事件循环概述\\r\\n\\r\\n::: info\\r\\n\\r\\n&gt; 在事件循环中，当主线程执行完当前的同步任务后，会检查事件队列中是否有待处理的事件。如果有，主线程会取出事件并执行对应的回调函数。这个循环的过程被称为事件循环（Event Loop），它由主线程和任务队列两部分组成。主线程负责执行同步任务，而异步任务则通过任务队列进行处理。这种机制保证了异步任务在适当的时机能够插入执行，从而实现了 JavaScript 的`非阻塞异步执行`。\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n事件循环流程如下：\\r\\n\\r\\n&gt; 1. 主线程读取 JavaScript 代码，形成相应的堆和执行栈。\\r\\n&gt; 2. 当主线程遇到异步任务时，将其委托给对应的异步进程（如 Web API）处理。\\r\\n&gt; 3. 异步任务完成后，将相应的回\"},{\"url\":\"/视觉与设计/Adoube/PhotoShop/\",\"frontmatter\":{\"date\":\"2025-04-20 23:46:06\",\"title\":\"index\",\"permalink\":\"/pages/629cfa\",\"categories\":[\"视觉与设计\",\"Adoube\",\"PhotoShop\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:46:06\",\"excerpt\":\"\",\"capture\":\"PhotoShop\\r\\n\\r\\n 界面了解\\r\\n\\r\\n-   菜单栏\\r\\n-   工具栏\\r\\n-   属性栏\\r\\n-   状态栏\\r\\n-   工作区\\r\\n-   图层面板\\r\\n\\r\\n 常用快捷键\\r\\n\\r\\n| 快捷键                | 功能             | 转换功能 |\\r\\n| :-------------------- | ---------------- | -------- |\\r\\n| Ctrl + S              | 保存             |          |\\r\\n| Ctrl + Z              | 撤销             |          |\\r\\n| Ctrl + N              | 新建             |          |\\r\\n| ESC                   | 取消             \"},{\"url\":\"/前沿领域/人工智能/Ollama/\",\"frontmatter\":{\"date\":\"2025-04-20 23:43:03\",\"title\":\"index\",\"permalink\":\"/pages/066462\",\"categories\":[\"人工智能\"],\"tags\":[\"Ollama\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:43:03\",\"excerpt\":\"\",\"capture\":\"Ollama 开源大模型\\r\\n\\r\\n::: info 文档\\r\\n\\r\\nOllama 是一个开源的大型语言模型（LLM）服务工具，它允许用户在本地机器上运行和部署大型语言模型。\\r\\n\\r\\n-   推荐 1：Ollama 官网\\r\\n-   推荐 2：Ollama Github 仓库\\r\\n\\r\\n:::\\r\\n\\r\\n::: tip 提示\\r\\n\\r\\n-   `ollama`命令行工具的使用很类似`docker`命令，通过 `olloma -h` 可查看帮助\\r\\n-   推荐阅读：博客文章\\r\\n\\r\\n:::\\r\\n\\r\\n 列出已有模型\\r\\n\\r\\n```bash\\r\\n$ ollama list\\r\\n```\\r\\n\\r\\n 创建模型\\r\\n\\r\\n\\r\\n\\r\\n```bash\\r\\n$ ollama create mymodel -f ./Modelfile\\r\\n```\\r\\n\\r\\n 拉取模型\\r\\n\\r\\n&gt; 拉取本地已经存在的模型会自动比较两者差异进行更新\\r\\n\\r\\n```bash\\r\\n$\"},{\"url\":\"/web开发/开发者工具/VSCode/\",\"frontmatter\":{\"date\":\"2025-04-20 23:34:24\",\"title\":\"index\",\"permalink\":\"/pages/277ec2\",\"categories\":[\"web开发\",\"开发者工具\",\"VSCode\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:34:24\",\"excerpt\":\"\",\"capture\":\"VSCode 开发工具\\r\\n\\r\\n 一、常用插件\\r\\n\\r\\n|               插件名称               |                             功能                             |\\r\\n| :----------------------------------: | :----------------------------------------------------------: |\\r\\n|   Chinese (Simplified) (简体中文)    |              VSCode 界面简体中文插件(⭐⭐⭐⭐)               |\\r\\n|             Monokai Pro              |                  舒适美观的主题(⭐⭐⭐⭐⭐)         \"},{\"url\":\"/web开发/开发者工具/VSCode/我的配置\",\"frontmatter\":{\"date\":\"2025-04-20 23:33:51\",\"title\":\"我的配置\",\"permalink\":\"/pages/991531\",\"categories\":[\"web开发\",\"开发者工具\",\"VSCode\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"我的配置\",\"date\":\"2025-04-20 23:33:51\",\"excerpt\":\"\",\"capture\":\"一、VSCode 个性化配置\\r\\n\\r\\n 主题\\r\\n\\r\\n-   插件依赖：\\r\\n\\r\\n| 插件名称              | 插件描述           |\\r\\n| :-------------------- | ------------------ |\\r\\n| 🎨Monokai Pro         | 编辑器颜色主题     |\\r\\n| 📁Material Icon Theme | 文件、目录图标主题 |\\r\\n\\r\\n-   配置内容：\\r\\n\\r\\n```json\\r\\n/** settings.json */\\r\\n{\\r\\n    \\\"workbench.tree.indent\\\": 16, // 目录树视图缩进宽度\\r\\n    \\\"workbench.colorTheme\\\": \\\"Monokai Pro (Filter Spectrum)\\\", // 主题颜色\\r\\n    \\\"workbench.iconTheme\\\": \\\"\"},{\"url\":\"/web开发/运维/Linux/\",\"frontmatter\":{\"date\":\"2025-04-20 23:23:56\",\"title\":\"index\",\"permalink\":\"/pages/49880a\",\"categories\":[\"web开发\",\"运维\",\"Linux\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:23:56\",\"excerpt\":\"\",\"capture\":\"Linux 笔记\\r\\n\\r\\n\\r\\n\\r\\n 命令查询网站\\r\\n\\r\\n\\r\\n\\r\\n 单元五、磁盘管理\\r\\n\\r\\n&gt; 一定要注意关联上下文信息进行阅读、操作\\r\\n\\r\\n&gt; 推荐几个在主机上方便操作 Linux 服务器的软件：`XShell` 、 `WindTerm` 、 `FinalShell`\\r\\n\\r\\n 一、磁盘分区\\r\\n\\r\\n&gt; fdisk 命令中的参数及其作用\\r\\n\\r\\n| 参数 | 作用                           |\\r\\n| ---- | ------------------------------ |\\r\\n| m    | 查看全部可用的参数（帮忙信息） |\\r\\n| n    | 添加新的分区                   |\\r\\n| d    | 删除某个分区信息               |\\r\\n| l    | 列出所有可用的分区类型         |\\r\\n| t    \"},{\"url\":\"/web开发/运维/Nginx/\",\"frontmatter\":{\"date\":\"2025-04-20 23:22:47\",\"title\":\"index\",\"permalink\":\"/pages/0e6ca2\",\"categories\":[\"web开发\",\"运维\",\"Nginx\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:22:47\",\"excerpt\":\"\",\"capture\":\"前置条件\\r\\n\\r\\n 配置静态 IP\\r\\n\\r\\n```bash\\r\\n 一键配置 静态IP地址 并 启用\\r\\nnmcli c add type ethernet con-name \\\"static_conn\\\" ifname ens160 ipv4.addresses 192.168.232.20/24 gw4 192.168.232.2 ipv4.dns \\\"8.8.8.8 114.114.114.114\\\" ipv4.method manual autoconnect yes && nmcli c up static_conn\\r\\n```\\r\\n\\r\\n 关闭防火墙\\r\\n\\r\\n```bash\\r\\n$ systemctl stop firewalld       本次开机关闭防火墙（重新开机防火墙又会启动）\\r\\n$ systemctl disable firewalld    永久禁用防火墙（以后不会再自动启动了）\\r\\n\\r\\n$ \"},{\"url\":\"/web开发/运维/Linux/Linux环境安装\",\"frontmatter\":{\"date\":\"2025-04-20 23:18:51\",\"title\":\"Linux环境安装\",\"permalink\":\"/pages/21e258\",\"categories\":[\"web开发\",\"运维\",\"Linux\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Linux环境安装\",\"date\":\"2025-04-20 23:18:51\",\"excerpt\":\"\",\"capture\":\"Linux安装运行环境\\r\\n\\r\\n 安装基础工具\\r\\n\\r\\n```bash\\r\\n$ yum install -y make gcc patch libffi-devel python3-devel zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel xz-devel lrzsz tree zip unzip\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n 1、安装 nginx\\r\\n\\r\\n\\r\\n\\r\\n (1)安装 nginx\\r\\n\\r\\n```bash\\r\\n$ yum install -y nginx\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n (2)配置 `/etc/nginx/nginx.conf`\\r\\n\\r\\n- 开放静态资源\\r\\n- 配置反向代理\\r\\n- ...\\r\\n\\r\\n\\r\\n\\r\\n (3)验证配置有效性\\r\\n\\r\\n```b\"},{\"url\":\"/web开发/运维/服务器/\",\"frontmatter\":{\"date\":\"2025-04-20 23:12:29\",\"title\":\"index\",\"permalink\":\"/pages/fec2e6\",\"categories\":[\"web开发\",\"运维\",\"服务器\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:12:29\",\"excerpt\":\"\",\"capture\":\"云计算\\r\\n\\r\\n 一、Linux 下载与安装\\r\\n\\r\\n::: tip 推荐：\\r\\n\\r\\n`RHEL 下载`：登陆红帽官网后, 访问该网址跳转到下载镜像界面\\r\\n\\r\\n`RHEL8 安装` 参考博客：教程\\r\\n\\r\\n:::\\r\\n\\r\\n 二、包管理器配置\\r\\n\\r\\n RHEL 注册\\r\\n\\r\\n::: info\\r\\n\\r\\n-   去官网注册\\r\\n\\r\\n:::\\r\\n\\r\\n 配置 `yum 官方仓库源`\\r\\n\\r\\n```bash\\r\\n 终端登录红帽子账号\\r\\n$ subscription-manager register --username=账户名称 --password='账户对应的密码' --auto-attach\\r\\n 查看仓库名称\\r\\n$ yum repolist\\r\\n 配置好仓库后，下载安装这个软件，便于后面Linux服务器和本地window电脑进行上传和下载\\r\\n$ yum install -y lrzsz\\r\\n```\\r\\n\\r\\n 三、远程登录工\"},{\"url\":\"/web开发/运维/服务器/搭建服务器\",\"frontmatter\":{\"date\":\"2025-04-20 23:12:24\",\"title\":\"搭建服务器\",\"permalink\":\"/pages/bcf0fc\",\"categories\":[\"web开发\",\"运维\",\"服务器\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"搭建服务器\",\"date\":\"2025-04-20 23:12:24\",\"excerpt\":\"\",\"capture\":\"搭建自己的服务器\\r\\n\\r\\n\\r\\n\\r\\n 1. 购买服务器\\r\\n\\r\\n\\r\\n\\r\\n::: tip 提示\\r\\n\\r\\n- 自己选择一个喜欢的或者合适的服务器运营商，购买他们的`Linux`服务器，像阿里云提供了以学生身份可以免费申请`3个月`的服务器试用，跟正常购买的服务器差不多，但是性能肯定不是特别好咯，毕竟是免费的嘛，但是个人的使用一般没问题，比如托管静态资源、云服务器学习使用等，这些都能够满足了。等学会了，再根据以后自己的项目性能要求，购买性能更加优质的服务器就行了。遇到一些促销日也可以看看官方是否有便宜点的服务器促销，低价促销的时候，也可以便宜的购买一个几年的来使用。哈哈 :smile:\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n::: warning 注意\\r\\n\\r\\n- 服务器购买了之后，会分配给你公网访问服务器的IP，此时你只需要在服务器上安装好Nginx、Apache之类的服务器软件，简单的启动、配置一下，那么就可以\"},{\"url\":\"/web开发/后端/MySQL/\",\"frontmatter\":{\"date\":\"2025-04-20 23:07:19\",\"title\":\"index\",\"permalink\":\"/pages/0a9104\",\"categories\":[\"web开发\",\"后端\",\"MySQL\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:07:19\",\"excerpt\":\"\",\"capture\":\"MySQL 数据库\\r\\n\\r\\n 基础篇\\r\\n\\r\\n MySQL 概述\\r\\n\\r\\n-   数据库相关概念：\\r\\n\\r\\n|      名称      |                                 全称                                 |               简称               |\\r\\n| :------------: | :------------------------------------------------------------------: | :------------------------------: |\\r\\n|     数据库     |               `存储数据的仓库`，数据是有组织的进行存储               |           DataBase(DB)           |\\r\\n\"},{\"url\":\"/web开发/后端/Python/QQ微信消息轰炸\",\"frontmatter\":{\"date\":\"2025-04-20 23:04:51\",\"title\":\"QQ微信消息轰炸\",\"permalink\":\"/pages/9abc85\",\"categories\":[\"web开发\",\"后端\",\"Python\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"QQ微信消息轰炸\",\"date\":\"2025-04-20 23:04:51\",\"excerpt\":\"\",\"capture\":\"消息轰炸\\r\\n\\r\\n 安装依赖\\r\\n\\r\\n```bash\\r\\n$ pip install pyautogui\\r\\n```\\r\\n\\r\\n 程序启动\\r\\n\\r\\n```python\\r\\npython message.py\\r\\n```\\r\\n\\r\\n 源代码\\r\\n\\r\\n```python\\r\\nimport time\\r\\n\\r\\nimport pyautogui\\r\\nimport pyperclip\\r\\n\\r\\ndef send_message(message, interval=1):\\r\\n    pyperclip.copy(message)\\r\\n    pyautogui.hotkey('ctrl', 'v')\\r\\n    pyautogui.press('enter')\\r\\n    time.sleep(interval)\\r\\n\\r\\n\\r\\ndef bomber(file_path='./messages.txt'):\\r\\n    \\\"\\\"\\\"\\r\\n    在微信、QQ\"},{\"url\":\"/web开发/开发者工具/Git/\",\"frontmatter\":{\"date\":\"2025-04-20 22:59:44\",\"title\":\"index\",\"permalink\":\"/pages/f4f5d9\",\"categories\":[\"web开发\",\"开发者工具\",\"Git\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 22:59:44\",\"excerpt\":\"\",\"capture\":\"Git 版本控制系统\\r\\n\\r\\n::: tip 概述\\r\\n\\r\\n`Git`是一个免费的、开源的分布式版本控制系统，可以快速高效地处理从小型到大型的各种项目。\\r\\n\\r\\n`Git`易于学习，内存占用小，性能极快。它具有廉价的本地库，方便的暂存区域和多个工作流分支等特性。\\r\\n\\r\\n`Git工具下载`：推荐前往官网\\r\\n\\r\\n:::\\r\\n\\r\\n Git 本地管理\\r\\n\\r\\n 设置签名\\r\\n\\r\\n```bash\\r\\n$ git config --global user.name \\\"用户名\\\"\\t\\t 设置用户签名\\r\\n$ git config --global user.email \\\"邮箱\\\"\\t\\t  设置邮箱签名\\r\\n```\\r\\n\\r\\n 查看特定级别的配置信息\\r\\n\\r\\n 查看全局配置\\r\\n\\r\\n\\r\\n\\r\\n```bash\\r\\n$ git config --global --list\\r\\n```\\r\\n\\r\\n 查看特定配置项的值\\r\\n\\r\\n```bash\\r\\n$ git \"},{\"url\":\"/web开发/开发者工具/VSCode/配置Linux开发环境\",\"frontmatter\":{\"date\":\"2025-04-19 23:19:49\",\"title\":\"从零配置Linux与Windows互通的开发环境\",\"permalink\":\"/pages/e47200\",\"categories\":[\"开发者工具\"],\"tags\":[\"VSCode\"],\"coverImg\":\"/screenshots/VSCode/搭建linux开发环境.png\",\"top\":true,\"sticky\":3,\"description\":\"从零打造 Linux 和 Windows 互通的开发环境\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"从零配置Linux与Windows互通的开发环境\",\"date\":\"2025-04-19 23:19:49\",\"excerpt\":\"\",\"capture\":\"从零配置 Linux 与 Windows 互通的开发环境\\n以下配置基于 `Red Hat 8`（红帽 8）的 Linux 最基础（无界面）系统，不同的 Linux 发行版会有一些区别，请注意自己系统的是否符合该以上条件。\\n 前置条件\\n\\n```bash\\n 关闭防火墙\\n$ systemctl stop firewalld --now     立即生效\\n$ systemctl status firewalld\\n$ systemctl disable firewalld        永久禁用\\n 关闭 selinux 安全策略\\n$ setenforce 0       本次生效\\n$ getenforce         验证\\n$ sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config     改写配置文件，永久关闭\\n``\"},{\"url\":\"/web开发/后端/Python/支付宝沙箱支付教程\",\"frontmatter\":{\"date\":\"2025-04-19 22:58:03\",\"title\":\"支付宝沙箱支付教程\",\"permalink\":\"/pages/4f6a36\",\"categories\":[\"后端\"],\"tags\":[\"Python\",\"Flask\"],\"coverImg\":\"/screenshots/支付宝沙箱支付详细使用教程/支付宝教程封面.png\",\"top\":true,\"sticky\":2,\"description\":\"详细介绍了在Python Web开发中集成支付宝沙箱支付的完整流程\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"支付宝沙箱支付教程\",\"date\":\"2025-04-19 22:58:03\",\"excerpt\":\"\",\"capture\":\"支付宝沙箱支付详细使用教程\\n详细介绍支付宝沙箱支付的全流程配置最新教程，通俗易懂，图文并茂，手把手教你一步步实现完整沙箱支付功能。亲测可用，文章撰写非常用心，包你学会！\\n&lt;!--@include: @/public/snippets/preface.md--\\n 一、前言\\n由于支付宝官方对Java等语言的文档说明支持较好，在Python方面相对较弱，而且依赖包还安装不了等Bug，所以接下来我将分享《在Python Web开发中如何集成支付宝沙箱支付》的详细教程，如果这篇文章有帮助到你，请记得关注我的公众号，我会定期分享实用的技术教程。如果没有帮到你，也可以留个免费的关注，以后或许会有你感兴趣的教程，而且文章质量都超高哦！\\n在个人平常（或准备后续对接支付宝正式支付环境）的项目中，使用沙箱支付来测试支付功能显得很有必要；如果是在校大学生的话，在你的项目中集成支付宝的沙箱支付，也能让你的项目\"},{\"url\":\"/web开发/后端/桌面应用开发/\",\"frontmatter\":{\"date\":\"2025-04-19 22:52:13\",\"title\":\"全网最新最全的 electron 项目环境搭建方式与踩坑经验分享\",\"head\":[[\"meta\",{\"name\":\"description\",\"content\":\"全网最全最新 electron 项目环境搭建方式与踩坑经验分享，帮你避坑，少走弯路，节省时间，还等什么，快来参考一下我的 electron 环境搭建指南！\"},{\"name\":\"keywords\",\"content\":\"electron 项目环境搭建 踩坑经验分享\"}]],\"footer\":false,\"permalink\":\"/pages/75a1df\",\"categories\":[\"后端\"],\"tags\":[\"桌面应用开发\"],\"coverImg\":\"/screenshots/Nodejs/Electron安装踩坑经验总结.png\",\"top\":true,\"sticky\":5,\"description\":\"全网最全最新 electron 项目环境搭建方式与踩坑经验分享\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"全网最新最全的 electron 项目环境搭建方式与踩坑经验分享\",\"date\":\"2025-04-19 22:52:13\",\"excerpt\":\"\",\"capture\":\"&lt;!--@include: @/public/snippets/preface.md--\\r\\n\\r\\n&gt; 本文项目搭建演示的`nodejs`版本如下：\\r\\n\\r\\n```bash\\r\\n$ node -v\\r\\n v22.14.0\\r\\n```\\r\\n\\r\\n 一、官方文档手动搭建\\r\\n\\r\\n文档地址：快速入门 | Electron，按照文档步骤操作即可，项目只包含了`electron`依赖，仅仅只是一个`hello world`展示。\\r\\n\\r\\n&gt; ⚠️ 注意：失败！我设置了代理（网络问题）和切换镜像源（淘宝）等操作都没用。截图如下：\\r\\n\\r\\n\\r\\n\\r\\n 二、官方脚手架方式创建\\r\\n\\r\\n- 创建项目命令如下：\\r\\n\\r\\n```bash\\r\\n$ npm init electron-app@latest my-app -- --template=vite  my-app:项目名(自定义)\\r\\n 或\\r\\n$ npm create \"},{\"url\":\"/web开发/后端/Nodejs/\",\"frontmatter\":{\"date\":\"2025-04-19 22:04:01\",\"layout\":\"doc\",\"title\":\"Nodejs 安装教程\",\"navbar\":true,\"sidebar\":true,\"aside\":true,\"footer\":false,\"pageClass\":null,\"head\":[[\"meta\",{\"name\":\"description\",\"content\":\"Nodejs 详细安装教程附带配置\"}],[\"meta\",{\"name\":\"keywords\",\"content\":\"保姆级Nodejs安装和配置教程\"}]],\"permalink\":\"/pages/b609ed\",\"categories\":[\"后端\"],\"tags\":[\"Nodejs\"],\"coverImg\":\"/screenshots/Nodejs/nodejs官网.png\",\"top\":true,\"sticky\":4,\"description\":\"windows版安装和配置Nodejs保姆级详细教程\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Nodejs 安装教程\",\"date\":\"2025-04-19 22:04:01\",\"excerpt\":\"\",\"capture\":\"Nodejs 安装教程\\r\\n\\r\\n 一、安装 `Nodejs`\\r\\n\\r\\n::: info 访问`Nodejs`官网\\r\\n点击前往：Nodejs 官网\\r\\n\\r\\n一直点击下一步安装完即可（可以选择自行选择安装路径）。\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n- 安装完成后，打开`cmd`，输入`node -v`，如果显示版本号，则安装成功。\\r\\n\\r\\n```bash\\r\\n$ node -v\\r\\n$ npm -v\\r\\n```\\r\\n\\r\\n 二、配置\\r\\n\\r\\n\\r\\n\\r\\n 1. 创建目录\\r\\n\\r\\n创建`node_global`和`node_cache`目录，并且在`node_global`目录下创建`node_modules`目录。\\r\\n\\r\\n```bash\\r\\n 进入 E:/enviroments/nodejs/ 路径下\\r\\nmkdir -p node_global/node_modules node_cache\\r\\n```\\r\\n\\r\\n 2. 设置权限\\r\\n\\r\"},{\"url\":\"/web开发/后端/Nodejs/模块化规范演进\",\"frontmatter\":{\"date\":\"2025-04-19 22:02:31\",\"title\":\"模块化规范演进\",\"permalink\":\"/pages/d20f11\",\"categories\":[\"后端\"],\"tags\":[\"Nodejs\"],\"coverImg\":\"/screenshots/Nodejs/JS模块化规范演进.png\",\"top\":true,\"sticky\":1,\"description\":\"简明扼要的概述了 JS 模块化规范演进的整个历史\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"模块化规范演进\",\"date\":\"2025-04-19 22:02:31\",\"excerpt\":\"\",\"capture\":\"JS 模块化规范演进历史\\r\\n\\r\\n 1. 原始的 JS 模块化\\r\\n\\r\\n每个人编写的`模块`通过 `script`标签引入到`页面`中，然后就可以使用`模块`中的内容了。\\r\\n\\r\\n 2. CommonJS 模块化规范\\r\\n\\r\\n随着 `nodejs` 的诞生，为了解决在 `nodejs` 中的模块化问题，社区自发形成了很多的模块化方案，其中 `CommonJS` 模块化规范得到了时间的检验，并最终确定为主流的模块化规范，这是一套社区的模块化规范，使用 `commonjs` 规范编写的模块并不能直接在浏览器中运行。后来出现了`browserify`，`webpack` 等编译、打包工具，使得 `CommonJS` 模块化规范编写的代码经过编译、打包后也可以用于浏览器中运行。\\r\\n\\r\\n::: code-group\\r\\n\\r\\n```js [utils.js]\\r\\n// 1. 使用 exports 导出模块\\r\\nex\"},{\"url\":\"/web开发/后端/Cpp/\",\"frontmatter\":{\"date\":\"2025-04-19 15:24:14\",\"title\":\"C++语言快速入门\",\"categories\":[\"后端\"],\"tags\":[\"C++\"],\"description\":\"C++是一种静态类型的中级语言，综合了高级语言和低级语言的特点\",\"coverImg\":\"/banner/8.webp\",\"permalink\":\"/pages/2aeaba\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"C++语言快速入门\",\"date\":\"2025-04-19 15:24:14\",\"excerpt\":\"\",\"capture\":\"C++语言快速入门\\n 安装 `C++` 编译环境\\n```bash\\n $ sudo subscription-manager repos --enable codeready-builder-for-rhel-8-x86_64-rpms\\n$ sudo dnf install -y gcc gcc-c++ make\\n 或者安装完整的开发工具组（包含更多工具如gdb、git等）\\n$ sudo dnf groupinstall -y \\\"Development Tools\\\"\\n 检查安装\\n$ gcc --version\\n$ g++ --version\\n$ make --version\\n```\\n 第一个 `C++` 程序\\n```c++\\n// main.cpp\\ninclude &lt;iostream\\nusing namespace std;\\nint main()\\n{\\n    cout &lt;&lt; \"},{\"url\":\"/web开发/后端/Lua/\",\"frontmatter\":{\"date\":\"2025-04-19 07:24:14\",\"title\":\"Lua语言快速入门\",\"categories\":[\"后端\"],\"tags\":[\"Lua\"],\"description\":\"Lua 是一款轻量级、高效灵活、跨平台的多范式编程语言\",\"coverImg\":\"/banner/1.webp\",\"permalink\":\"/pages/e7b99e\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Lua语言快速入门\",\"date\":\"2025-04-19 07:24:14\",\"excerpt\":\"\",\"capture\":\"Lua语言快速入门\\n 环境安装\\n- 了解更多，请参考：菜鸟教程-Lua 环境安装\\n- Linux 系统(CentOS)\\n```bash\\n$ sudo yum install -y epel-release\\n$ sudo yum install -y lua\\n```\\n 快速体验\\n 交互式\\n```bash\\n$ man lua                  查看 lua 命令行帮助说明\\n$ lua -v                   查看版本信息\\n$ lua -i                   进入交互模式\\n\\n```\\n 脚本式编程\\n- 创建 `*.lua` 文件\\n```lua\\n!/usr/local/bin/lua\\nprint(\\\"Hello world!\\\")\\n```\\n- 赋予可执行权限\\n```bash\\n$ chmod 700 hello.lua\\n```\\n- 执行脚本\\n```bas\"}]},\"groupPostsByYearMonth\":{\"2025 \":{\"04\":[{\"url\":\"/web开发/后端/MongoDB/\",\"frontmatter\":{\"date\":\"2025-04-22 18:33:06\",\"title\":\"index\",\"permalink\":\"/pages/634615\",\"categories\":[\"web开发\",\"后端\",\"MongoDB\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-22 18:33:06\",\"excerpt\":\"\",\"capture\":\"MongoDB 快速入门\\n 安装\\n\\n```bash\\n 安装 mongodb server\\n$ wget https://repo.mongodb.org/yum/redhat/8/mongodb-org/8.0/x86_64/RPMS/mongodb-org-server-8.0.8-1.el8.x86_64.rpm\\n$ du -sh ./*                       可以查看一下文件大小\\n$ rpm -ivh ./mongodb-org-server-8.0.8-1.el8.x86_64.rpm\\n$ systemctl status mongod          查看服务状态\\n$ systemctl enable mongod --now    设置开机自启\\n 安装命令行工具 cli：https://www.mongodb.com/try/download/shell\"},{\"url\":\"/web开发/后端/Python/Django快速入门教程\",\"frontmatter\":{\"date\":\"2025-04-21 18:17:55\",\"title\":\"Django快速入门教程\",\"permalink\":\"/pages/5e2304\",\"categories\":[\"后端\",\"Python\"],\"tags\":[\"Django\"],\"description\":\"Django 哲学宗旨：懂得越多，写得越少\",\"coverImg\":\"/screenshots/Python/Django快速入门教程.png\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Django快速入门教程\",\"date\":\"2025-04-21 18:17:55\",\"excerpt\":\"\",\"capture\":\"Django 快速入门\\n 安装 Django\\n```bash\\n$ pip install django\\n```\\n 创建项目\\n```bash\\n$ mkdir &lt;项目名称\\n$ django-admin startproject [&lt;settings&gt;] &lt;项目名称&gt;    settings 是配置目录名称。如果不指定，配置目录的名称与项目名称一致\\n$ cd &lt;项目名称&gt;\\n```\\n- `manage.py`：管理 `Django` 项目的命令行工具。\\n- `settings/`：项目系统配置目录。\\n- `settings/settings.py`：`Django` 项目的配置文件。\\n- `settings/urls.py`：Django 项目的 URL 声明，就像你网站的 `路由` 。\\n- `settings/asgi.py`：项目运行在 `ASGI` \"},{\"url\":\"/web开发/后端/Python/\",\"frontmatter\":{\"date\":\"2025-04-21 00:51:35\",\"title\":\"index\",\"permalink\":\"/pages/de8c40\",\"categories\":[\"web开发\",\"后端\",\"Python\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-21 00:51:35\",\"excerpt\":\"\",\"capture\":\"Python 基础到高级\\r\\n\\r\\n::: tip 基础教程\\r\\n\\r\\n-   推荐 1：Python 官网\\r\\n\\r\\n-   推荐 2：极客教程\\r\\n\\r\\n-   推荐 3：清华源镜像站\\r\\n\\r\\n国内下载镜像：\\r\\n\\r\\n-   清华：https://pypi.tuna.tsinghua.edu.cn/simple\\r\\n-   阿里云：http://mirrors.aliyun.com/pypi/simple/\\r\\n-   豆瓣：https://pypi.douban.com/simple/\\r\\n-   中国科技大学：https://pypi.mirrors.ustc.edu.cn/simple/\\r\\n-   华中理工大学：http://pypi.hustunique.com/\\r\\n-   山东理工大学：http://pypi.sdutLinux.org/\\r\\n\\r\\n设置镜像源的命令：\\r\\n\\r\\n::: code-group\\r\"},{\"url\":\"/web开发/后端/Python/RestFramework\",\"frontmatter\":{\"date\":\"2025-04-21 00:50:31\",\"title\":\"RestFramework\",\"permalink\":\"/pages/baaa17\",\"categories\":[\"web开发\",\"后端\",\"Python\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"RestFramework\",\"date\":\"2025-04-21 00:50:31\",\"excerpt\":\"\",\"capture\":\"DRF 框架\\r\\n\\r\\n::: tip 介绍\\r\\n\\r\\n-   推荐 1：前往官方文档\\r\\n\\r\\n-   推荐 2: bilibili 教程\\r\\n\\r\\n-   推荐 3：深入理解什么是 Restful 规范\\r\\n    :::\\r\\n\\r\\n\\r\\n\\r\\n Restful API 最佳实践\\r\\n\\r\\n-   协议\\r\\n-   域名\\r\\n-   版本\\r\\n-   路径\\r\\n-   HTTP 动词\\r\\n-   过滤信息(Filtering)\\r\\n-   状态码(Status Codes)\\r\\n-   错误处理(Error handling)\\r\\n-   返回结果\\r\\n-   Hypermedia API\\r\\n\\r\\n HTTP 请求方法详解\\r\\n\\r\\n-   `GET (SELECT)`: 从服务器取出资源(一项或多项)\\r\\n-   `POST (CREATE)`: 在服务器新建一个资源\\r\\n-   `PUT (UPDATE)`: 在服务器更新资源(客户端提供\"},{\"url\":\"/web开发/前端/JavaScript/Canvas\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:32\",\"title\":\"Canvas\",\"permalink\":\"/pages/60efec\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Canvas\",\"date\":\"2025-04-20 23:56:32\",\"excerpt\":\"\",\"capture\":\"Canvas 绘图\\r\\n\\r\\n::: tip\\r\\n\\r\\n-   推荐：前往优秀文档\\r\\n-   参考博客：菜鸟教程\\r\\n-   核心思想：`canvas`是基于状态的方式进行绘图的\\r\\n-   `canvas`坐标空间：以画布左上角为原点，向右为`x正半轴`，向下为`y正半轴`，以`1px`为单位距离\\r\\n\\r\\n:::\\r\\n\\r\\n 基础\\r\\n\\r\\n 画布默认大小\\r\\n\\r\\n-   `canvas`画布的默认大小是 `宽 x 高 = 300 x 150`\\r\\n\\r\\n 获取画布\\r\\n\\r\\n```ts\\r\\n// 获取画布元素\\r\\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\\r\\n// 获取上下文对象: context\\r\\nconst ctx = canvas.getContext('2d') as CanvasRenderingContext2D\\r\"},{\"url\":\"/web开发/前端/JavaScript/事件循环\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:32\",\"title\":\"事件循环\",\"permalink\":\"/pages/4c45cd\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"事件循环\",\"date\":\"2025-04-20 23:56:32\",\"excerpt\":\"\",\"capture\":\"事件循环原理\\r\\n\\r\\n::: tip\\r\\n\\r\\n\\r\\n\\r\\n:::\\r\\n\\r\\n 事件循环概述\\r\\n\\r\\n::: info\\r\\n\\r\\n&gt; 在事件循环中，当主线程执行完当前的同步任务后，会检查事件队列中是否有待处理的事件。如果有，主线程会取出事件并执行对应的回调函数。这个循环的过程被称为事件循环（Event Loop），它由主线程和任务队列两部分组成。主线程负责执行同步任务，而异步任务则通过任务队列进行处理。这种机制保证了异步任务在适当的时机能够插入执行，从而实现了 JavaScript 的`非阻塞异步执行`。\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n事件循环流程如下：\\r\\n\\r\\n&gt; 1. 主线程读取 JavaScript 代码，形成相应的堆和执行栈。\\r\\n&gt; 2. 当主线程遇到异步任务时，将其委托给对应的异步进程（如 Web API）处理。\\r\\n&gt; 3. 异步任务完成后，将相应的回调函数推入任务队列。\\r\\n&g\"},{\"url\":\"/web开发/前端/JavaScript/原型链\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:32\",\"title\":\"原型链\",\"permalink\":\"/pages/17549b\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"原型链\",\"date\":\"2025-04-20 23:56:32\",\"excerpt\":\"\",\"capture\":\"原型链\\r\\n\\r\\n::: info 说明\\r\\n\\r\\n1. 原型：函数都有prototype属性，称之为原型，也称为原型对象\\r\\n\\r\\n    - 原型可以放一些属性和方法，共享给实例对象使用\\r\\n    - 原型可以做继承\\r\\n\\r\\n2. 原型链：对象都有 \\\\_\\\\_proto\\\\_\\\\_ 属性，这个属性指向它的原型对象，原型对象也是对象，也有自己的 \\\\_\\\\_proto\\\\_\\\\_ 属性，指向原型对象的原型对象，这样一层一层形成的链式结构称为原型链，最顶层找不到则返回 _null_。\\r\\n   :::\\r\\n\\r\\n 类\\r\\n\\r\\n::: info 概念\\r\\n类: 类是一种创建对象的蓝图或模板, 在 js 中, 类本质还是一个构造函数。\\r\\n:::\\r\\n\\r\\n 构造器(也称 `constructor` 或 `构造函数`)\\r\\n\\r\\n::: info 概念\\r\\n构造函数: 用 new 来执行的函数。\\r\\n:::\\r\\n::: tip 介绍\\r\\n原本以前是\"},{\"url\":\"/web开发/前端/JavaScript/JavaScript常识\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"JavaScript常识\",\"permalink\":\"/pages/f7e507\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"JavaScript常识\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"JavaScript常识整理\\r\\n\\r\\n nodejs 默认采用 commonjs 模块化规范\\r\\n\\r\\n::: tip 科普\\r\\n- (1)每个模块都Node.js 应用由模块组成，每个文件就是一个模块，有自己的作用域。\\r\\n- (2)在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。\\r\\n- (3)每个模块内部有两个变量可以使用，`require` 和 `module`。`require` 用来加载某个模块，`module` 代表当前模块，是一个对象，保存了当前模块需要导出的信息。\\r\\n- (4)`exports` 是 `module` 上的一个属性，保存了当前模块要导出的接口或者变量，使用 require 加载的某个模块获取到的值就是那个模块使用 `exports` 导出的值。\\r\\n- (5)注意: exports 和 module.exports 是指向同一个对象。最终`requir\"},{\"url\":\"/web开发/前端/JavaScript/Promise\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"Promise\",\"permalink\":\"/pages/233f86\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Promise\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"深入学习 Promise\\r\\n\\r\\n Promise 是什么？\\r\\n\\r\\n1. 抽象表达\\r\\n  - ES6 规范\\r\\n  - JS进行异步变成的新解决方案（旧方案是回调函数）\\r\\n2. 具体表达\\r\\n   - 从语法上来说：Promise是一个构造函数\\r\\n   - 从功能上来说：Promise对象用来封装一个一步操作并可以获取其成功或失败的结果值\\r\\n\\r\\n\\r\\n&gt; * fs文件操作\\r\\n&gt; * 数据库操作\\r\\n&gt; * ajax\\r\\n&gt; * 定时器\\r\\n&gt; * ...\\r\\n\\r\\n\\r\\n 为什么要用Promise？\\r\\n- 指定回调函数的方式更加灵活\\r\\n- 支持链式调用，可以解决回调地域问题\\r\\n\\r\\n Promise的状态\\r\\n1. pending （待定状态）\\r\\n2. pending 变为 `fulfilled`\\r\\n3. pending 变为 `rejected`\\r\\n\\r\\n&gt; 说明：只有这三种，\"},{\"url\":\"/web开发/前端/JavaScript/TypeScript\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"TypeScript\",\"permalink\":\"/pages/3b643f\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"TypeScript\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"TypeScript 学习笔记\\r\\n\\r\\n\\r\\n&gt;\\r\\n&gt; - 中文学习网: TypeScript\\r\\n&gt; \\r\\n&gt; - 推荐阅读：jsdocs文档\\r\\n&gt; \\r\\n&gt; - 推荐阅读：npm包管理器\\r\\n\\r\\n::: warning 注意\\r\\n- 记住：类型注释永远不会改变程序的运行时行为。\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n- `tsc`命令行编译选项\\r\\n\\r\\n| 参数              |                               功能 |\\r\\n| :---------------- | ---------------------------------: |\\r\\n| `--noEmitOnError` | TS代码有错误时，不要编译生成JS文件 |\\r\\n| `--target`        |    编译生成JS的目标版本，默认`ES5` |\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"},{\"url\":\"/web开发/前端/JavaScript/WebAPI\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"WebAPI\",\"permalink\":\"/pages/3faec5\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"WebAPI\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"常用 Web API\\r\\n\\r\\n 电池\\r\\n\\r\\n\\r\\n&gt;\\r\\n&gt; `navigator.getBattery()` 提供有关系统电池电量的信息。\\r\\n&gt;\\r\\n&gt; 事件\\r\\n&gt;\\r\\n&gt; -   `chargingchange`：当电池充电状态（charging 属性）更新时触发。\\r\\n&gt; -   `chargingtimechange`：当电池充电时间（chargingTime 属性）更新时触发。\\r\\n&gt; -   `dischargingtimechange`：当电池续航时间（dischargingTime 属性）更新时触发。\\r\\n&gt; -   `levelchange`：当电池电量（level 属性）更新时触发。\\r\\n\\r\\n::: code-group\\r\\n\\r\\n```ts [电池信息]\\r\\nnavigator.getBattery().then((battery) =&\"},{\"url\":\"/web开发/前端/JavaScript/\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"index\",\"permalink\":\"/pages/81bda3\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"JS 的使用技巧\\r\\n\\r\\n `var`、`let`、`const`区别\\r\\n\\r\\n::: tip 详解\\r\\n\\r\\n| 关键字  | 作用及注意事项                                                                                                                         |\\r\\n| ------- | -------------------------------------------------------------------------------------------------------------------------------------- |\\r\\n| `var`   | 定义`具有穿透作用域的`（全局）变量，不管在哪里定义，都会变成全局作用域的变量，定义后可以修\"},{\"url\":\"/web开发/前端/JavaScript/高级核心概念\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"高级核心概念\",\"permalink\":\"/pages/09b3f6\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"高级核心概念\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"JS 高级核心概念\\r\\n\\r\\n 事件循环原理\\r\\n\\r\\n::: tip\\r\\n\\r\\n\\r\\n\\r\\n:::\\r\\n\\r\\n 事件循环概述\\r\\n\\r\\n::: info\\r\\n\\r\\n&gt; 在事件循环中，当主线程执行完当前的同步任务后，会检查事件队列中是否有待处理的事件。如果有，主线程会取出事件并执行对应的回调函数。这个循环的过程被称为事件循环（Event Loop），它由主线程和任务队列两部分组成。主线程负责执行同步任务，而异步任务则通过任务队列进行处理。这种机制保证了异步任务在适当的时机能够插入执行，从而实现了 JavaScript 的`非阻塞异步执行`。\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n事件循环流程如下：\\r\\n\\r\\n&gt; 1. 主线程读取 JavaScript 代码，形成相应的堆和执行栈。\\r\\n&gt; 2. 当主线程遇到异步任务时，将其委托给对应的异步进程（如 Web API）处理。\\r\\n&gt; 3. 异步任务完成后，将相应的回\"},{\"url\":\"/视觉与设计/Adoube/PhotoShop/\",\"frontmatter\":{\"date\":\"2025-04-20 23:46:06\",\"title\":\"index\",\"permalink\":\"/pages/629cfa\",\"categories\":[\"视觉与设计\",\"Adoube\",\"PhotoShop\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:46:06\",\"excerpt\":\"\",\"capture\":\"PhotoShop\\r\\n\\r\\n 界面了解\\r\\n\\r\\n-   菜单栏\\r\\n-   工具栏\\r\\n-   属性栏\\r\\n-   状态栏\\r\\n-   工作区\\r\\n-   图层面板\\r\\n\\r\\n 常用快捷键\\r\\n\\r\\n| 快捷键                | 功能             | 转换功能 |\\r\\n| :-------------------- | ---------------- | -------- |\\r\\n| Ctrl + S              | 保存             |          |\\r\\n| Ctrl + Z              | 撤销             |          |\\r\\n| Ctrl + N              | 新建             |          |\\r\\n| ESC                   | 取消             \"},{\"url\":\"/前沿领域/人工智能/Ollama/\",\"frontmatter\":{\"date\":\"2025-04-20 23:43:03\",\"title\":\"index\",\"permalink\":\"/pages/066462\",\"categories\":[\"人工智能\"],\"tags\":[\"Ollama\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:43:03\",\"excerpt\":\"\",\"capture\":\"Ollama 开源大模型\\r\\n\\r\\n::: info 文档\\r\\n\\r\\nOllama 是一个开源的大型语言模型（LLM）服务工具，它允许用户在本地机器上运行和部署大型语言模型。\\r\\n\\r\\n-   推荐 1：Ollama 官网\\r\\n-   推荐 2：Ollama Github 仓库\\r\\n\\r\\n:::\\r\\n\\r\\n::: tip 提示\\r\\n\\r\\n-   `ollama`命令行工具的使用很类似`docker`命令，通过 `olloma -h` 可查看帮助\\r\\n-   推荐阅读：博客文章\\r\\n\\r\\n:::\\r\\n\\r\\n 列出已有模型\\r\\n\\r\\n```bash\\r\\n$ ollama list\\r\\n```\\r\\n\\r\\n 创建模型\\r\\n\\r\\n\\r\\n\\r\\n```bash\\r\\n$ ollama create mymodel -f ./Modelfile\\r\\n```\\r\\n\\r\\n 拉取模型\\r\\n\\r\\n&gt; 拉取本地已经存在的模型会自动比较两者差异进行更新\\r\\n\\r\\n```bash\\r\\n$\"},{\"url\":\"/web开发/开发者工具/VSCode/\",\"frontmatter\":{\"date\":\"2025-04-20 23:34:24\",\"title\":\"index\",\"permalink\":\"/pages/277ec2\",\"categories\":[\"web开发\",\"开发者工具\",\"VSCode\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:34:24\",\"excerpt\":\"\",\"capture\":\"VSCode 开发工具\\r\\n\\r\\n 一、常用插件\\r\\n\\r\\n|               插件名称               |                             功能                             |\\r\\n| :----------------------------------: | :----------------------------------------------------------: |\\r\\n|   Chinese (Simplified) (简体中文)    |              VSCode 界面简体中文插件(⭐⭐⭐⭐)               |\\r\\n|             Monokai Pro              |                  舒适美观的主题(⭐⭐⭐⭐⭐)         \"},{\"url\":\"/web开发/开发者工具/VSCode/我的配置\",\"frontmatter\":{\"date\":\"2025-04-20 23:33:51\",\"title\":\"我的配置\",\"permalink\":\"/pages/991531\",\"categories\":[\"web开发\",\"开发者工具\",\"VSCode\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"我的配置\",\"date\":\"2025-04-20 23:33:51\",\"excerpt\":\"\",\"capture\":\"一、VSCode 个性化配置\\r\\n\\r\\n 主题\\r\\n\\r\\n-   插件依赖：\\r\\n\\r\\n| 插件名称              | 插件描述           |\\r\\n| :-------------------- | ------------------ |\\r\\n| 🎨Monokai Pro         | 编辑器颜色主题     |\\r\\n| 📁Material Icon Theme | 文件、目录图标主题 |\\r\\n\\r\\n-   配置内容：\\r\\n\\r\\n```json\\r\\n/** settings.json */\\r\\n{\\r\\n    \\\"workbench.tree.indent\\\": 16, // 目录树视图缩进宽度\\r\\n    \\\"workbench.colorTheme\\\": \\\"Monokai Pro (Filter Spectrum)\\\", // 主题颜色\\r\\n    \\\"workbench.iconTheme\\\": \\\"\"},{\"url\":\"/web开发/运维/Linux/\",\"frontmatter\":{\"date\":\"2025-04-20 23:23:56\",\"title\":\"index\",\"permalink\":\"/pages/49880a\",\"categories\":[\"web开发\",\"运维\",\"Linux\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:23:56\",\"excerpt\":\"\",\"capture\":\"Linux 笔记\\r\\n\\r\\n\\r\\n\\r\\n 命令查询网站\\r\\n\\r\\n\\r\\n\\r\\n 单元五、磁盘管理\\r\\n\\r\\n&gt; 一定要注意关联上下文信息进行阅读、操作\\r\\n\\r\\n&gt; 推荐几个在主机上方便操作 Linux 服务器的软件：`XShell` 、 `WindTerm` 、 `FinalShell`\\r\\n\\r\\n 一、磁盘分区\\r\\n\\r\\n&gt; fdisk 命令中的参数及其作用\\r\\n\\r\\n| 参数 | 作用                           |\\r\\n| ---- | ------------------------------ |\\r\\n| m    | 查看全部可用的参数（帮忙信息） |\\r\\n| n    | 添加新的分区                   |\\r\\n| d    | 删除某个分区信息               |\\r\\n| l    | 列出所有可用的分区类型         |\\r\\n| t    \"},{\"url\":\"/web开发/运维/Nginx/\",\"frontmatter\":{\"date\":\"2025-04-20 23:22:47\",\"title\":\"index\",\"permalink\":\"/pages/0e6ca2\",\"categories\":[\"web开发\",\"运维\",\"Nginx\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:22:47\",\"excerpt\":\"\",\"capture\":\"前置条件\\r\\n\\r\\n 配置静态 IP\\r\\n\\r\\n```bash\\r\\n 一键配置 静态IP地址 并 启用\\r\\nnmcli c add type ethernet con-name \\\"static_conn\\\" ifname ens160 ipv4.addresses 192.168.232.20/24 gw4 192.168.232.2 ipv4.dns \\\"8.8.8.8 114.114.114.114\\\" ipv4.method manual autoconnect yes && nmcli c up static_conn\\r\\n```\\r\\n\\r\\n 关闭防火墙\\r\\n\\r\\n```bash\\r\\n$ systemctl stop firewalld       本次开机关闭防火墙（重新开机防火墙又会启动）\\r\\n$ systemctl disable firewalld    永久禁用防火墙（以后不会再自动启动了）\\r\\n\\r\\n$ \"},{\"url\":\"/web开发/运维/Linux/Linux环境安装\",\"frontmatter\":{\"date\":\"2025-04-20 23:18:51\",\"title\":\"Linux环境安装\",\"permalink\":\"/pages/21e258\",\"categories\":[\"web开发\",\"运维\",\"Linux\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Linux环境安装\",\"date\":\"2025-04-20 23:18:51\",\"excerpt\":\"\",\"capture\":\"Linux安装运行环境\\r\\n\\r\\n 安装基础工具\\r\\n\\r\\n```bash\\r\\n$ yum install -y make gcc patch libffi-devel python3-devel zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel xz-devel lrzsz tree zip unzip\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n 1、安装 nginx\\r\\n\\r\\n\\r\\n\\r\\n (1)安装 nginx\\r\\n\\r\\n```bash\\r\\n$ yum install -y nginx\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n (2)配置 `/etc/nginx/nginx.conf`\\r\\n\\r\\n- 开放静态资源\\r\\n- 配置反向代理\\r\\n- ...\\r\\n\\r\\n\\r\\n\\r\\n (3)验证配置有效性\\r\\n\\r\\n```b\"},{\"url\":\"/web开发/运维/服务器/\",\"frontmatter\":{\"date\":\"2025-04-20 23:12:29\",\"title\":\"index\",\"permalink\":\"/pages/fec2e6\",\"categories\":[\"web开发\",\"运维\",\"服务器\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:12:29\",\"excerpt\":\"\",\"capture\":\"云计算\\r\\n\\r\\n 一、Linux 下载与安装\\r\\n\\r\\n::: tip 推荐：\\r\\n\\r\\n`RHEL 下载`：登陆红帽官网后, 访问该网址跳转到下载镜像界面\\r\\n\\r\\n`RHEL8 安装` 参考博客：教程\\r\\n\\r\\n:::\\r\\n\\r\\n 二、包管理器配置\\r\\n\\r\\n RHEL 注册\\r\\n\\r\\n::: info\\r\\n\\r\\n-   去官网注册\\r\\n\\r\\n:::\\r\\n\\r\\n 配置 `yum 官方仓库源`\\r\\n\\r\\n```bash\\r\\n 终端登录红帽子账号\\r\\n$ subscription-manager register --username=账户名称 --password='账户对应的密码' --auto-attach\\r\\n 查看仓库名称\\r\\n$ yum repolist\\r\\n 配置好仓库后，下载安装这个软件，便于后面Linux服务器和本地window电脑进行上传和下载\\r\\n$ yum install -y lrzsz\\r\\n```\\r\\n\\r\\n 三、远程登录工\"},{\"url\":\"/web开发/运维/服务器/搭建服务器\",\"frontmatter\":{\"date\":\"2025-04-20 23:12:24\",\"title\":\"搭建服务器\",\"permalink\":\"/pages/bcf0fc\",\"categories\":[\"web开发\",\"运维\",\"服务器\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"搭建服务器\",\"date\":\"2025-04-20 23:12:24\",\"excerpt\":\"\",\"capture\":\"搭建自己的服务器\\r\\n\\r\\n\\r\\n\\r\\n 1. 购买服务器\\r\\n\\r\\n\\r\\n\\r\\n::: tip 提示\\r\\n\\r\\n- 自己选择一个喜欢的或者合适的服务器运营商，购买他们的`Linux`服务器，像阿里云提供了以学生身份可以免费申请`3个月`的服务器试用，跟正常购买的服务器差不多，但是性能肯定不是特别好咯，毕竟是免费的嘛，但是个人的使用一般没问题，比如托管静态资源、云服务器学习使用等，这些都能够满足了。等学会了，再根据以后自己的项目性能要求，购买性能更加优质的服务器就行了。遇到一些促销日也可以看看官方是否有便宜点的服务器促销，低价促销的时候，也可以便宜的购买一个几年的来使用。哈哈 :smile:\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n::: warning 注意\\r\\n\\r\\n- 服务器购买了之后，会分配给你公网访问服务器的IP，此时你只需要在服务器上安装好Nginx、Apache之类的服务器软件，简单的启动、配置一下，那么就可以\"},{\"url\":\"/web开发/后端/MySQL/\",\"frontmatter\":{\"date\":\"2025-04-20 23:07:19\",\"title\":\"index\",\"permalink\":\"/pages/0a9104\",\"categories\":[\"web开发\",\"后端\",\"MySQL\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:07:19\",\"excerpt\":\"\",\"capture\":\"MySQL 数据库\\r\\n\\r\\n 基础篇\\r\\n\\r\\n MySQL 概述\\r\\n\\r\\n-   数据库相关概念：\\r\\n\\r\\n|      名称      |                                 全称                                 |               简称               |\\r\\n| :------------: | :------------------------------------------------------------------: | :------------------------------: |\\r\\n|     数据库     |               `存储数据的仓库`，数据是有组织的进行存储               |           DataBase(DB)           |\\r\\n\"},{\"url\":\"/web开发/后端/Python/QQ微信消息轰炸\",\"frontmatter\":{\"date\":\"2025-04-20 23:04:51\",\"title\":\"QQ微信消息轰炸\",\"permalink\":\"/pages/9abc85\",\"categories\":[\"web开发\",\"后端\",\"Python\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"QQ微信消息轰炸\",\"date\":\"2025-04-20 23:04:51\",\"excerpt\":\"\",\"capture\":\"消息轰炸\\r\\n\\r\\n 安装依赖\\r\\n\\r\\n```bash\\r\\n$ pip install pyautogui\\r\\n```\\r\\n\\r\\n 程序启动\\r\\n\\r\\n```python\\r\\npython message.py\\r\\n```\\r\\n\\r\\n 源代码\\r\\n\\r\\n```python\\r\\nimport time\\r\\n\\r\\nimport pyautogui\\r\\nimport pyperclip\\r\\n\\r\\ndef send_message(message, interval=1):\\r\\n    pyperclip.copy(message)\\r\\n    pyautogui.hotkey('ctrl', 'v')\\r\\n    pyautogui.press('enter')\\r\\n    time.sleep(interval)\\r\\n\\r\\n\\r\\ndef bomber(file_path='./messages.txt'):\\r\\n    \\\"\\\"\\\"\\r\\n    在微信、QQ\"},{\"url\":\"/web开发/开发者工具/Git/\",\"frontmatter\":{\"date\":\"2025-04-20 22:59:44\",\"title\":\"index\",\"permalink\":\"/pages/f4f5d9\",\"categories\":[\"web开发\",\"开发者工具\",\"Git\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 22:59:44\",\"excerpt\":\"\",\"capture\":\"Git 版本控制系统\\r\\n\\r\\n::: tip 概述\\r\\n\\r\\n`Git`是一个免费的、开源的分布式版本控制系统，可以快速高效地处理从小型到大型的各种项目。\\r\\n\\r\\n`Git`易于学习，内存占用小，性能极快。它具有廉价的本地库，方便的暂存区域和多个工作流分支等特性。\\r\\n\\r\\n`Git工具下载`：推荐前往官网\\r\\n\\r\\n:::\\r\\n\\r\\n Git 本地管理\\r\\n\\r\\n 设置签名\\r\\n\\r\\n```bash\\r\\n$ git config --global user.name \\\"用户名\\\"\\t\\t 设置用户签名\\r\\n$ git config --global user.email \\\"邮箱\\\"\\t\\t  设置邮箱签名\\r\\n```\\r\\n\\r\\n 查看特定级别的配置信息\\r\\n\\r\\n 查看全局配置\\r\\n\\r\\n\\r\\n\\r\\n```bash\\r\\n$ git config --global --list\\r\\n```\\r\\n\\r\\n 查看特定配置项的值\\r\\n\\r\\n```bash\\r\\n$ git \"},{\"url\":\"/web开发/开发者工具/VSCode/配置Linux开发环境\",\"frontmatter\":{\"date\":\"2025-04-19 23:19:49\",\"title\":\"从零配置Linux与Windows互通的开发环境\",\"permalink\":\"/pages/e47200\",\"categories\":[\"开发者工具\"],\"tags\":[\"VSCode\"],\"coverImg\":\"/screenshots/VSCode/搭建linux开发环境.png\",\"top\":true,\"sticky\":3,\"description\":\"从零打造 Linux 和 Windows 互通的开发环境\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"从零配置Linux与Windows互通的开发环境\",\"date\":\"2025-04-19 23:19:49\",\"excerpt\":\"\",\"capture\":\"从零配置 Linux 与 Windows 互通的开发环境\\n以下配置基于 `Red Hat 8`（红帽 8）的 Linux 最基础（无界面）系统，不同的 Linux 发行版会有一些区别，请注意自己系统的是否符合该以上条件。\\n 前置条件\\n\\n```bash\\n 关闭防火墙\\n$ systemctl stop firewalld --now     立即生效\\n$ systemctl status firewalld\\n$ systemctl disable firewalld        永久禁用\\n 关闭 selinux 安全策略\\n$ setenforce 0       本次生效\\n$ getenforce         验证\\n$ sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config     改写配置文件，永久关闭\\n``\"},{\"url\":\"/web开发/后端/Python/支付宝沙箱支付教程\",\"frontmatter\":{\"date\":\"2025-04-19 22:58:03\",\"title\":\"支付宝沙箱支付教程\",\"permalink\":\"/pages/4f6a36\",\"categories\":[\"后端\"],\"tags\":[\"Python\",\"Flask\"],\"coverImg\":\"/screenshots/支付宝沙箱支付详细使用教程/支付宝教程封面.png\",\"top\":true,\"sticky\":2,\"description\":\"详细介绍了在Python Web开发中集成支付宝沙箱支付的完整流程\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"支付宝沙箱支付教程\",\"date\":\"2025-04-19 22:58:03\",\"excerpt\":\"\",\"capture\":\"支付宝沙箱支付详细使用教程\\n详细介绍支付宝沙箱支付的全流程配置最新教程，通俗易懂，图文并茂，手把手教你一步步实现完整沙箱支付功能。亲测可用，文章撰写非常用心，包你学会！\\n&lt;!--@include: @/public/snippets/preface.md--\\n 一、前言\\n由于支付宝官方对Java等语言的文档说明支持较好，在Python方面相对较弱，而且依赖包还安装不了等Bug，所以接下来我将分享《在Python Web开发中如何集成支付宝沙箱支付》的详细教程，如果这篇文章有帮助到你，请记得关注我的公众号，我会定期分享实用的技术教程。如果没有帮到你，也可以留个免费的关注，以后或许会有你感兴趣的教程，而且文章质量都超高哦！\\n在个人平常（或准备后续对接支付宝正式支付环境）的项目中，使用沙箱支付来测试支付功能显得很有必要；如果是在校大学生的话，在你的项目中集成支付宝的沙箱支付，也能让你的项目\"},{\"url\":\"/web开发/后端/桌面应用开发/\",\"frontmatter\":{\"date\":\"2025-04-19 22:52:13\",\"title\":\"全网最新最全的 electron 项目环境搭建方式与踩坑经验分享\",\"head\":[[\"meta\",{\"name\":\"description\",\"content\":\"全网最全最新 electron 项目环境搭建方式与踩坑经验分享，帮你避坑，少走弯路，节省时间，还等什么，快来参考一下我的 electron 环境搭建指南！\"},{\"name\":\"keywords\",\"content\":\"electron 项目环境搭建 踩坑经验分享\"}]],\"footer\":false,\"permalink\":\"/pages/75a1df\",\"categories\":[\"后端\"],\"tags\":[\"桌面应用开发\"],\"coverImg\":\"/screenshots/Nodejs/Electron安装踩坑经验总结.png\",\"top\":true,\"sticky\":5,\"description\":\"全网最全最新 electron 项目环境搭建方式与踩坑经验分享\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"全网最新最全的 electron 项目环境搭建方式与踩坑经验分享\",\"date\":\"2025-04-19 22:52:13\",\"excerpt\":\"\",\"capture\":\"&lt;!--@include: @/public/snippets/preface.md--\\r\\n\\r\\n&gt; 本文项目搭建演示的`nodejs`版本如下：\\r\\n\\r\\n```bash\\r\\n$ node -v\\r\\n v22.14.0\\r\\n```\\r\\n\\r\\n 一、官方文档手动搭建\\r\\n\\r\\n文档地址：快速入门 | Electron，按照文档步骤操作即可，项目只包含了`electron`依赖，仅仅只是一个`hello world`展示。\\r\\n\\r\\n&gt; ⚠️ 注意：失败！我设置了代理（网络问题）和切换镜像源（淘宝）等操作都没用。截图如下：\\r\\n\\r\\n\\r\\n\\r\\n 二、官方脚手架方式创建\\r\\n\\r\\n- 创建项目命令如下：\\r\\n\\r\\n```bash\\r\\n$ npm init electron-app@latest my-app -- --template=vite  my-app:项目名(自定义)\\r\\n 或\\r\\n$ npm create \"},{\"url\":\"/web开发/后端/Nodejs/\",\"frontmatter\":{\"date\":\"2025-04-19 22:04:01\",\"layout\":\"doc\",\"title\":\"Nodejs 安装教程\",\"navbar\":true,\"sidebar\":true,\"aside\":true,\"footer\":false,\"pageClass\":null,\"head\":[[\"meta\",{\"name\":\"description\",\"content\":\"Nodejs 详细安装教程附带配置\"}],[\"meta\",{\"name\":\"keywords\",\"content\":\"保姆级Nodejs安装和配置教程\"}]],\"permalink\":\"/pages/b609ed\",\"categories\":[\"后端\"],\"tags\":[\"Nodejs\"],\"coverImg\":\"/screenshots/Nodejs/nodejs官网.png\",\"top\":true,\"sticky\":4,\"description\":\"windows版安装和配置Nodejs保姆级详细教程\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Nodejs 安装教程\",\"date\":\"2025-04-19 22:04:01\",\"excerpt\":\"\",\"capture\":\"Nodejs 安装教程\\r\\n\\r\\n 一、安装 `Nodejs`\\r\\n\\r\\n::: info 访问`Nodejs`官网\\r\\n点击前往：Nodejs 官网\\r\\n\\r\\n一直点击下一步安装完即可（可以选择自行选择安装路径）。\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n- 安装完成后，打开`cmd`，输入`node -v`，如果显示版本号，则安装成功。\\r\\n\\r\\n```bash\\r\\n$ node -v\\r\\n$ npm -v\\r\\n```\\r\\n\\r\\n 二、配置\\r\\n\\r\\n\\r\\n\\r\\n 1. 创建目录\\r\\n\\r\\n创建`node_global`和`node_cache`目录，并且在`node_global`目录下创建`node_modules`目录。\\r\\n\\r\\n```bash\\r\\n 进入 E:/enviroments/nodejs/ 路径下\\r\\nmkdir -p node_global/node_modules node_cache\\r\\n```\\r\\n\\r\\n 2. 设置权限\\r\\n\\r\"},{\"url\":\"/web开发/后端/Nodejs/模块化规范演进\",\"frontmatter\":{\"date\":\"2025-04-19 22:02:31\",\"title\":\"模块化规范演进\",\"permalink\":\"/pages/d20f11\",\"categories\":[\"后端\"],\"tags\":[\"Nodejs\"],\"coverImg\":\"/screenshots/Nodejs/JS模块化规范演进.png\",\"top\":true,\"sticky\":1,\"description\":\"简明扼要的概述了 JS 模块化规范演进的整个历史\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"模块化规范演进\",\"date\":\"2025-04-19 22:02:31\",\"excerpt\":\"\",\"capture\":\"JS 模块化规范演进历史\\r\\n\\r\\n 1. 原始的 JS 模块化\\r\\n\\r\\n每个人编写的`模块`通过 `script`标签引入到`页面`中，然后就可以使用`模块`中的内容了。\\r\\n\\r\\n 2. CommonJS 模块化规范\\r\\n\\r\\n随着 `nodejs` 的诞生，为了解决在 `nodejs` 中的模块化问题，社区自发形成了很多的模块化方案，其中 `CommonJS` 模块化规范得到了时间的检验，并最终确定为主流的模块化规范，这是一套社区的模块化规范，使用 `commonjs` 规范编写的模块并不能直接在浏览器中运行。后来出现了`browserify`，`webpack` 等编译、打包工具，使得 `CommonJS` 模块化规范编写的代码经过编译、打包后也可以用于浏览器中运行。\\r\\n\\r\\n::: code-group\\r\\n\\r\\n```js [utils.js]\\r\\n// 1. 使用 exports 导出模块\\r\\nex\"},{\"url\":\"/web开发/后端/Cpp/\",\"frontmatter\":{\"date\":\"2025-04-19 15:24:14\",\"title\":\"C++语言快速入门\",\"categories\":[\"后端\"],\"tags\":[\"C++\"],\"description\":\"C++是一种静态类型的中级语言，综合了高级语言和低级语言的特点\",\"coverImg\":\"/banner/8.webp\",\"permalink\":\"/pages/2aeaba\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"C++语言快速入门\",\"date\":\"2025-04-19 15:24:14\",\"excerpt\":\"\",\"capture\":\"C++语言快速入门\\n 安装 `C++` 编译环境\\n```bash\\n $ sudo subscription-manager repos --enable codeready-builder-for-rhel-8-x86_64-rpms\\n$ sudo dnf install -y gcc gcc-c++ make\\n 或者安装完整的开发工具组（包含更多工具如gdb、git等）\\n$ sudo dnf groupinstall -y \\\"Development Tools\\\"\\n 检查安装\\n$ gcc --version\\n$ g++ --version\\n$ make --version\\n```\\n 第一个 `C++` 程序\\n```c++\\n// main.cpp\\ninclude &lt;iostream\\nusing namespace std;\\nint main()\\n{\\n    cout &lt;&lt; \"},{\"url\":\"/web开发/后端/Lua/\",\"frontmatter\":{\"date\":\"2025-04-19 07:24:14\",\"title\":\"Lua语言快速入门\",\"categories\":[\"后端\"],\"tags\":[\"Lua\"],\"description\":\"Lua 是一款轻量级、高效灵活、跨平台的多范式编程语言\",\"coverImg\":\"/banner/1.webp\",\"permalink\":\"/pages/e7b99e\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Lua语言快速入门\",\"date\":\"2025-04-19 07:24:14\",\"excerpt\":\"\",\"capture\":\"Lua语言快速入门\\n 环境安装\\n- 了解更多，请参考：菜鸟教程-Lua 环境安装\\n- Linux 系统(CentOS)\\n```bash\\n$ sudo yum install -y epel-release\\n$ sudo yum install -y lua\\n```\\n 快速体验\\n 交互式\\n```bash\\n$ man lua                  查看 lua 命令行帮助说明\\n$ lua -v                   查看版本信息\\n$ lua -i                   进入交互模式\\n\\n```\\n 脚本式编程\\n- 创建 `*.lua` 文件\\n```lua\\n!/usr/local/bin/lua\\nprint(\\\"Hello world!\\\")\\n```\\n- 赋予可执行权限\\n```bash\\n$ chmod 700 hello.lua\\n```\\n- 执行脚本\\n```bas\"}]}},\"groupPosts\":{\"categories\":{\"后端\":[{\"url\":\"/web开发/后端/Nodejs/模块化规范演进\",\"frontmatter\":{\"date\":\"2025-04-19 22:02:31\",\"title\":\"模块化规范演进\",\"permalink\":\"/pages/d20f11\",\"categories\":[\"后端\"],\"tags\":[\"Nodejs\"],\"coverImg\":\"/screenshots/Nodejs/JS模块化规范演进.png\",\"top\":true,\"sticky\":1,\"description\":\"简明扼要的概述了 JS 模块化规范演进的整个历史\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"模块化规范演进\",\"date\":\"2025-04-19 22:02:31\",\"excerpt\":\"\",\"capture\":\"JS 模块化规范演进历史\\r\\n\\r\\n 1. 原始的 JS 模块化\\r\\n\\r\\n每个人编写的`模块`通过 `script`标签引入到`页面`中，然后就可以使用`模块`中的内容了。\\r\\n\\r\\n 2. CommonJS 模块化规范\\r\\n\\r\\n随着 `nodejs` 的诞生，为了解决在 `nodejs` 中的模块化问题，社区自发形成了很多的模块化方案，其中 `CommonJS` 模块化规范得到了时间的检验，并最终确定为主流的模块化规范，这是一套社区的模块化规范，使用 `commonjs` 规范编写的模块并不能直接在浏览器中运行。后来出现了`browserify`，`webpack` 等编译、打包工具，使得 `CommonJS` 模块化规范编写的代码经过编译、打包后也可以用于浏览器中运行。\\r\\n\\r\\n::: code-group\\r\\n\\r\\n```js [utils.js]\\r\\n// 1. 使用 exports 导出模块\\r\\nex\"},{\"url\":\"/web开发/后端/Python/支付宝沙箱支付教程\",\"frontmatter\":{\"date\":\"2025-04-19 22:58:03\",\"title\":\"支付宝沙箱支付教程\",\"permalink\":\"/pages/4f6a36\",\"categories\":[\"后端\"],\"tags\":[\"Python\",\"Flask\"],\"coverImg\":\"/screenshots/支付宝沙箱支付详细使用教程/支付宝教程封面.png\",\"top\":true,\"sticky\":2,\"description\":\"详细介绍了在Python Web开发中集成支付宝沙箱支付的完整流程\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"支付宝沙箱支付教程\",\"date\":\"2025-04-19 22:58:03\",\"excerpt\":\"\",\"capture\":\"支付宝沙箱支付详细使用教程\\n详细介绍支付宝沙箱支付的全流程配置最新教程，通俗易懂，图文并茂，手把手教你一步步实现完整沙箱支付功能。亲测可用，文章撰写非常用心，包你学会！\\n&lt;!--@include: @/public/snippets/preface.md--\\n 一、前言\\n由于支付宝官方对Java等语言的文档说明支持较好，在Python方面相对较弱，而且依赖包还安装不了等Bug，所以接下来我将分享《在Python Web开发中如何集成支付宝沙箱支付》的详细教程，如果这篇文章有帮助到你，请记得关注我的公众号，我会定期分享实用的技术教程。如果没有帮到你，也可以留个免费的关注，以后或许会有你感兴趣的教程，而且文章质量都超高哦！\\n在个人平常（或准备后续对接支付宝正式支付环境）的项目中，使用沙箱支付来测试支付功能显得很有必要；如果是在校大学生的话，在你的项目中集成支付宝的沙箱支付，也能让你的项目\"},{\"url\":\"/web开发/后端/Nodejs/\",\"frontmatter\":{\"date\":\"2025-04-19 22:04:01\",\"layout\":\"doc\",\"title\":\"Nodejs 安装教程\",\"navbar\":true,\"sidebar\":true,\"aside\":true,\"footer\":false,\"pageClass\":null,\"head\":[[\"meta\",{\"name\":\"description\",\"content\":\"Nodejs 详细安装教程附带配置\"}],[\"meta\",{\"name\":\"keywords\",\"content\":\"保姆级Nodejs安装和配置教程\"}]],\"permalink\":\"/pages/b609ed\",\"categories\":[\"后端\"],\"tags\":[\"Nodejs\"],\"coverImg\":\"/screenshots/Nodejs/nodejs官网.png\",\"top\":true,\"sticky\":4,\"description\":\"windows版安装和配置Nodejs保姆级详细教程\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Nodejs 安装教程\",\"date\":\"2025-04-19 22:04:01\",\"excerpt\":\"\",\"capture\":\"Nodejs 安装教程\\r\\n\\r\\n 一、安装 `Nodejs`\\r\\n\\r\\n::: info 访问`Nodejs`官网\\r\\n点击前往：Nodejs 官网\\r\\n\\r\\n一直点击下一步安装完即可（可以选择自行选择安装路径）。\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n- 安装完成后，打开`cmd`，输入`node -v`，如果显示版本号，则安装成功。\\r\\n\\r\\n```bash\\r\\n$ node -v\\r\\n$ npm -v\\r\\n```\\r\\n\\r\\n 二、配置\\r\\n\\r\\n\\r\\n\\r\\n 1. 创建目录\\r\\n\\r\\n创建`node_global`和`node_cache`目录，并且在`node_global`目录下创建`node_modules`目录。\\r\\n\\r\\n```bash\\r\\n 进入 E:/enviroments/nodejs/ 路径下\\r\\nmkdir -p node_global/node_modules node_cache\\r\\n```\\r\\n\\r\\n 2. 设置权限\\r\\n\\r\"},{\"url\":\"/web开发/后端/桌面应用开发/\",\"frontmatter\":{\"date\":\"2025-04-19 22:52:13\",\"title\":\"全网最新最全的 electron 项目环境搭建方式与踩坑经验分享\",\"head\":[[\"meta\",{\"name\":\"description\",\"content\":\"全网最全最新 electron 项目环境搭建方式与踩坑经验分享，帮你避坑，少走弯路，节省时间，还等什么，快来参考一下我的 electron 环境搭建指南！\"},{\"name\":\"keywords\",\"content\":\"electron 项目环境搭建 踩坑经验分享\"}]],\"footer\":false,\"permalink\":\"/pages/75a1df\",\"categories\":[\"后端\"],\"tags\":[\"桌面应用开发\"],\"coverImg\":\"/screenshots/Nodejs/Electron安装踩坑经验总结.png\",\"top\":true,\"sticky\":5,\"description\":\"全网最全最新 electron 项目环境搭建方式与踩坑经验分享\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"全网最新最全的 electron 项目环境搭建方式与踩坑经验分享\",\"date\":\"2025-04-19 22:52:13\",\"excerpt\":\"\",\"capture\":\"&lt;!--@include: @/public/snippets/preface.md--\\r\\n\\r\\n&gt; 本文项目搭建演示的`nodejs`版本如下：\\r\\n\\r\\n```bash\\r\\n$ node -v\\r\\n v22.14.0\\r\\n```\\r\\n\\r\\n 一、官方文档手动搭建\\r\\n\\r\\n文档地址：快速入门 | Electron，按照文档步骤操作即可，项目只包含了`electron`依赖，仅仅只是一个`hello world`展示。\\r\\n\\r\\n&gt; ⚠️ 注意：失败！我设置了代理（网络问题）和切换镜像源（淘宝）等操作都没用。截图如下：\\r\\n\\r\\n\\r\\n\\r\\n 二、官方脚手架方式创建\\r\\n\\r\\n- 创建项目命令如下：\\r\\n\\r\\n```bash\\r\\n$ npm init electron-app@latest my-app -- --template=vite  my-app:项目名(自定义)\\r\\n 或\\r\\n$ npm create \"},{\"url\":\"/web开发/后端/MongoDB/\",\"frontmatter\":{\"date\":\"2025-04-22 18:33:06\",\"title\":\"index\",\"permalink\":\"/pages/634615\",\"categories\":[\"web开发\",\"后端\",\"MongoDB\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-22 18:33:06\",\"excerpt\":\"\",\"capture\":\"MongoDB 快速入门\\n 安装\\n\\n```bash\\n 安装 mongodb server\\n$ wget https://repo.mongodb.org/yum/redhat/8/mongodb-org/8.0/x86_64/RPMS/mongodb-org-server-8.0.8-1.el8.x86_64.rpm\\n$ du -sh ./*                       可以查看一下文件大小\\n$ rpm -ivh ./mongodb-org-server-8.0.8-1.el8.x86_64.rpm\\n$ systemctl status mongod          查看服务状态\\n$ systemctl enable mongod --now    设置开机自启\\n 安装命令行工具 cli：https://www.mongodb.com/try/download/shell\"},{\"url\":\"/web开发/后端/Python/Django快速入门教程\",\"frontmatter\":{\"date\":\"2025-04-21 18:17:55\",\"title\":\"Django快速入门教程\",\"permalink\":\"/pages/5e2304\",\"categories\":[\"后端\",\"Python\"],\"tags\":[\"Django\"],\"description\":\"Django 哲学宗旨：懂得越多，写得越少\",\"coverImg\":\"/screenshots/Python/Django快速入门教程.png\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Django快速入门教程\",\"date\":\"2025-04-21 18:17:55\",\"excerpt\":\"\",\"capture\":\"Django 快速入门\\n 安装 Django\\n```bash\\n$ pip install django\\n```\\n 创建项目\\n```bash\\n$ mkdir &lt;项目名称\\n$ django-admin startproject [&lt;settings&gt;] &lt;项目名称&gt;    settings 是配置目录名称。如果不指定，配置目录的名称与项目名称一致\\n$ cd &lt;项目名称&gt;\\n```\\n- `manage.py`：管理 `Django` 项目的命令行工具。\\n- `settings/`：项目系统配置目录。\\n- `settings/settings.py`：`Django` 项目的配置文件。\\n- `settings/urls.py`：Django 项目的 URL 声明，就像你网站的 `路由` 。\\n- `settings/asgi.py`：项目运行在 `ASGI` \"},{\"url\":\"/web开发/后端/Python/\",\"frontmatter\":{\"date\":\"2025-04-21 00:51:35\",\"title\":\"index\",\"permalink\":\"/pages/de8c40\",\"categories\":[\"web开发\",\"后端\",\"Python\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-21 00:51:35\",\"excerpt\":\"\",\"capture\":\"Python 基础到高级\\r\\n\\r\\n::: tip 基础教程\\r\\n\\r\\n-   推荐 1：Python 官网\\r\\n\\r\\n-   推荐 2：极客教程\\r\\n\\r\\n-   推荐 3：清华源镜像站\\r\\n\\r\\n国内下载镜像：\\r\\n\\r\\n-   清华：https://pypi.tuna.tsinghua.edu.cn/simple\\r\\n-   阿里云：http://mirrors.aliyun.com/pypi/simple/\\r\\n-   豆瓣：https://pypi.douban.com/simple/\\r\\n-   中国科技大学：https://pypi.mirrors.ustc.edu.cn/simple/\\r\\n-   华中理工大学：http://pypi.hustunique.com/\\r\\n-   山东理工大学：http://pypi.sdutLinux.org/\\r\\n\\r\\n设置镜像源的命令：\\r\\n\\r\\n::: code-group\\r\"},{\"url\":\"/web开发/后端/Python/RestFramework\",\"frontmatter\":{\"date\":\"2025-04-21 00:50:31\",\"title\":\"RestFramework\",\"permalink\":\"/pages/baaa17\",\"categories\":[\"web开发\",\"后端\",\"Python\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"RestFramework\",\"date\":\"2025-04-21 00:50:31\",\"excerpt\":\"\",\"capture\":\"DRF 框架\\r\\n\\r\\n::: tip 介绍\\r\\n\\r\\n-   推荐 1：前往官方文档\\r\\n\\r\\n-   推荐 2: bilibili 教程\\r\\n\\r\\n-   推荐 3：深入理解什么是 Restful 规范\\r\\n    :::\\r\\n\\r\\n\\r\\n\\r\\n Restful API 最佳实践\\r\\n\\r\\n-   协议\\r\\n-   域名\\r\\n-   版本\\r\\n-   路径\\r\\n-   HTTP 动词\\r\\n-   过滤信息(Filtering)\\r\\n-   状态码(Status Codes)\\r\\n-   错误处理(Error handling)\\r\\n-   返回结果\\r\\n-   Hypermedia API\\r\\n\\r\\n HTTP 请求方法详解\\r\\n\\r\\n-   `GET (SELECT)`: 从服务器取出资源(一项或多项)\\r\\n-   `POST (CREATE)`: 在服务器新建一个资源\\r\\n-   `PUT (UPDATE)`: 在服务器更新资源(客户端提供\"},{\"url\":\"/web开发/后端/MySQL/\",\"frontmatter\":{\"date\":\"2025-04-20 23:07:19\",\"title\":\"index\",\"permalink\":\"/pages/0a9104\",\"categories\":[\"web开发\",\"后端\",\"MySQL\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:07:19\",\"excerpt\":\"\",\"capture\":\"MySQL 数据库\\r\\n\\r\\n 基础篇\\r\\n\\r\\n MySQL 概述\\r\\n\\r\\n-   数据库相关概念：\\r\\n\\r\\n|      名称      |                                 全称                                 |               简称               |\\r\\n| :------------: | :------------------------------------------------------------------: | :------------------------------: |\\r\\n|     数据库     |               `存储数据的仓库`，数据是有组织的进行存储               |           DataBase(DB)           |\\r\\n\"},{\"url\":\"/web开发/后端/Python/QQ微信消息轰炸\",\"frontmatter\":{\"date\":\"2025-04-20 23:04:51\",\"title\":\"QQ微信消息轰炸\",\"permalink\":\"/pages/9abc85\",\"categories\":[\"web开发\",\"后端\",\"Python\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"QQ微信消息轰炸\",\"date\":\"2025-04-20 23:04:51\",\"excerpt\":\"\",\"capture\":\"消息轰炸\\r\\n\\r\\n 安装依赖\\r\\n\\r\\n```bash\\r\\n$ pip install pyautogui\\r\\n```\\r\\n\\r\\n 程序启动\\r\\n\\r\\n```python\\r\\npython message.py\\r\\n```\\r\\n\\r\\n 源代码\\r\\n\\r\\n```python\\r\\nimport time\\r\\n\\r\\nimport pyautogui\\r\\nimport pyperclip\\r\\n\\r\\ndef send_message(message, interval=1):\\r\\n    pyperclip.copy(message)\\r\\n    pyautogui.hotkey('ctrl', 'v')\\r\\n    pyautogui.press('enter')\\r\\n    time.sleep(interval)\\r\\n\\r\\n\\r\\ndef bomber(file_path='./messages.txt'):\\r\\n    \\\"\\\"\\\"\\r\\n    在微信、QQ\"},{\"url\":\"/web开发/后端/Cpp/\",\"frontmatter\":{\"date\":\"2025-04-19 15:24:14\",\"title\":\"C++语言快速入门\",\"categories\":[\"后端\"],\"tags\":[\"C++\"],\"description\":\"C++是一种静态类型的中级语言，综合了高级语言和低级语言的特点\",\"coverImg\":\"/banner/8.webp\",\"permalink\":\"/pages/2aeaba\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"C++语言快速入门\",\"date\":\"2025-04-19 15:24:14\",\"excerpt\":\"\",\"capture\":\"C++语言快速入门\\n 安装 `C++` 编译环境\\n```bash\\n $ sudo subscription-manager repos --enable codeready-builder-for-rhel-8-x86_64-rpms\\n$ sudo dnf install -y gcc gcc-c++ make\\n 或者安装完整的开发工具组（包含更多工具如gdb、git等）\\n$ sudo dnf groupinstall -y \\\"Development Tools\\\"\\n 检查安装\\n$ gcc --version\\n$ g++ --version\\n$ make --version\\n```\\n 第一个 `C++` 程序\\n```c++\\n// main.cpp\\ninclude &lt;iostream\\nusing namespace std;\\nint main()\\n{\\n    cout &lt;&lt; \"},{\"url\":\"/web开发/后端/Lua/\",\"frontmatter\":{\"date\":\"2025-04-19 07:24:14\",\"title\":\"Lua语言快速入门\",\"categories\":[\"后端\"],\"tags\":[\"Lua\"],\"description\":\"Lua 是一款轻量级、高效灵活、跨平台的多范式编程语言\",\"coverImg\":\"/banner/1.webp\",\"permalink\":\"/pages/e7b99e\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Lua语言快速入门\",\"date\":\"2025-04-19 07:24:14\",\"excerpt\":\"\",\"capture\":\"Lua语言快速入门\\n 环境安装\\n- 了解更多，请参考：菜鸟教程-Lua 环境安装\\n- Linux 系统(CentOS)\\n```bash\\n$ sudo yum install -y epel-release\\n$ sudo yum install -y lua\\n```\\n 快速体验\\n 交互式\\n```bash\\n$ man lua                  查看 lua 命令行帮助说明\\n$ lua -v                   查看版本信息\\n$ lua -i                   进入交互模式\\n\\n```\\n 脚本式编程\\n- 创建 `*.lua` 文件\\n```lua\\n!/usr/local/bin/lua\\nprint(\\\"Hello world!\\\")\\n```\\n- 赋予可执行权限\\n```bash\\n$ chmod 700 hello.lua\\n```\\n- 执行脚本\\n```bas\"}],\"开发者工具\":[{\"url\":\"/web开发/开发者工具/VSCode/配置Linux开发环境\",\"frontmatter\":{\"date\":\"2025-04-19 23:19:49\",\"title\":\"从零配置Linux与Windows互通的开发环境\",\"permalink\":\"/pages/e47200\",\"categories\":[\"开发者工具\"],\"tags\":[\"VSCode\"],\"coverImg\":\"/screenshots/VSCode/搭建linux开发环境.png\",\"top\":true,\"sticky\":3,\"description\":\"从零打造 Linux 和 Windows 互通的开发环境\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"从零配置Linux与Windows互通的开发环境\",\"date\":\"2025-04-19 23:19:49\",\"excerpt\":\"\",\"capture\":\"从零配置 Linux 与 Windows 互通的开发环境\\n以下配置基于 `Red Hat 8`（红帽 8）的 Linux 最基础（无界面）系统，不同的 Linux 发行版会有一些区别，请注意自己系统的是否符合该以上条件。\\n 前置条件\\n\\n```bash\\n 关闭防火墙\\n$ systemctl stop firewalld --now     立即生效\\n$ systemctl status firewalld\\n$ systemctl disable firewalld        永久禁用\\n 关闭 selinux 安全策略\\n$ setenforce 0       本次生效\\n$ getenforce         验证\\n$ sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config     改写配置文件，永久关闭\\n``\"},{\"url\":\"/web开发/开发者工具/VSCode/\",\"frontmatter\":{\"date\":\"2025-04-20 23:34:24\",\"title\":\"index\",\"permalink\":\"/pages/277ec2\",\"categories\":[\"web开发\",\"开发者工具\",\"VSCode\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:34:24\",\"excerpt\":\"\",\"capture\":\"VSCode 开发工具\\r\\n\\r\\n 一、常用插件\\r\\n\\r\\n|               插件名称               |                             功能                             |\\r\\n| :----------------------------------: | :----------------------------------------------------------: |\\r\\n|   Chinese (Simplified) (简体中文)    |              VSCode 界面简体中文插件(⭐⭐⭐⭐)               |\\r\\n|             Monokai Pro              |                  舒适美观的主题(⭐⭐⭐⭐⭐)         \"},{\"url\":\"/web开发/开发者工具/VSCode/我的配置\",\"frontmatter\":{\"date\":\"2025-04-20 23:33:51\",\"title\":\"我的配置\",\"permalink\":\"/pages/991531\",\"categories\":[\"web开发\",\"开发者工具\",\"VSCode\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"我的配置\",\"date\":\"2025-04-20 23:33:51\",\"excerpt\":\"\",\"capture\":\"一、VSCode 个性化配置\\r\\n\\r\\n 主题\\r\\n\\r\\n-   插件依赖：\\r\\n\\r\\n| 插件名称              | 插件描述           |\\r\\n| :-------------------- | ------------------ |\\r\\n| 🎨Monokai Pro         | 编辑器颜色主题     |\\r\\n| 📁Material Icon Theme | 文件、目录图标主题 |\\r\\n\\r\\n-   配置内容：\\r\\n\\r\\n```json\\r\\n/** settings.json */\\r\\n{\\r\\n    \\\"workbench.tree.indent\\\": 16, // 目录树视图缩进宽度\\r\\n    \\\"workbench.colorTheme\\\": \\\"Monokai Pro (Filter Spectrum)\\\", // 主题颜色\\r\\n    \\\"workbench.iconTheme\\\": \\\"\"},{\"url\":\"/web开发/开发者工具/Git/\",\"frontmatter\":{\"date\":\"2025-04-20 22:59:44\",\"title\":\"index\",\"permalink\":\"/pages/f4f5d9\",\"categories\":[\"web开发\",\"开发者工具\",\"Git\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 22:59:44\",\"excerpt\":\"\",\"capture\":\"Git 版本控制系统\\r\\n\\r\\n::: tip 概述\\r\\n\\r\\n`Git`是一个免费的、开源的分布式版本控制系统，可以快速高效地处理从小型到大型的各种项目。\\r\\n\\r\\n`Git`易于学习，内存占用小，性能极快。它具有廉价的本地库，方便的暂存区域和多个工作流分支等特性。\\r\\n\\r\\n`Git工具下载`：推荐前往官网\\r\\n\\r\\n:::\\r\\n\\r\\n Git 本地管理\\r\\n\\r\\n 设置签名\\r\\n\\r\\n```bash\\r\\n$ git config --global user.name \\\"用户名\\\"\\t\\t 设置用户签名\\r\\n$ git config --global user.email \\\"邮箱\\\"\\t\\t  设置邮箱签名\\r\\n```\\r\\n\\r\\n 查看特定级别的配置信息\\r\\n\\r\\n 查看全局配置\\r\\n\\r\\n\\r\\n\\r\\n```bash\\r\\n$ git config --global --list\\r\\n```\\r\\n\\r\\n 查看特定配置项的值\\r\\n\\r\\n```bash\\r\\n$ git \"}],\"web开发\":[{\"url\":\"/web开发/后端/MongoDB/\",\"frontmatter\":{\"date\":\"2025-04-22 18:33:06\",\"title\":\"index\",\"permalink\":\"/pages/634615\",\"categories\":[\"web开发\",\"后端\",\"MongoDB\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-22 18:33:06\",\"excerpt\":\"\",\"capture\":\"MongoDB 快速入门\\n 安装\\n\\n```bash\\n 安装 mongodb server\\n$ wget https://repo.mongodb.org/yum/redhat/8/mongodb-org/8.0/x86_64/RPMS/mongodb-org-server-8.0.8-1.el8.x86_64.rpm\\n$ du -sh ./*                       可以查看一下文件大小\\n$ rpm -ivh ./mongodb-org-server-8.0.8-1.el8.x86_64.rpm\\n$ systemctl status mongod          查看服务状态\\n$ systemctl enable mongod --now    设置开机自启\\n 安装命令行工具 cli：https://www.mongodb.com/try/download/shell\"},{\"url\":\"/web开发/后端/Python/\",\"frontmatter\":{\"date\":\"2025-04-21 00:51:35\",\"title\":\"index\",\"permalink\":\"/pages/de8c40\",\"categories\":[\"web开发\",\"后端\",\"Python\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-21 00:51:35\",\"excerpt\":\"\",\"capture\":\"Python 基础到高级\\r\\n\\r\\n::: tip 基础教程\\r\\n\\r\\n-   推荐 1：Python 官网\\r\\n\\r\\n-   推荐 2：极客教程\\r\\n\\r\\n-   推荐 3：清华源镜像站\\r\\n\\r\\n国内下载镜像：\\r\\n\\r\\n-   清华：https://pypi.tuna.tsinghua.edu.cn/simple\\r\\n-   阿里云：http://mirrors.aliyun.com/pypi/simple/\\r\\n-   豆瓣：https://pypi.douban.com/simple/\\r\\n-   中国科技大学：https://pypi.mirrors.ustc.edu.cn/simple/\\r\\n-   华中理工大学：http://pypi.hustunique.com/\\r\\n-   山东理工大学：http://pypi.sdutLinux.org/\\r\\n\\r\\n设置镜像源的命令：\\r\\n\\r\\n::: code-group\\r\"},{\"url\":\"/web开发/后端/Python/RestFramework\",\"frontmatter\":{\"date\":\"2025-04-21 00:50:31\",\"title\":\"RestFramework\",\"permalink\":\"/pages/baaa17\",\"categories\":[\"web开发\",\"后端\",\"Python\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"RestFramework\",\"date\":\"2025-04-21 00:50:31\",\"excerpt\":\"\",\"capture\":\"DRF 框架\\r\\n\\r\\n::: tip 介绍\\r\\n\\r\\n-   推荐 1：前往官方文档\\r\\n\\r\\n-   推荐 2: bilibili 教程\\r\\n\\r\\n-   推荐 3：深入理解什么是 Restful 规范\\r\\n    :::\\r\\n\\r\\n\\r\\n\\r\\n Restful API 最佳实践\\r\\n\\r\\n-   协议\\r\\n-   域名\\r\\n-   版本\\r\\n-   路径\\r\\n-   HTTP 动词\\r\\n-   过滤信息(Filtering)\\r\\n-   状态码(Status Codes)\\r\\n-   错误处理(Error handling)\\r\\n-   返回结果\\r\\n-   Hypermedia API\\r\\n\\r\\n HTTP 请求方法详解\\r\\n\\r\\n-   `GET (SELECT)`: 从服务器取出资源(一项或多项)\\r\\n-   `POST (CREATE)`: 在服务器新建一个资源\\r\\n-   `PUT (UPDATE)`: 在服务器更新资源(客户端提供\"},{\"url\":\"/web开发/前端/JavaScript/Canvas\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:32\",\"title\":\"Canvas\",\"permalink\":\"/pages/60efec\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Canvas\",\"date\":\"2025-04-20 23:56:32\",\"excerpt\":\"\",\"capture\":\"Canvas 绘图\\r\\n\\r\\n::: tip\\r\\n\\r\\n-   推荐：前往优秀文档\\r\\n-   参考博客：菜鸟教程\\r\\n-   核心思想：`canvas`是基于状态的方式进行绘图的\\r\\n-   `canvas`坐标空间：以画布左上角为原点，向右为`x正半轴`，向下为`y正半轴`，以`1px`为单位距离\\r\\n\\r\\n:::\\r\\n\\r\\n 基础\\r\\n\\r\\n 画布默认大小\\r\\n\\r\\n-   `canvas`画布的默认大小是 `宽 x 高 = 300 x 150`\\r\\n\\r\\n 获取画布\\r\\n\\r\\n```ts\\r\\n// 获取画布元素\\r\\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\\r\\n// 获取上下文对象: context\\r\\nconst ctx = canvas.getContext('2d') as CanvasRenderingContext2D\\r\"},{\"url\":\"/web开发/前端/JavaScript/事件循环\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:32\",\"title\":\"事件循环\",\"permalink\":\"/pages/4c45cd\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"事件循环\",\"date\":\"2025-04-20 23:56:32\",\"excerpt\":\"\",\"capture\":\"事件循环原理\\r\\n\\r\\n::: tip\\r\\n\\r\\n\\r\\n\\r\\n:::\\r\\n\\r\\n 事件循环概述\\r\\n\\r\\n::: info\\r\\n\\r\\n&gt; 在事件循环中，当主线程执行完当前的同步任务后，会检查事件队列中是否有待处理的事件。如果有，主线程会取出事件并执行对应的回调函数。这个循环的过程被称为事件循环（Event Loop），它由主线程和任务队列两部分组成。主线程负责执行同步任务，而异步任务则通过任务队列进行处理。这种机制保证了异步任务在适当的时机能够插入执行，从而实现了 JavaScript 的`非阻塞异步执行`。\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n事件循环流程如下：\\r\\n\\r\\n&gt; 1. 主线程读取 JavaScript 代码，形成相应的堆和执行栈。\\r\\n&gt; 2. 当主线程遇到异步任务时，将其委托给对应的异步进程（如 Web API）处理。\\r\\n&gt; 3. 异步任务完成后，将相应的回调函数推入任务队列。\\r\\n&g\"},{\"url\":\"/web开发/前端/JavaScript/原型链\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:32\",\"title\":\"原型链\",\"permalink\":\"/pages/17549b\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"原型链\",\"date\":\"2025-04-20 23:56:32\",\"excerpt\":\"\",\"capture\":\"原型链\\r\\n\\r\\n::: info 说明\\r\\n\\r\\n1. 原型：函数都有prototype属性，称之为原型，也称为原型对象\\r\\n\\r\\n    - 原型可以放一些属性和方法，共享给实例对象使用\\r\\n    - 原型可以做继承\\r\\n\\r\\n2. 原型链：对象都有 \\\\_\\\\_proto\\\\_\\\\_ 属性，这个属性指向它的原型对象，原型对象也是对象，也有自己的 \\\\_\\\\_proto\\\\_\\\\_ 属性，指向原型对象的原型对象，这样一层一层形成的链式结构称为原型链，最顶层找不到则返回 _null_。\\r\\n   :::\\r\\n\\r\\n 类\\r\\n\\r\\n::: info 概念\\r\\n类: 类是一种创建对象的蓝图或模板, 在 js 中, 类本质还是一个构造函数。\\r\\n:::\\r\\n\\r\\n 构造器(也称 `constructor` 或 `构造函数`)\\r\\n\\r\\n::: info 概念\\r\\n构造函数: 用 new 来执行的函数。\\r\\n:::\\r\\n::: tip 介绍\\r\\n原本以前是\"},{\"url\":\"/web开发/前端/JavaScript/JavaScript常识\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"JavaScript常识\",\"permalink\":\"/pages/f7e507\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"JavaScript常识\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"JavaScript常识整理\\r\\n\\r\\n nodejs 默认采用 commonjs 模块化规范\\r\\n\\r\\n::: tip 科普\\r\\n- (1)每个模块都Node.js 应用由模块组成，每个文件就是一个模块，有自己的作用域。\\r\\n- (2)在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。\\r\\n- (3)每个模块内部有两个变量可以使用，`require` 和 `module`。`require` 用来加载某个模块，`module` 代表当前模块，是一个对象，保存了当前模块需要导出的信息。\\r\\n- (4)`exports` 是 `module` 上的一个属性，保存了当前模块要导出的接口或者变量，使用 require 加载的某个模块获取到的值就是那个模块使用 `exports` 导出的值。\\r\\n- (5)注意: exports 和 module.exports 是指向同一个对象。最终`requir\"},{\"url\":\"/web开发/前端/JavaScript/Promise\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"Promise\",\"permalink\":\"/pages/233f86\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Promise\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"深入学习 Promise\\r\\n\\r\\n Promise 是什么？\\r\\n\\r\\n1. 抽象表达\\r\\n  - ES6 规范\\r\\n  - JS进行异步变成的新解决方案（旧方案是回调函数）\\r\\n2. 具体表达\\r\\n   - 从语法上来说：Promise是一个构造函数\\r\\n   - 从功能上来说：Promise对象用来封装一个一步操作并可以获取其成功或失败的结果值\\r\\n\\r\\n\\r\\n&gt; * fs文件操作\\r\\n&gt; * 数据库操作\\r\\n&gt; * ajax\\r\\n&gt; * 定时器\\r\\n&gt; * ...\\r\\n\\r\\n\\r\\n 为什么要用Promise？\\r\\n- 指定回调函数的方式更加灵活\\r\\n- 支持链式调用，可以解决回调地域问题\\r\\n\\r\\n Promise的状态\\r\\n1. pending （待定状态）\\r\\n2. pending 变为 `fulfilled`\\r\\n3. pending 变为 `rejected`\\r\\n\\r\\n&gt; 说明：只有这三种，\"},{\"url\":\"/web开发/前端/JavaScript/TypeScript\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"TypeScript\",\"permalink\":\"/pages/3b643f\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"TypeScript\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"TypeScript 学习笔记\\r\\n\\r\\n\\r\\n&gt;\\r\\n&gt; - 中文学习网: TypeScript\\r\\n&gt; \\r\\n&gt; - 推荐阅读：jsdocs文档\\r\\n&gt; \\r\\n&gt; - 推荐阅读：npm包管理器\\r\\n\\r\\n::: warning 注意\\r\\n- 记住：类型注释永远不会改变程序的运行时行为。\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n- `tsc`命令行编译选项\\r\\n\\r\\n| 参数              |                               功能 |\\r\\n| :---------------- | ---------------------------------: |\\r\\n| `--noEmitOnError` | TS代码有错误时，不要编译生成JS文件 |\\r\\n| `--target`        |    编译生成JS的目标版本，默认`ES5` |\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"},{\"url\":\"/web开发/前端/JavaScript/WebAPI\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"WebAPI\",\"permalink\":\"/pages/3faec5\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"WebAPI\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"常用 Web API\\r\\n\\r\\n 电池\\r\\n\\r\\n\\r\\n&gt;\\r\\n&gt; `navigator.getBattery()` 提供有关系统电池电量的信息。\\r\\n&gt;\\r\\n&gt; 事件\\r\\n&gt;\\r\\n&gt; -   `chargingchange`：当电池充电状态（charging 属性）更新时触发。\\r\\n&gt; -   `chargingtimechange`：当电池充电时间（chargingTime 属性）更新时触发。\\r\\n&gt; -   `dischargingtimechange`：当电池续航时间（dischargingTime 属性）更新时触发。\\r\\n&gt; -   `levelchange`：当电池电量（level 属性）更新时触发。\\r\\n\\r\\n::: code-group\\r\\n\\r\\n```ts [电池信息]\\r\\nnavigator.getBattery().then((battery) =&\"},{\"url\":\"/web开发/前端/JavaScript/\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"index\",\"permalink\":\"/pages/81bda3\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"JS 的使用技巧\\r\\n\\r\\n `var`、`let`、`const`区别\\r\\n\\r\\n::: tip 详解\\r\\n\\r\\n| 关键字  | 作用及注意事项                                                                                                                         |\\r\\n| ------- | -------------------------------------------------------------------------------------------------------------------------------------- |\\r\\n| `var`   | 定义`具有穿透作用域的`（全局）变量，不管在哪里定义，都会变成全局作用域的变量，定义后可以修\"},{\"url\":\"/web开发/前端/JavaScript/高级核心概念\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"高级核心概念\",\"permalink\":\"/pages/09b3f6\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"高级核心概念\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"JS 高级核心概念\\r\\n\\r\\n 事件循环原理\\r\\n\\r\\n::: tip\\r\\n\\r\\n\\r\\n\\r\\n:::\\r\\n\\r\\n 事件循环概述\\r\\n\\r\\n::: info\\r\\n\\r\\n&gt; 在事件循环中，当主线程执行完当前的同步任务后，会检查事件队列中是否有待处理的事件。如果有，主线程会取出事件并执行对应的回调函数。这个循环的过程被称为事件循环（Event Loop），它由主线程和任务队列两部分组成。主线程负责执行同步任务，而异步任务则通过任务队列进行处理。这种机制保证了异步任务在适当的时机能够插入执行，从而实现了 JavaScript 的`非阻塞异步执行`。\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n事件循环流程如下：\\r\\n\\r\\n&gt; 1. 主线程读取 JavaScript 代码，形成相应的堆和执行栈。\\r\\n&gt; 2. 当主线程遇到异步任务时，将其委托给对应的异步进程（如 Web API）处理。\\r\\n&gt; 3. 异步任务完成后，将相应的回\"},{\"url\":\"/web开发/开发者工具/VSCode/\",\"frontmatter\":{\"date\":\"2025-04-20 23:34:24\",\"title\":\"index\",\"permalink\":\"/pages/277ec2\",\"categories\":[\"web开发\",\"开发者工具\",\"VSCode\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:34:24\",\"excerpt\":\"\",\"capture\":\"VSCode 开发工具\\r\\n\\r\\n 一、常用插件\\r\\n\\r\\n|               插件名称               |                             功能                             |\\r\\n| :----------------------------------: | :----------------------------------------------------------: |\\r\\n|   Chinese (Simplified) (简体中文)    |              VSCode 界面简体中文插件(⭐⭐⭐⭐)               |\\r\\n|             Monokai Pro              |                  舒适美观的主题(⭐⭐⭐⭐⭐)         \"},{\"url\":\"/web开发/开发者工具/VSCode/我的配置\",\"frontmatter\":{\"date\":\"2025-04-20 23:33:51\",\"title\":\"我的配置\",\"permalink\":\"/pages/991531\",\"categories\":[\"web开发\",\"开发者工具\",\"VSCode\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"我的配置\",\"date\":\"2025-04-20 23:33:51\",\"excerpt\":\"\",\"capture\":\"一、VSCode 个性化配置\\r\\n\\r\\n 主题\\r\\n\\r\\n-   插件依赖：\\r\\n\\r\\n| 插件名称              | 插件描述           |\\r\\n| :-------------------- | ------------------ |\\r\\n| 🎨Monokai Pro         | 编辑器颜色主题     |\\r\\n| 📁Material Icon Theme | 文件、目录图标主题 |\\r\\n\\r\\n-   配置内容：\\r\\n\\r\\n```json\\r\\n/** settings.json */\\r\\n{\\r\\n    \\\"workbench.tree.indent\\\": 16, // 目录树视图缩进宽度\\r\\n    \\\"workbench.colorTheme\\\": \\\"Monokai Pro (Filter Spectrum)\\\", // 主题颜色\\r\\n    \\\"workbench.iconTheme\\\": \\\"\"},{\"url\":\"/web开发/运维/Linux/\",\"frontmatter\":{\"date\":\"2025-04-20 23:23:56\",\"title\":\"index\",\"permalink\":\"/pages/49880a\",\"categories\":[\"web开发\",\"运维\",\"Linux\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:23:56\",\"excerpt\":\"\",\"capture\":\"Linux 笔记\\r\\n\\r\\n\\r\\n\\r\\n 命令查询网站\\r\\n\\r\\n\\r\\n\\r\\n 单元五、磁盘管理\\r\\n\\r\\n&gt; 一定要注意关联上下文信息进行阅读、操作\\r\\n\\r\\n&gt; 推荐几个在主机上方便操作 Linux 服务器的软件：`XShell` 、 `WindTerm` 、 `FinalShell`\\r\\n\\r\\n 一、磁盘分区\\r\\n\\r\\n&gt; fdisk 命令中的参数及其作用\\r\\n\\r\\n| 参数 | 作用                           |\\r\\n| ---- | ------------------------------ |\\r\\n| m    | 查看全部可用的参数（帮忙信息） |\\r\\n| n    | 添加新的分区                   |\\r\\n| d    | 删除某个分区信息               |\\r\\n| l    | 列出所有可用的分区类型         |\\r\\n| t    \"},{\"url\":\"/web开发/运维/Nginx/\",\"frontmatter\":{\"date\":\"2025-04-20 23:22:47\",\"title\":\"index\",\"permalink\":\"/pages/0e6ca2\",\"categories\":[\"web开发\",\"运维\",\"Nginx\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:22:47\",\"excerpt\":\"\",\"capture\":\"前置条件\\r\\n\\r\\n 配置静态 IP\\r\\n\\r\\n```bash\\r\\n 一键配置 静态IP地址 并 启用\\r\\nnmcli c add type ethernet con-name \\\"static_conn\\\" ifname ens160 ipv4.addresses 192.168.232.20/24 gw4 192.168.232.2 ipv4.dns \\\"8.8.8.8 114.114.114.114\\\" ipv4.method manual autoconnect yes && nmcli c up static_conn\\r\\n```\\r\\n\\r\\n 关闭防火墙\\r\\n\\r\\n```bash\\r\\n$ systemctl stop firewalld       本次开机关闭防火墙（重新开机防火墙又会启动）\\r\\n$ systemctl disable firewalld    永久禁用防火墙（以后不会再自动启动了）\\r\\n\\r\\n$ \"},{\"url\":\"/web开发/运维/Linux/Linux环境安装\",\"frontmatter\":{\"date\":\"2025-04-20 23:18:51\",\"title\":\"Linux环境安装\",\"permalink\":\"/pages/21e258\",\"categories\":[\"web开发\",\"运维\",\"Linux\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Linux环境安装\",\"date\":\"2025-04-20 23:18:51\",\"excerpt\":\"\",\"capture\":\"Linux安装运行环境\\r\\n\\r\\n 安装基础工具\\r\\n\\r\\n```bash\\r\\n$ yum install -y make gcc patch libffi-devel python3-devel zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel xz-devel lrzsz tree zip unzip\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n 1、安装 nginx\\r\\n\\r\\n\\r\\n\\r\\n (1)安装 nginx\\r\\n\\r\\n```bash\\r\\n$ yum install -y nginx\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n (2)配置 `/etc/nginx/nginx.conf`\\r\\n\\r\\n- 开放静态资源\\r\\n- 配置反向代理\\r\\n- ...\\r\\n\\r\\n\\r\\n\\r\\n (3)验证配置有效性\\r\\n\\r\\n```b\"},{\"url\":\"/web开发/运维/服务器/\",\"frontmatter\":{\"date\":\"2025-04-20 23:12:29\",\"title\":\"index\",\"permalink\":\"/pages/fec2e6\",\"categories\":[\"web开发\",\"运维\",\"服务器\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:12:29\",\"excerpt\":\"\",\"capture\":\"云计算\\r\\n\\r\\n 一、Linux 下载与安装\\r\\n\\r\\n::: tip 推荐：\\r\\n\\r\\n`RHEL 下载`：登陆红帽官网后, 访问该网址跳转到下载镜像界面\\r\\n\\r\\n`RHEL8 安装` 参考博客：教程\\r\\n\\r\\n:::\\r\\n\\r\\n 二、包管理器配置\\r\\n\\r\\n RHEL 注册\\r\\n\\r\\n::: info\\r\\n\\r\\n-   去官网注册\\r\\n\\r\\n:::\\r\\n\\r\\n 配置 `yum 官方仓库源`\\r\\n\\r\\n```bash\\r\\n 终端登录红帽子账号\\r\\n$ subscription-manager register --username=账户名称 --password='账户对应的密码' --auto-attach\\r\\n 查看仓库名称\\r\\n$ yum repolist\\r\\n 配置好仓库后，下载安装这个软件，便于后面Linux服务器和本地window电脑进行上传和下载\\r\\n$ yum install -y lrzsz\\r\\n```\\r\\n\\r\\n 三、远程登录工\"},{\"url\":\"/web开发/运维/服务器/搭建服务器\",\"frontmatter\":{\"date\":\"2025-04-20 23:12:24\",\"title\":\"搭建服务器\",\"permalink\":\"/pages/bcf0fc\",\"categories\":[\"web开发\",\"运维\",\"服务器\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"搭建服务器\",\"date\":\"2025-04-20 23:12:24\",\"excerpt\":\"\",\"capture\":\"搭建自己的服务器\\r\\n\\r\\n\\r\\n\\r\\n 1. 购买服务器\\r\\n\\r\\n\\r\\n\\r\\n::: tip 提示\\r\\n\\r\\n- 自己选择一个喜欢的或者合适的服务器运营商，购买他们的`Linux`服务器，像阿里云提供了以学生身份可以免费申请`3个月`的服务器试用，跟正常购买的服务器差不多，但是性能肯定不是特别好咯，毕竟是免费的嘛，但是个人的使用一般没问题，比如托管静态资源、云服务器学习使用等，这些都能够满足了。等学会了，再根据以后自己的项目性能要求，购买性能更加优质的服务器就行了。遇到一些促销日也可以看看官方是否有便宜点的服务器促销，低价促销的时候，也可以便宜的购买一个几年的来使用。哈哈 :smile:\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n::: warning 注意\\r\\n\\r\\n- 服务器购买了之后，会分配给你公网访问服务器的IP，此时你只需要在服务器上安装好Nginx、Apache之类的服务器软件，简单的启动、配置一下，那么就可以\"},{\"url\":\"/web开发/后端/MySQL/\",\"frontmatter\":{\"date\":\"2025-04-20 23:07:19\",\"title\":\"index\",\"permalink\":\"/pages/0a9104\",\"categories\":[\"web开发\",\"后端\",\"MySQL\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:07:19\",\"excerpt\":\"\",\"capture\":\"MySQL 数据库\\r\\n\\r\\n 基础篇\\r\\n\\r\\n MySQL 概述\\r\\n\\r\\n-   数据库相关概念：\\r\\n\\r\\n|      名称      |                                 全称                                 |               简称               |\\r\\n| :------------: | :------------------------------------------------------------------: | :------------------------------: |\\r\\n|     数据库     |               `存储数据的仓库`，数据是有组织的进行存储               |           DataBase(DB)           |\\r\\n\"},{\"url\":\"/web开发/后端/Python/QQ微信消息轰炸\",\"frontmatter\":{\"date\":\"2025-04-20 23:04:51\",\"title\":\"QQ微信消息轰炸\",\"permalink\":\"/pages/9abc85\",\"categories\":[\"web开发\",\"后端\",\"Python\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"QQ微信消息轰炸\",\"date\":\"2025-04-20 23:04:51\",\"excerpt\":\"\",\"capture\":\"消息轰炸\\r\\n\\r\\n 安装依赖\\r\\n\\r\\n```bash\\r\\n$ pip install pyautogui\\r\\n```\\r\\n\\r\\n 程序启动\\r\\n\\r\\n```python\\r\\npython message.py\\r\\n```\\r\\n\\r\\n 源代码\\r\\n\\r\\n```python\\r\\nimport time\\r\\n\\r\\nimport pyautogui\\r\\nimport pyperclip\\r\\n\\r\\ndef send_message(message, interval=1):\\r\\n    pyperclip.copy(message)\\r\\n    pyautogui.hotkey('ctrl', 'v')\\r\\n    pyautogui.press('enter')\\r\\n    time.sleep(interval)\\r\\n\\r\\n\\r\\ndef bomber(file_path='./messages.txt'):\\r\\n    \\\"\\\"\\\"\\r\\n    在微信、QQ\"},{\"url\":\"/web开发/开发者工具/Git/\",\"frontmatter\":{\"date\":\"2025-04-20 22:59:44\",\"title\":\"index\",\"permalink\":\"/pages/f4f5d9\",\"categories\":[\"web开发\",\"开发者工具\",\"Git\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 22:59:44\",\"excerpt\":\"\",\"capture\":\"Git 版本控制系统\\r\\n\\r\\n::: tip 概述\\r\\n\\r\\n`Git`是一个免费的、开源的分布式版本控制系统，可以快速高效地处理从小型到大型的各种项目。\\r\\n\\r\\n`Git`易于学习，内存占用小，性能极快。它具有廉价的本地库，方便的暂存区域和多个工作流分支等特性。\\r\\n\\r\\n`Git工具下载`：推荐前往官网\\r\\n\\r\\n:::\\r\\n\\r\\n Git 本地管理\\r\\n\\r\\n 设置签名\\r\\n\\r\\n```bash\\r\\n$ git config --global user.name \\\"用户名\\\"\\t\\t 设置用户签名\\r\\n$ git config --global user.email \\\"邮箱\\\"\\t\\t  设置邮箱签名\\r\\n```\\r\\n\\r\\n 查看特定级别的配置信息\\r\\n\\r\\n 查看全局配置\\r\\n\\r\\n\\r\\n\\r\\n```bash\\r\\n$ git config --global --list\\r\\n```\\r\\n\\r\\n 查看特定配置项的值\\r\\n\\r\\n```bash\\r\\n$ git \"}],\"MongoDB\":[{\"url\":\"/web开发/后端/MongoDB/\",\"frontmatter\":{\"date\":\"2025-04-22 18:33:06\",\"title\":\"index\",\"permalink\":\"/pages/634615\",\"categories\":[\"web开发\",\"后端\",\"MongoDB\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-22 18:33:06\",\"excerpt\":\"\",\"capture\":\"MongoDB 快速入门\\n 安装\\n\\n```bash\\n 安装 mongodb server\\n$ wget https://repo.mongodb.org/yum/redhat/8/mongodb-org/8.0/x86_64/RPMS/mongodb-org-server-8.0.8-1.el8.x86_64.rpm\\n$ du -sh ./*                       可以查看一下文件大小\\n$ rpm -ivh ./mongodb-org-server-8.0.8-1.el8.x86_64.rpm\\n$ systemctl status mongod          查看服务状态\\n$ systemctl enable mongod --now    设置开机自启\\n 安装命令行工具 cli：https://www.mongodb.com/try/download/shell\"}],\"Python\":[{\"url\":\"/web开发/后端/Python/Django快速入门教程\",\"frontmatter\":{\"date\":\"2025-04-21 18:17:55\",\"title\":\"Django快速入门教程\",\"permalink\":\"/pages/5e2304\",\"categories\":[\"后端\",\"Python\"],\"tags\":[\"Django\"],\"description\":\"Django 哲学宗旨：懂得越多，写得越少\",\"coverImg\":\"/screenshots/Python/Django快速入门教程.png\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Django快速入门教程\",\"date\":\"2025-04-21 18:17:55\",\"excerpt\":\"\",\"capture\":\"Django 快速入门\\n 安装 Django\\n```bash\\n$ pip install django\\n```\\n 创建项目\\n```bash\\n$ mkdir &lt;项目名称\\n$ django-admin startproject [&lt;settings&gt;] &lt;项目名称&gt;    settings 是配置目录名称。如果不指定，配置目录的名称与项目名称一致\\n$ cd &lt;项目名称&gt;\\n```\\n- `manage.py`：管理 `Django` 项目的命令行工具。\\n- `settings/`：项目系统配置目录。\\n- `settings/settings.py`：`Django` 项目的配置文件。\\n- `settings/urls.py`：Django 项目的 URL 声明，就像你网站的 `路由` 。\\n- `settings/asgi.py`：项目运行在 `ASGI` \"},{\"url\":\"/web开发/后端/Python/\",\"frontmatter\":{\"date\":\"2025-04-21 00:51:35\",\"title\":\"index\",\"permalink\":\"/pages/de8c40\",\"categories\":[\"web开发\",\"后端\",\"Python\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-21 00:51:35\",\"excerpt\":\"\",\"capture\":\"Python 基础到高级\\r\\n\\r\\n::: tip 基础教程\\r\\n\\r\\n-   推荐 1：Python 官网\\r\\n\\r\\n-   推荐 2：极客教程\\r\\n\\r\\n-   推荐 3：清华源镜像站\\r\\n\\r\\n国内下载镜像：\\r\\n\\r\\n-   清华：https://pypi.tuna.tsinghua.edu.cn/simple\\r\\n-   阿里云：http://mirrors.aliyun.com/pypi/simple/\\r\\n-   豆瓣：https://pypi.douban.com/simple/\\r\\n-   中国科技大学：https://pypi.mirrors.ustc.edu.cn/simple/\\r\\n-   华中理工大学：http://pypi.hustunique.com/\\r\\n-   山东理工大学：http://pypi.sdutLinux.org/\\r\\n\\r\\n设置镜像源的命令：\\r\\n\\r\\n::: code-group\\r\"},{\"url\":\"/web开发/后端/Python/RestFramework\",\"frontmatter\":{\"date\":\"2025-04-21 00:50:31\",\"title\":\"RestFramework\",\"permalink\":\"/pages/baaa17\",\"categories\":[\"web开发\",\"后端\",\"Python\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"RestFramework\",\"date\":\"2025-04-21 00:50:31\",\"excerpt\":\"\",\"capture\":\"DRF 框架\\r\\n\\r\\n::: tip 介绍\\r\\n\\r\\n-   推荐 1：前往官方文档\\r\\n\\r\\n-   推荐 2: bilibili 教程\\r\\n\\r\\n-   推荐 3：深入理解什么是 Restful 规范\\r\\n    :::\\r\\n\\r\\n\\r\\n\\r\\n Restful API 最佳实践\\r\\n\\r\\n-   协议\\r\\n-   域名\\r\\n-   版本\\r\\n-   路径\\r\\n-   HTTP 动词\\r\\n-   过滤信息(Filtering)\\r\\n-   状态码(Status Codes)\\r\\n-   错误处理(Error handling)\\r\\n-   返回结果\\r\\n-   Hypermedia API\\r\\n\\r\\n HTTP 请求方法详解\\r\\n\\r\\n-   `GET (SELECT)`: 从服务器取出资源(一项或多项)\\r\\n-   `POST (CREATE)`: 在服务器新建一个资源\\r\\n-   `PUT (UPDATE)`: 在服务器更新资源(客户端提供\"},{\"url\":\"/web开发/后端/Python/QQ微信消息轰炸\",\"frontmatter\":{\"date\":\"2025-04-20 23:04:51\",\"title\":\"QQ微信消息轰炸\",\"permalink\":\"/pages/9abc85\",\"categories\":[\"web开发\",\"后端\",\"Python\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"QQ微信消息轰炸\",\"date\":\"2025-04-20 23:04:51\",\"excerpt\":\"\",\"capture\":\"消息轰炸\\r\\n\\r\\n 安装依赖\\r\\n\\r\\n```bash\\r\\n$ pip install pyautogui\\r\\n```\\r\\n\\r\\n 程序启动\\r\\n\\r\\n```python\\r\\npython message.py\\r\\n```\\r\\n\\r\\n 源代码\\r\\n\\r\\n```python\\r\\nimport time\\r\\n\\r\\nimport pyautogui\\r\\nimport pyperclip\\r\\n\\r\\ndef send_message(message, interval=1):\\r\\n    pyperclip.copy(message)\\r\\n    pyautogui.hotkey('ctrl', 'v')\\r\\n    pyautogui.press('enter')\\r\\n    time.sleep(interval)\\r\\n\\r\\n\\r\\ndef bomber(file_path='./messages.txt'):\\r\\n    \\\"\\\"\\\"\\r\\n    在微信、QQ\"}],\"前端\":[{\"url\":\"/web开发/前端/JavaScript/Canvas\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:32\",\"title\":\"Canvas\",\"permalink\":\"/pages/60efec\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Canvas\",\"date\":\"2025-04-20 23:56:32\",\"excerpt\":\"\",\"capture\":\"Canvas 绘图\\r\\n\\r\\n::: tip\\r\\n\\r\\n-   推荐：前往优秀文档\\r\\n-   参考博客：菜鸟教程\\r\\n-   核心思想：`canvas`是基于状态的方式进行绘图的\\r\\n-   `canvas`坐标空间：以画布左上角为原点，向右为`x正半轴`，向下为`y正半轴`，以`1px`为单位距离\\r\\n\\r\\n:::\\r\\n\\r\\n 基础\\r\\n\\r\\n 画布默认大小\\r\\n\\r\\n-   `canvas`画布的默认大小是 `宽 x 高 = 300 x 150`\\r\\n\\r\\n 获取画布\\r\\n\\r\\n```ts\\r\\n// 获取画布元素\\r\\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\\r\\n// 获取上下文对象: context\\r\\nconst ctx = canvas.getContext('2d') as CanvasRenderingContext2D\\r\"},{\"url\":\"/web开发/前端/JavaScript/事件循环\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:32\",\"title\":\"事件循环\",\"permalink\":\"/pages/4c45cd\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"事件循环\",\"date\":\"2025-04-20 23:56:32\",\"excerpt\":\"\",\"capture\":\"事件循环原理\\r\\n\\r\\n::: tip\\r\\n\\r\\n\\r\\n\\r\\n:::\\r\\n\\r\\n 事件循环概述\\r\\n\\r\\n::: info\\r\\n\\r\\n&gt; 在事件循环中，当主线程执行完当前的同步任务后，会检查事件队列中是否有待处理的事件。如果有，主线程会取出事件并执行对应的回调函数。这个循环的过程被称为事件循环（Event Loop），它由主线程和任务队列两部分组成。主线程负责执行同步任务，而异步任务则通过任务队列进行处理。这种机制保证了异步任务在适当的时机能够插入执行，从而实现了 JavaScript 的`非阻塞异步执行`。\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n事件循环流程如下：\\r\\n\\r\\n&gt; 1. 主线程读取 JavaScript 代码，形成相应的堆和执行栈。\\r\\n&gt; 2. 当主线程遇到异步任务时，将其委托给对应的异步进程（如 Web API）处理。\\r\\n&gt; 3. 异步任务完成后，将相应的回调函数推入任务队列。\\r\\n&g\"},{\"url\":\"/web开发/前端/JavaScript/原型链\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:32\",\"title\":\"原型链\",\"permalink\":\"/pages/17549b\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"原型链\",\"date\":\"2025-04-20 23:56:32\",\"excerpt\":\"\",\"capture\":\"原型链\\r\\n\\r\\n::: info 说明\\r\\n\\r\\n1. 原型：函数都有prototype属性，称之为原型，也称为原型对象\\r\\n\\r\\n    - 原型可以放一些属性和方法，共享给实例对象使用\\r\\n    - 原型可以做继承\\r\\n\\r\\n2. 原型链：对象都有 \\\\_\\\\_proto\\\\_\\\\_ 属性，这个属性指向它的原型对象，原型对象也是对象，也有自己的 \\\\_\\\\_proto\\\\_\\\\_ 属性，指向原型对象的原型对象，这样一层一层形成的链式结构称为原型链，最顶层找不到则返回 _null_。\\r\\n   :::\\r\\n\\r\\n 类\\r\\n\\r\\n::: info 概念\\r\\n类: 类是一种创建对象的蓝图或模板, 在 js 中, 类本质还是一个构造函数。\\r\\n:::\\r\\n\\r\\n 构造器(也称 `constructor` 或 `构造函数`)\\r\\n\\r\\n::: info 概念\\r\\n构造函数: 用 new 来执行的函数。\\r\\n:::\\r\\n::: tip 介绍\\r\\n原本以前是\"},{\"url\":\"/web开发/前端/JavaScript/JavaScript常识\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"JavaScript常识\",\"permalink\":\"/pages/f7e507\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"JavaScript常识\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"JavaScript常识整理\\r\\n\\r\\n nodejs 默认采用 commonjs 模块化规范\\r\\n\\r\\n::: tip 科普\\r\\n- (1)每个模块都Node.js 应用由模块组成，每个文件就是一个模块，有自己的作用域。\\r\\n- (2)在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。\\r\\n- (3)每个模块内部有两个变量可以使用，`require` 和 `module`。`require` 用来加载某个模块，`module` 代表当前模块，是一个对象，保存了当前模块需要导出的信息。\\r\\n- (4)`exports` 是 `module` 上的一个属性，保存了当前模块要导出的接口或者变量，使用 require 加载的某个模块获取到的值就是那个模块使用 `exports` 导出的值。\\r\\n- (5)注意: exports 和 module.exports 是指向同一个对象。最终`requir\"},{\"url\":\"/web开发/前端/JavaScript/Promise\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"Promise\",\"permalink\":\"/pages/233f86\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Promise\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"深入学习 Promise\\r\\n\\r\\n Promise 是什么？\\r\\n\\r\\n1. 抽象表达\\r\\n  - ES6 规范\\r\\n  - JS进行异步变成的新解决方案（旧方案是回调函数）\\r\\n2. 具体表达\\r\\n   - 从语法上来说：Promise是一个构造函数\\r\\n   - 从功能上来说：Promise对象用来封装一个一步操作并可以获取其成功或失败的结果值\\r\\n\\r\\n\\r\\n&gt; * fs文件操作\\r\\n&gt; * 数据库操作\\r\\n&gt; * ajax\\r\\n&gt; * 定时器\\r\\n&gt; * ...\\r\\n\\r\\n\\r\\n 为什么要用Promise？\\r\\n- 指定回调函数的方式更加灵活\\r\\n- 支持链式调用，可以解决回调地域问题\\r\\n\\r\\n Promise的状态\\r\\n1. pending （待定状态）\\r\\n2. pending 变为 `fulfilled`\\r\\n3. pending 变为 `rejected`\\r\\n\\r\\n&gt; 说明：只有这三种，\"},{\"url\":\"/web开发/前端/JavaScript/TypeScript\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"TypeScript\",\"permalink\":\"/pages/3b643f\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"TypeScript\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"TypeScript 学习笔记\\r\\n\\r\\n\\r\\n&gt;\\r\\n&gt; - 中文学习网: TypeScript\\r\\n&gt; \\r\\n&gt; - 推荐阅读：jsdocs文档\\r\\n&gt; \\r\\n&gt; - 推荐阅读：npm包管理器\\r\\n\\r\\n::: warning 注意\\r\\n- 记住：类型注释永远不会改变程序的运行时行为。\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n- `tsc`命令行编译选项\\r\\n\\r\\n| 参数              |                               功能 |\\r\\n| :---------------- | ---------------------------------: |\\r\\n| `--noEmitOnError` | TS代码有错误时，不要编译生成JS文件 |\\r\\n| `--target`        |    编译生成JS的目标版本，默认`ES5` |\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"},{\"url\":\"/web开发/前端/JavaScript/WebAPI\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"WebAPI\",\"permalink\":\"/pages/3faec5\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"WebAPI\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"常用 Web API\\r\\n\\r\\n 电池\\r\\n\\r\\n\\r\\n&gt;\\r\\n&gt; `navigator.getBattery()` 提供有关系统电池电量的信息。\\r\\n&gt;\\r\\n&gt; 事件\\r\\n&gt;\\r\\n&gt; -   `chargingchange`：当电池充电状态（charging 属性）更新时触发。\\r\\n&gt; -   `chargingtimechange`：当电池充电时间（chargingTime 属性）更新时触发。\\r\\n&gt; -   `dischargingtimechange`：当电池续航时间（dischargingTime 属性）更新时触发。\\r\\n&gt; -   `levelchange`：当电池电量（level 属性）更新时触发。\\r\\n\\r\\n::: code-group\\r\\n\\r\\n```ts [电池信息]\\r\\nnavigator.getBattery().then((battery) =&\"},{\"url\":\"/web开发/前端/JavaScript/\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"index\",\"permalink\":\"/pages/81bda3\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"JS 的使用技巧\\r\\n\\r\\n `var`、`let`、`const`区别\\r\\n\\r\\n::: tip 详解\\r\\n\\r\\n| 关键字  | 作用及注意事项                                                                                                                         |\\r\\n| ------- | -------------------------------------------------------------------------------------------------------------------------------------- |\\r\\n| `var`   | 定义`具有穿透作用域的`（全局）变量，不管在哪里定义，都会变成全局作用域的变量，定义后可以修\"},{\"url\":\"/web开发/前端/JavaScript/高级核心概念\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"高级核心概念\",\"permalink\":\"/pages/09b3f6\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"高级核心概念\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"JS 高级核心概念\\r\\n\\r\\n 事件循环原理\\r\\n\\r\\n::: tip\\r\\n\\r\\n\\r\\n\\r\\n:::\\r\\n\\r\\n 事件循环概述\\r\\n\\r\\n::: info\\r\\n\\r\\n&gt; 在事件循环中，当主线程执行完当前的同步任务后，会检查事件队列中是否有待处理的事件。如果有，主线程会取出事件并执行对应的回调函数。这个循环的过程被称为事件循环（Event Loop），它由主线程和任务队列两部分组成。主线程负责执行同步任务，而异步任务则通过任务队列进行处理。这种机制保证了异步任务在适当的时机能够插入执行，从而实现了 JavaScript 的`非阻塞异步执行`。\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n事件循环流程如下：\\r\\n\\r\\n&gt; 1. 主线程读取 JavaScript 代码，形成相应的堆和执行栈。\\r\\n&gt; 2. 当主线程遇到异步任务时，将其委托给对应的异步进程（如 Web API）处理。\\r\\n&gt; 3. 异步任务完成后，将相应的回\"}],\"JavaScript\":[{\"url\":\"/web开发/前端/JavaScript/Canvas\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:32\",\"title\":\"Canvas\",\"permalink\":\"/pages/60efec\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Canvas\",\"date\":\"2025-04-20 23:56:32\",\"excerpt\":\"\",\"capture\":\"Canvas 绘图\\r\\n\\r\\n::: tip\\r\\n\\r\\n-   推荐：前往优秀文档\\r\\n-   参考博客：菜鸟教程\\r\\n-   核心思想：`canvas`是基于状态的方式进行绘图的\\r\\n-   `canvas`坐标空间：以画布左上角为原点，向右为`x正半轴`，向下为`y正半轴`，以`1px`为单位距离\\r\\n\\r\\n:::\\r\\n\\r\\n 基础\\r\\n\\r\\n 画布默认大小\\r\\n\\r\\n-   `canvas`画布的默认大小是 `宽 x 高 = 300 x 150`\\r\\n\\r\\n 获取画布\\r\\n\\r\\n```ts\\r\\n// 获取画布元素\\r\\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\\r\\n// 获取上下文对象: context\\r\\nconst ctx = canvas.getContext('2d') as CanvasRenderingContext2D\\r\"},{\"url\":\"/web开发/前端/JavaScript/事件循环\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:32\",\"title\":\"事件循环\",\"permalink\":\"/pages/4c45cd\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"事件循环\",\"date\":\"2025-04-20 23:56:32\",\"excerpt\":\"\",\"capture\":\"事件循环原理\\r\\n\\r\\n::: tip\\r\\n\\r\\n\\r\\n\\r\\n:::\\r\\n\\r\\n 事件循环概述\\r\\n\\r\\n::: info\\r\\n\\r\\n&gt; 在事件循环中，当主线程执行完当前的同步任务后，会检查事件队列中是否有待处理的事件。如果有，主线程会取出事件并执行对应的回调函数。这个循环的过程被称为事件循环（Event Loop），它由主线程和任务队列两部分组成。主线程负责执行同步任务，而异步任务则通过任务队列进行处理。这种机制保证了异步任务在适当的时机能够插入执行，从而实现了 JavaScript 的`非阻塞异步执行`。\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n事件循环流程如下：\\r\\n\\r\\n&gt; 1. 主线程读取 JavaScript 代码，形成相应的堆和执行栈。\\r\\n&gt; 2. 当主线程遇到异步任务时，将其委托给对应的异步进程（如 Web API）处理。\\r\\n&gt; 3. 异步任务完成后，将相应的回调函数推入任务队列。\\r\\n&g\"},{\"url\":\"/web开发/前端/JavaScript/原型链\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:32\",\"title\":\"原型链\",\"permalink\":\"/pages/17549b\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"原型链\",\"date\":\"2025-04-20 23:56:32\",\"excerpt\":\"\",\"capture\":\"原型链\\r\\n\\r\\n::: info 说明\\r\\n\\r\\n1. 原型：函数都有prototype属性，称之为原型，也称为原型对象\\r\\n\\r\\n    - 原型可以放一些属性和方法，共享给实例对象使用\\r\\n    - 原型可以做继承\\r\\n\\r\\n2. 原型链：对象都有 \\\\_\\\\_proto\\\\_\\\\_ 属性，这个属性指向它的原型对象，原型对象也是对象，也有自己的 \\\\_\\\\_proto\\\\_\\\\_ 属性，指向原型对象的原型对象，这样一层一层形成的链式结构称为原型链，最顶层找不到则返回 _null_。\\r\\n   :::\\r\\n\\r\\n 类\\r\\n\\r\\n::: info 概念\\r\\n类: 类是一种创建对象的蓝图或模板, 在 js 中, 类本质还是一个构造函数。\\r\\n:::\\r\\n\\r\\n 构造器(也称 `constructor` 或 `构造函数`)\\r\\n\\r\\n::: info 概念\\r\\n构造函数: 用 new 来执行的函数。\\r\\n:::\\r\\n::: tip 介绍\\r\\n原本以前是\"},{\"url\":\"/web开发/前端/JavaScript/JavaScript常识\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"JavaScript常识\",\"permalink\":\"/pages/f7e507\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"JavaScript常识\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"JavaScript常识整理\\r\\n\\r\\n nodejs 默认采用 commonjs 模块化规范\\r\\n\\r\\n::: tip 科普\\r\\n- (1)每个模块都Node.js 应用由模块组成，每个文件就是一个模块，有自己的作用域。\\r\\n- (2)在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。\\r\\n- (3)每个模块内部有两个变量可以使用，`require` 和 `module`。`require` 用来加载某个模块，`module` 代表当前模块，是一个对象，保存了当前模块需要导出的信息。\\r\\n- (4)`exports` 是 `module` 上的一个属性，保存了当前模块要导出的接口或者变量，使用 require 加载的某个模块获取到的值就是那个模块使用 `exports` 导出的值。\\r\\n- (5)注意: exports 和 module.exports 是指向同一个对象。最终`requir\"},{\"url\":\"/web开发/前端/JavaScript/Promise\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"Promise\",\"permalink\":\"/pages/233f86\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Promise\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"深入学习 Promise\\r\\n\\r\\n Promise 是什么？\\r\\n\\r\\n1. 抽象表达\\r\\n  - ES6 规范\\r\\n  - JS进行异步变成的新解决方案（旧方案是回调函数）\\r\\n2. 具体表达\\r\\n   - 从语法上来说：Promise是一个构造函数\\r\\n   - 从功能上来说：Promise对象用来封装一个一步操作并可以获取其成功或失败的结果值\\r\\n\\r\\n\\r\\n&gt; * fs文件操作\\r\\n&gt; * 数据库操作\\r\\n&gt; * ajax\\r\\n&gt; * 定时器\\r\\n&gt; * ...\\r\\n\\r\\n\\r\\n 为什么要用Promise？\\r\\n- 指定回调函数的方式更加灵活\\r\\n- 支持链式调用，可以解决回调地域问题\\r\\n\\r\\n Promise的状态\\r\\n1. pending （待定状态）\\r\\n2. pending 变为 `fulfilled`\\r\\n3. pending 变为 `rejected`\\r\\n\\r\\n&gt; 说明：只有这三种，\"},{\"url\":\"/web开发/前端/JavaScript/TypeScript\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"TypeScript\",\"permalink\":\"/pages/3b643f\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"TypeScript\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"TypeScript 学习笔记\\r\\n\\r\\n\\r\\n&gt;\\r\\n&gt; - 中文学习网: TypeScript\\r\\n&gt; \\r\\n&gt; - 推荐阅读：jsdocs文档\\r\\n&gt; \\r\\n&gt; - 推荐阅读：npm包管理器\\r\\n\\r\\n::: warning 注意\\r\\n- 记住：类型注释永远不会改变程序的运行时行为。\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n- `tsc`命令行编译选项\\r\\n\\r\\n| 参数              |                               功能 |\\r\\n| :---------------- | ---------------------------------: |\\r\\n| `--noEmitOnError` | TS代码有错误时，不要编译生成JS文件 |\\r\\n| `--target`        |    编译生成JS的目标版本，默认`ES5` |\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"},{\"url\":\"/web开发/前端/JavaScript/WebAPI\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"WebAPI\",\"permalink\":\"/pages/3faec5\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"WebAPI\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"常用 Web API\\r\\n\\r\\n 电池\\r\\n\\r\\n\\r\\n&gt;\\r\\n&gt; `navigator.getBattery()` 提供有关系统电池电量的信息。\\r\\n&gt;\\r\\n&gt; 事件\\r\\n&gt;\\r\\n&gt; -   `chargingchange`：当电池充电状态（charging 属性）更新时触发。\\r\\n&gt; -   `chargingtimechange`：当电池充电时间（chargingTime 属性）更新时触发。\\r\\n&gt; -   `dischargingtimechange`：当电池续航时间（dischargingTime 属性）更新时触发。\\r\\n&gt; -   `levelchange`：当电池电量（level 属性）更新时触发。\\r\\n\\r\\n::: code-group\\r\\n\\r\\n```ts [电池信息]\\r\\nnavigator.getBattery().then((battery) =&\"},{\"url\":\"/web开发/前端/JavaScript/\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"index\",\"permalink\":\"/pages/81bda3\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"JS 的使用技巧\\r\\n\\r\\n `var`、`let`、`const`区别\\r\\n\\r\\n::: tip 详解\\r\\n\\r\\n| 关键字  | 作用及注意事项                                                                                                                         |\\r\\n| ------- | -------------------------------------------------------------------------------------------------------------------------------------- |\\r\\n| `var`   | 定义`具有穿透作用域的`（全局）变量，不管在哪里定义，都会变成全局作用域的变量，定义后可以修\"},{\"url\":\"/web开发/前端/JavaScript/高级核心概念\",\"frontmatter\":{\"date\":\"2025-04-20 23:56:31\",\"title\":\"高级核心概念\",\"permalink\":\"/pages/09b3f6\",\"categories\":[\"web开发\",\"前端\",\"JavaScript\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"高级核心概念\",\"date\":\"2025-04-20 23:56:31\",\"excerpt\":\"\",\"capture\":\"JS 高级核心概念\\r\\n\\r\\n 事件循环原理\\r\\n\\r\\n::: tip\\r\\n\\r\\n\\r\\n\\r\\n:::\\r\\n\\r\\n 事件循环概述\\r\\n\\r\\n::: info\\r\\n\\r\\n&gt; 在事件循环中，当主线程执行完当前的同步任务后，会检查事件队列中是否有待处理的事件。如果有，主线程会取出事件并执行对应的回调函数。这个循环的过程被称为事件循环（Event Loop），它由主线程和任务队列两部分组成。主线程负责执行同步任务，而异步任务则通过任务队列进行处理。这种机制保证了异步任务在适当的时机能够插入执行，从而实现了 JavaScript 的`非阻塞异步执行`。\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n事件循环流程如下：\\r\\n\\r\\n&gt; 1. 主线程读取 JavaScript 代码，形成相应的堆和执行栈。\\r\\n&gt; 2. 当主线程遇到异步任务时，将其委托给对应的异步进程（如 Web API）处理。\\r\\n&gt; 3. 异步任务完成后，将相应的回\"}],\"视觉与设计\":[{\"url\":\"/视觉与设计/Adoube/PhotoShop/\",\"frontmatter\":{\"date\":\"2025-04-20 23:46:06\",\"title\":\"index\",\"permalink\":\"/pages/629cfa\",\"categories\":[\"视觉与设计\",\"Adoube\",\"PhotoShop\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:46:06\",\"excerpt\":\"\",\"capture\":\"PhotoShop\\r\\n\\r\\n 界面了解\\r\\n\\r\\n-   菜单栏\\r\\n-   工具栏\\r\\n-   属性栏\\r\\n-   状态栏\\r\\n-   工作区\\r\\n-   图层面板\\r\\n\\r\\n 常用快捷键\\r\\n\\r\\n| 快捷键                | 功能             | 转换功能 |\\r\\n| :-------------------- | ---------------- | -------- |\\r\\n| Ctrl + S              | 保存             |          |\\r\\n| Ctrl + Z              | 撤销             |          |\\r\\n| Ctrl + N              | 新建             |          |\\r\\n| ESC                   | 取消             \"}],\"Adoube\":[{\"url\":\"/视觉与设计/Adoube/PhotoShop/\",\"frontmatter\":{\"date\":\"2025-04-20 23:46:06\",\"title\":\"index\",\"permalink\":\"/pages/629cfa\",\"categories\":[\"视觉与设计\",\"Adoube\",\"PhotoShop\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:46:06\",\"excerpt\":\"\",\"capture\":\"PhotoShop\\r\\n\\r\\n 界面了解\\r\\n\\r\\n-   菜单栏\\r\\n-   工具栏\\r\\n-   属性栏\\r\\n-   状态栏\\r\\n-   工作区\\r\\n-   图层面板\\r\\n\\r\\n 常用快捷键\\r\\n\\r\\n| 快捷键                | 功能             | 转换功能 |\\r\\n| :-------------------- | ---------------- | -------- |\\r\\n| Ctrl + S              | 保存             |          |\\r\\n| Ctrl + Z              | 撤销             |          |\\r\\n| Ctrl + N              | 新建             |          |\\r\\n| ESC                   | 取消             \"}],\"PhotoShop\":[{\"url\":\"/视觉与设计/Adoube/PhotoShop/\",\"frontmatter\":{\"date\":\"2025-04-20 23:46:06\",\"title\":\"index\",\"permalink\":\"/pages/629cfa\",\"categories\":[\"视觉与设计\",\"Adoube\",\"PhotoShop\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:46:06\",\"excerpt\":\"\",\"capture\":\"PhotoShop\\r\\n\\r\\n 界面了解\\r\\n\\r\\n-   菜单栏\\r\\n-   工具栏\\r\\n-   属性栏\\r\\n-   状态栏\\r\\n-   工作区\\r\\n-   图层面板\\r\\n\\r\\n 常用快捷键\\r\\n\\r\\n| 快捷键                | 功能             | 转换功能 |\\r\\n| :-------------------- | ---------------- | -------- |\\r\\n| Ctrl + S              | 保存             |          |\\r\\n| Ctrl + Z              | 撤销             |          |\\r\\n| Ctrl + N              | 新建             |          |\\r\\n| ESC                   | 取消             \"}],\"人工智能\":[{\"url\":\"/前沿领域/人工智能/Ollama/\",\"frontmatter\":{\"date\":\"2025-04-20 23:43:03\",\"title\":\"index\",\"permalink\":\"/pages/066462\",\"categories\":[\"人工智能\"],\"tags\":[\"Ollama\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:43:03\",\"excerpt\":\"\",\"capture\":\"Ollama 开源大模型\\r\\n\\r\\n::: info 文档\\r\\n\\r\\nOllama 是一个开源的大型语言模型（LLM）服务工具，它允许用户在本地机器上运行和部署大型语言模型。\\r\\n\\r\\n-   推荐 1：Ollama 官网\\r\\n-   推荐 2：Ollama Github 仓库\\r\\n\\r\\n:::\\r\\n\\r\\n::: tip 提示\\r\\n\\r\\n-   `ollama`命令行工具的使用很类似`docker`命令，通过 `olloma -h` 可查看帮助\\r\\n-   推荐阅读：博客文章\\r\\n\\r\\n:::\\r\\n\\r\\n 列出已有模型\\r\\n\\r\\n```bash\\r\\n$ ollama list\\r\\n```\\r\\n\\r\\n 创建模型\\r\\n\\r\\n\\r\\n\\r\\n```bash\\r\\n$ ollama create mymodel -f ./Modelfile\\r\\n```\\r\\n\\r\\n 拉取模型\\r\\n\\r\\n&gt; 拉取本地已经存在的模型会自动比较两者差异进行更新\\r\\n\\r\\n```bash\\r\\n$\"}],\"VSCode\":[{\"url\":\"/web开发/开发者工具/VSCode/\",\"frontmatter\":{\"date\":\"2025-04-20 23:34:24\",\"title\":\"index\",\"permalink\":\"/pages/277ec2\",\"categories\":[\"web开发\",\"开发者工具\",\"VSCode\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:34:24\",\"excerpt\":\"\",\"capture\":\"VSCode 开发工具\\r\\n\\r\\n 一、常用插件\\r\\n\\r\\n|               插件名称               |                             功能                             |\\r\\n| :----------------------------------: | :----------------------------------------------------------: |\\r\\n|   Chinese (Simplified) (简体中文)    |              VSCode 界面简体中文插件(⭐⭐⭐⭐)               |\\r\\n|             Monokai Pro              |                  舒适美观的主题(⭐⭐⭐⭐⭐)         \"},{\"url\":\"/web开发/开发者工具/VSCode/我的配置\",\"frontmatter\":{\"date\":\"2025-04-20 23:33:51\",\"title\":\"我的配置\",\"permalink\":\"/pages/991531\",\"categories\":[\"web开发\",\"开发者工具\",\"VSCode\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"我的配置\",\"date\":\"2025-04-20 23:33:51\",\"excerpt\":\"\",\"capture\":\"一、VSCode 个性化配置\\r\\n\\r\\n 主题\\r\\n\\r\\n-   插件依赖：\\r\\n\\r\\n| 插件名称              | 插件描述           |\\r\\n| :-------------------- | ------------------ |\\r\\n| 🎨Monokai Pro         | 编辑器颜色主题     |\\r\\n| 📁Material Icon Theme | 文件、目录图标主题 |\\r\\n\\r\\n-   配置内容：\\r\\n\\r\\n```json\\r\\n/** settings.json */\\r\\n{\\r\\n    \\\"workbench.tree.indent\\\": 16, // 目录树视图缩进宽度\\r\\n    \\\"workbench.colorTheme\\\": \\\"Monokai Pro (Filter Spectrum)\\\", // 主题颜色\\r\\n    \\\"workbench.iconTheme\\\": \\\"\"}],\"运维\":[{\"url\":\"/web开发/运维/Linux/\",\"frontmatter\":{\"date\":\"2025-04-20 23:23:56\",\"title\":\"index\",\"permalink\":\"/pages/49880a\",\"categories\":[\"web开发\",\"运维\",\"Linux\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:23:56\",\"excerpt\":\"\",\"capture\":\"Linux 笔记\\r\\n\\r\\n\\r\\n\\r\\n 命令查询网站\\r\\n\\r\\n\\r\\n\\r\\n 单元五、磁盘管理\\r\\n\\r\\n&gt; 一定要注意关联上下文信息进行阅读、操作\\r\\n\\r\\n&gt; 推荐几个在主机上方便操作 Linux 服务器的软件：`XShell` 、 `WindTerm` 、 `FinalShell`\\r\\n\\r\\n 一、磁盘分区\\r\\n\\r\\n&gt; fdisk 命令中的参数及其作用\\r\\n\\r\\n| 参数 | 作用                           |\\r\\n| ---- | ------------------------------ |\\r\\n| m    | 查看全部可用的参数（帮忙信息） |\\r\\n| n    | 添加新的分区                   |\\r\\n| d    | 删除某个分区信息               |\\r\\n| l    | 列出所有可用的分区类型         |\\r\\n| t    \"},{\"url\":\"/web开发/运维/Nginx/\",\"frontmatter\":{\"date\":\"2025-04-20 23:22:47\",\"title\":\"index\",\"permalink\":\"/pages/0e6ca2\",\"categories\":[\"web开发\",\"运维\",\"Nginx\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:22:47\",\"excerpt\":\"\",\"capture\":\"前置条件\\r\\n\\r\\n 配置静态 IP\\r\\n\\r\\n```bash\\r\\n 一键配置 静态IP地址 并 启用\\r\\nnmcli c add type ethernet con-name \\\"static_conn\\\" ifname ens160 ipv4.addresses 192.168.232.20/24 gw4 192.168.232.2 ipv4.dns \\\"8.8.8.8 114.114.114.114\\\" ipv4.method manual autoconnect yes && nmcli c up static_conn\\r\\n```\\r\\n\\r\\n 关闭防火墙\\r\\n\\r\\n```bash\\r\\n$ systemctl stop firewalld       本次开机关闭防火墙（重新开机防火墙又会启动）\\r\\n$ systemctl disable firewalld    永久禁用防火墙（以后不会再自动启动了）\\r\\n\\r\\n$ \"},{\"url\":\"/web开发/运维/Linux/Linux环境安装\",\"frontmatter\":{\"date\":\"2025-04-20 23:18:51\",\"title\":\"Linux环境安装\",\"permalink\":\"/pages/21e258\",\"categories\":[\"web开发\",\"运维\",\"Linux\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Linux环境安装\",\"date\":\"2025-04-20 23:18:51\",\"excerpt\":\"\",\"capture\":\"Linux安装运行环境\\r\\n\\r\\n 安装基础工具\\r\\n\\r\\n```bash\\r\\n$ yum install -y make gcc patch libffi-devel python3-devel zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel xz-devel lrzsz tree zip unzip\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n 1、安装 nginx\\r\\n\\r\\n\\r\\n\\r\\n (1)安装 nginx\\r\\n\\r\\n```bash\\r\\n$ yum install -y nginx\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n (2)配置 `/etc/nginx/nginx.conf`\\r\\n\\r\\n- 开放静态资源\\r\\n- 配置反向代理\\r\\n- ...\\r\\n\\r\\n\\r\\n\\r\\n (3)验证配置有效性\\r\\n\\r\\n```b\"},{\"url\":\"/web开发/运维/服务器/\",\"frontmatter\":{\"date\":\"2025-04-20 23:12:29\",\"title\":\"index\",\"permalink\":\"/pages/fec2e6\",\"categories\":[\"web开发\",\"运维\",\"服务器\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:12:29\",\"excerpt\":\"\",\"capture\":\"云计算\\r\\n\\r\\n 一、Linux 下载与安装\\r\\n\\r\\n::: tip 推荐：\\r\\n\\r\\n`RHEL 下载`：登陆红帽官网后, 访问该网址跳转到下载镜像界面\\r\\n\\r\\n`RHEL8 安装` 参考博客：教程\\r\\n\\r\\n:::\\r\\n\\r\\n 二、包管理器配置\\r\\n\\r\\n RHEL 注册\\r\\n\\r\\n::: info\\r\\n\\r\\n-   去官网注册\\r\\n\\r\\n:::\\r\\n\\r\\n 配置 `yum 官方仓库源`\\r\\n\\r\\n```bash\\r\\n 终端登录红帽子账号\\r\\n$ subscription-manager register --username=账户名称 --password='账户对应的密码' --auto-attach\\r\\n 查看仓库名称\\r\\n$ yum repolist\\r\\n 配置好仓库后，下载安装这个软件，便于后面Linux服务器和本地window电脑进行上传和下载\\r\\n$ yum install -y lrzsz\\r\\n```\\r\\n\\r\\n 三、远程登录工\"},{\"url\":\"/web开发/运维/服务器/搭建服务器\",\"frontmatter\":{\"date\":\"2025-04-20 23:12:24\",\"title\":\"搭建服务器\",\"permalink\":\"/pages/bcf0fc\",\"categories\":[\"web开发\",\"运维\",\"服务器\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"搭建服务器\",\"date\":\"2025-04-20 23:12:24\",\"excerpt\":\"\",\"capture\":\"搭建自己的服务器\\r\\n\\r\\n\\r\\n\\r\\n 1. 购买服务器\\r\\n\\r\\n\\r\\n\\r\\n::: tip 提示\\r\\n\\r\\n- 自己选择一个喜欢的或者合适的服务器运营商，购买他们的`Linux`服务器，像阿里云提供了以学生身份可以免费申请`3个月`的服务器试用，跟正常购买的服务器差不多，但是性能肯定不是特别好咯，毕竟是免费的嘛，但是个人的使用一般没问题，比如托管静态资源、云服务器学习使用等，这些都能够满足了。等学会了，再根据以后自己的项目性能要求，购买性能更加优质的服务器就行了。遇到一些促销日也可以看看官方是否有便宜点的服务器促销，低价促销的时候，也可以便宜的购买一个几年的来使用。哈哈 :smile:\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n::: warning 注意\\r\\n\\r\\n- 服务器购买了之后，会分配给你公网访问服务器的IP，此时你只需要在服务器上安装好Nginx、Apache之类的服务器软件，简单的启动、配置一下，那么就可以\"}],\"Linux\":[{\"url\":\"/web开发/运维/Linux/\",\"frontmatter\":{\"date\":\"2025-04-20 23:23:56\",\"title\":\"index\",\"permalink\":\"/pages/49880a\",\"categories\":[\"web开发\",\"运维\",\"Linux\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:23:56\",\"excerpt\":\"\",\"capture\":\"Linux 笔记\\r\\n\\r\\n\\r\\n\\r\\n 命令查询网站\\r\\n\\r\\n\\r\\n\\r\\n 单元五、磁盘管理\\r\\n\\r\\n&gt; 一定要注意关联上下文信息进行阅读、操作\\r\\n\\r\\n&gt; 推荐几个在主机上方便操作 Linux 服务器的软件：`XShell` 、 `WindTerm` 、 `FinalShell`\\r\\n\\r\\n 一、磁盘分区\\r\\n\\r\\n&gt; fdisk 命令中的参数及其作用\\r\\n\\r\\n| 参数 | 作用                           |\\r\\n| ---- | ------------------------------ |\\r\\n| m    | 查看全部可用的参数（帮忙信息） |\\r\\n| n    | 添加新的分区                   |\\r\\n| d    | 删除某个分区信息               |\\r\\n| l    | 列出所有可用的分区类型         |\\r\\n| t    \"},{\"url\":\"/web开发/运维/Linux/Linux环境安装\",\"frontmatter\":{\"date\":\"2025-04-20 23:18:51\",\"title\":\"Linux环境安装\",\"permalink\":\"/pages/21e258\",\"categories\":[\"web开发\",\"运维\",\"Linux\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Linux环境安装\",\"date\":\"2025-04-20 23:18:51\",\"excerpt\":\"\",\"capture\":\"Linux安装运行环境\\r\\n\\r\\n 安装基础工具\\r\\n\\r\\n```bash\\r\\n$ yum install -y make gcc patch libffi-devel python3-devel zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel xz-devel lrzsz tree zip unzip\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n 1、安装 nginx\\r\\n\\r\\n\\r\\n\\r\\n (1)安装 nginx\\r\\n\\r\\n```bash\\r\\n$ yum install -y nginx\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n (2)配置 `/etc/nginx/nginx.conf`\\r\\n\\r\\n- 开放静态资源\\r\\n- 配置反向代理\\r\\n- ...\\r\\n\\r\\n\\r\\n\\r\\n (3)验证配置有效性\\r\\n\\r\\n```b\"}],\"Nginx\":[{\"url\":\"/web开发/运维/Nginx/\",\"frontmatter\":{\"date\":\"2025-04-20 23:22:47\",\"title\":\"index\",\"permalink\":\"/pages/0e6ca2\",\"categories\":[\"web开发\",\"运维\",\"Nginx\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:22:47\",\"excerpt\":\"\",\"capture\":\"前置条件\\r\\n\\r\\n 配置静态 IP\\r\\n\\r\\n```bash\\r\\n 一键配置 静态IP地址 并 启用\\r\\nnmcli c add type ethernet con-name \\\"static_conn\\\" ifname ens160 ipv4.addresses 192.168.232.20/24 gw4 192.168.232.2 ipv4.dns \\\"8.8.8.8 114.114.114.114\\\" ipv4.method manual autoconnect yes && nmcli c up static_conn\\r\\n```\\r\\n\\r\\n 关闭防火墙\\r\\n\\r\\n```bash\\r\\n$ systemctl stop firewalld       本次开机关闭防火墙（重新开机防火墙又会启动）\\r\\n$ systemctl disable firewalld    永久禁用防火墙（以后不会再自动启动了）\\r\\n\\r\\n$ \"}],\"服务器\":[{\"url\":\"/web开发/运维/服务器/\",\"frontmatter\":{\"date\":\"2025-04-20 23:12:29\",\"title\":\"index\",\"permalink\":\"/pages/fec2e6\",\"categories\":[\"web开发\",\"运维\",\"服务器\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:12:29\",\"excerpt\":\"\",\"capture\":\"云计算\\r\\n\\r\\n 一、Linux 下载与安装\\r\\n\\r\\n::: tip 推荐：\\r\\n\\r\\n`RHEL 下载`：登陆红帽官网后, 访问该网址跳转到下载镜像界面\\r\\n\\r\\n`RHEL8 安装` 参考博客：教程\\r\\n\\r\\n:::\\r\\n\\r\\n 二、包管理器配置\\r\\n\\r\\n RHEL 注册\\r\\n\\r\\n::: info\\r\\n\\r\\n-   去官网注册\\r\\n\\r\\n:::\\r\\n\\r\\n 配置 `yum 官方仓库源`\\r\\n\\r\\n```bash\\r\\n 终端登录红帽子账号\\r\\n$ subscription-manager register --username=账户名称 --password='账户对应的密码' --auto-attach\\r\\n 查看仓库名称\\r\\n$ yum repolist\\r\\n 配置好仓库后，下载安装这个软件，便于后面Linux服务器和本地window电脑进行上传和下载\\r\\n$ yum install -y lrzsz\\r\\n```\\r\\n\\r\\n 三、远程登录工\"},{\"url\":\"/web开发/运维/服务器/搭建服务器\",\"frontmatter\":{\"date\":\"2025-04-20 23:12:24\",\"title\":\"搭建服务器\",\"permalink\":\"/pages/bcf0fc\",\"categories\":[\"web开发\",\"运维\",\"服务器\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"搭建服务器\",\"date\":\"2025-04-20 23:12:24\",\"excerpt\":\"\",\"capture\":\"搭建自己的服务器\\r\\n\\r\\n\\r\\n\\r\\n 1. 购买服务器\\r\\n\\r\\n\\r\\n\\r\\n::: tip 提示\\r\\n\\r\\n- 自己选择一个喜欢的或者合适的服务器运营商，购买他们的`Linux`服务器，像阿里云提供了以学生身份可以免费申请`3个月`的服务器试用，跟正常购买的服务器差不多，但是性能肯定不是特别好咯，毕竟是免费的嘛，但是个人的使用一般没问题，比如托管静态资源、云服务器学习使用等，这些都能够满足了。等学会了，再根据以后自己的项目性能要求，购买性能更加优质的服务器就行了。遇到一些促销日也可以看看官方是否有便宜点的服务器促销，低价促销的时候，也可以便宜的购买一个几年的来使用。哈哈 :smile:\\r\\n\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n::: warning 注意\\r\\n\\r\\n- 服务器购买了之后，会分配给你公网访问服务器的IP，此时你只需要在服务器上安装好Nginx、Apache之类的服务器软件，简单的启动、配置一下，那么就可以\"}],\"MySQL\":[{\"url\":\"/web开发/后端/MySQL/\",\"frontmatter\":{\"date\":\"2025-04-20 23:07:19\",\"title\":\"index\",\"permalink\":\"/pages/0a9104\",\"categories\":[\"web开发\",\"后端\",\"MySQL\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:07:19\",\"excerpt\":\"\",\"capture\":\"MySQL 数据库\\r\\n\\r\\n 基础篇\\r\\n\\r\\n MySQL 概述\\r\\n\\r\\n-   数据库相关概念：\\r\\n\\r\\n|      名称      |                                 全称                                 |               简称               |\\r\\n| :------------: | :------------------------------------------------------------------: | :------------------------------: |\\r\\n|     数据库     |               `存储数据的仓库`，数据是有组织的进行存储               |           DataBase(DB)           |\\r\\n\"}],\"Git\":[{\"url\":\"/web开发/开发者工具/Git/\",\"frontmatter\":{\"date\":\"2025-04-20 22:59:44\",\"title\":\"index\",\"permalink\":\"/pages/f4f5d9\",\"categories\":[\"web开发\",\"开发者工具\",\"Git\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 22:59:44\",\"excerpt\":\"\",\"capture\":\"Git 版本控制系统\\r\\n\\r\\n::: tip 概述\\r\\n\\r\\n`Git`是一个免费的、开源的分布式版本控制系统，可以快速高效地处理从小型到大型的各种项目。\\r\\n\\r\\n`Git`易于学习，内存占用小，性能极快。它具有廉价的本地库，方便的暂存区域和多个工作流分支等特性。\\r\\n\\r\\n`Git工具下载`：推荐前往官网\\r\\n\\r\\n:::\\r\\n\\r\\n Git 本地管理\\r\\n\\r\\n 设置签名\\r\\n\\r\\n```bash\\r\\n$ git config --global user.name \\\"用户名\\\"\\t\\t 设置用户签名\\r\\n$ git config --global user.email \\\"邮箱\\\"\\t\\t  设置邮箱签名\\r\\n```\\r\\n\\r\\n 查看特定级别的配置信息\\r\\n\\r\\n 查看全局配置\\r\\n\\r\\n\\r\\n\\r\\n```bash\\r\\n$ git config --global --list\\r\\n```\\r\\n\\r\\n 查看特定配置项的值\\r\\n\\r\\n```bash\\r\\n$ git \"}]},\"tags\":{\"Nodejs\":[{\"url\":\"/web开发/后端/Nodejs/模块化规范演进\",\"frontmatter\":{\"date\":\"2025-04-19 22:02:31\",\"title\":\"模块化规范演进\",\"permalink\":\"/pages/d20f11\",\"categories\":[\"后端\"],\"tags\":[\"Nodejs\"],\"coverImg\":\"/screenshots/Nodejs/JS模块化规范演进.png\",\"top\":true,\"sticky\":1,\"description\":\"简明扼要的概述了 JS 模块化规范演进的整个历史\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"模块化规范演进\",\"date\":\"2025-04-19 22:02:31\",\"excerpt\":\"\",\"capture\":\"JS 模块化规范演进历史\\r\\n\\r\\n 1. 原始的 JS 模块化\\r\\n\\r\\n每个人编写的`模块`通过 `script`标签引入到`页面`中，然后就可以使用`模块`中的内容了。\\r\\n\\r\\n 2. CommonJS 模块化规范\\r\\n\\r\\n随着 `nodejs` 的诞生，为了解决在 `nodejs` 中的模块化问题，社区自发形成了很多的模块化方案，其中 `CommonJS` 模块化规范得到了时间的检验，并最终确定为主流的模块化规范，这是一套社区的模块化规范，使用 `commonjs` 规范编写的模块并不能直接在浏览器中运行。后来出现了`browserify`，`webpack` 等编译、打包工具，使得 `CommonJS` 模块化规范编写的代码经过编译、打包后也可以用于浏览器中运行。\\r\\n\\r\\n::: code-group\\r\\n\\r\\n```js [utils.js]\\r\\n// 1. 使用 exports 导出模块\\r\\nex\"},{\"url\":\"/web开发/后端/Nodejs/\",\"frontmatter\":{\"date\":\"2025-04-19 22:04:01\",\"layout\":\"doc\",\"title\":\"Nodejs 安装教程\",\"navbar\":true,\"sidebar\":true,\"aside\":true,\"footer\":false,\"pageClass\":null,\"head\":[[\"meta\",{\"name\":\"description\",\"content\":\"Nodejs 详细安装教程附带配置\"}],[\"meta\",{\"name\":\"keywords\",\"content\":\"保姆级Nodejs安装和配置教程\"}]],\"permalink\":\"/pages/b609ed\",\"categories\":[\"后端\"],\"tags\":[\"Nodejs\"],\"coverImg\":\"/screenshots/Nodejs/nodejs官网.png\",\"top\":true,\"sticky\":4,\"description\":\"windows版安装和配置Nodejs保姆级详细教程\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Nodejs 安装教程\",\"date\":\"2025-04-19 22:04:01\",\"excerpt\":\"\",\"capture\":\"Nodejs 安装教程\\r\\n\\r\\n 一、安装 `Nodejs`\\r\\n\\r\\n::: info 访问`Nodejs`官网\\r\\n点击前往：Nodejs 官网\\r\\n\\r\\n一直点击下一步安装完即可（可以选择自行选择安装路径）。\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n- 安装完成后，打开`cmd`，输入`node -v`，如果显示版本号，则安装成功。\\r\\n\\r\\n```bash\\r\\n$ node -v\\r\\n$ npm -v\\r\\n```\\r\\n\\r\\n 二、配置\\r\\n\\r\\n\\r\\n\\r\\n 1. 创建目录\\r\\n\\r\\n创建`node_global`和`node_cache`目录，并且在`node_global`目录下创建`node_modules`目录。\\r\\n\\r\\n```bash\\r\\n 进入 E:/enviroments/nodejs/ 路径下\\r\\nmkdir -p node_global/node_modules node_cache\\r\\n```\\r\\n\\r\\n 2. 设置权限\\r\\n\\r\"}],\"Python\":[{\"url\":\"/web开发/后端/Python/支付宝沙箱支付教程\",\"frontmatter\":{\"date\":\"2025-04-19 22:58:03\",\"title\":\"支付宝沙箱支付教程\",\"permalink\":\"/pages/4f6a36\",\"categories\":[\"后端\"],\"tags\":[\"Python\",\"Flask\"],\"coverImg\":\"/screenshots/支付宝沙箱支付详细使用教程/支付宝教程封面.png\",\"top\":true,\"sticky\":2,\"description\":\"详细介绍了在Python Web开发中集成支付宝沙箱支付的完整流程\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"支付宝沙箱支付教程\",\"date\":\"2025-04-19 22:58:03\",\"excerpt\":\"\",\"capture\":\"支付宝沙箱支付详细使用教程\\n详细介绍支付宝沙箱支付的全流程配置最新教程，通俗易懂，图文并茂，手把手教你一步步实现完整沙箱支付功能。亲测可用，文章撰写非常用心，包你学会！\\n&lt;!--@include: @/public/snippets/preface.md--\\n 一、前言\\n由于支付宝官方对Java等语言的文档说明支持较好，在Python方面相对较弱，而且依赖包还安装不了等Bug，所以接下来我将分享《在Python Web开发中如何集成支付宝沙箱支付》的详细教程，如果这篇文章有帮助到你，请记得关注我的公众号，我会定期分享实用的技术教程。如果没有帮到你，也可以留个免费的关注，以后或许会有你感兴趣的教程，而且文章质量都超高哦！\\n在个人平常（或准备后续对接支付宝正式支付环境）的项目中，使用沙箱支付来测试支付功能显得很有必要；如果是在校大学生的话，在你的项目中集成支付宝的沙箱支付，也能让你的项目\"}],\"Flask\":[{\"url\":\"/web开发/后端/Python/支付宝沙箱支付教程\",\"frontmatter\":{\"date\":\"2025-04-19 22:58:03\",\"title\":\"支付宝沙箱支付教程\",\"permalink\":\"/pages/4f6a36\",\"categories\":[\"后端\"],\"tags\":[\"Python\",\"Flask\"],\"coverImg\":\"/screenshots/支付宝沙箱支付详细使用教程/支付宝教程封面.png\",\"top\":true,\"sticky\":2,\"description\":\"详细介绍了在Python Web开发中集成支付宝沙箱支付的完整流程\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"支付宝沙箱支付教程\",\"date\":\"2025-04-19 22:58:03\",\"excerpt\":\"\",\"capture\":\"支付宝沙箱支付详细使用教程\\n详细介绍支付宝沙箱支付的全流程配置最新教程，通俗易懂，图文并茂，手把手教你一步步实现完整沙箱支付功能。亲测可用，文章撰写非常用心，包你学会！\\n&lt;!--@include: @/public/snippets/preface.md--\\n 一、前言\\n由于支付宝官方对Java等语言的文档说明支持较好，在Python方面相对较弱，而且依赖包还安装不了等Bug，所以接下来我将分享《在Python Web开发中如何集成支付宝沙箱支付》的详细教程，如果这篇文章有帮助到你，请记得关注我的公众号，我会定期分享实用的技术教程。如果没有帮到你，也可以留个免费的关注，以后或许会有你感兴趣的教程，而且文章质量都超高哦！\\n在个人平常（或准备后续对接支付宝正式支付环境）的项目中，使用沙箱支付来测试支付功能显得很有必要；如果是在校大学生的话，在你的项目中集成支付宝的沙箱支付，也能让你的项目\"}],\"VSCode\":[{\"url\":\"/web开发/开发者工具/VSCode/配置Linux开发环境\",\"frontmatter\":{\"date\":\"2025-04-19 23:19:49\",\"title\":\"从零配置Linux与Windows互通的开发环境\",\"permalink\":\"/pages/e47200\",\"categories\":[\"开发者工具\"],\"tags\":[\"VSCode\"],\"coverImg\":\"/screenshots/VSCode/搭建linux开发环境.png\",\"top\":true,\"sticky\":3,\"description\":\"从零打造 Linux 和 Windows 互通的开发环境\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"从零配置Linux与Windows互通的开发环境\",\"date\":\"2025-04-19 23:19:49\",\"excerpt\":\"\",\"capture\":\"从零配置 Linux 与 Windows 互通的开发环境\\n以下配置基于 `Red Hat 8`（红帽 8）的 Linux 最基础（无界面）系统，不同的 Linux 发行版会有一些区别，请注意自己系统的是否符合该以上条件。\\n 前置条件\\n\\n```bash\\n 关闭防火墙\\n$ systemctl stop firewalld --now     立即生效\\n$ systemctl status firewalld\\n$ systemctl disable firewalld        永久禁用\\n 关闭 selinux 安全策略\\n$ setenforce 0       本次生效\\n$ getenforce         验证\\n$ sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config     改写配置文件，永久关闭\\n``\"}],\"桌面应用开发\":[{\"url\":\"/web开发/后端/桌面应用开发/\",\"frontmatter\":{\"date\":\"2025-04-19 22:52:13\",\"title\":\"全网最新最全的 electron 项目环境搭建方式与踩坑经验分享\",\"head\":[[\"meta\",{\"name\":\"description\",\"content\":\"全网最全最新 electron 项目环境搭建方式与踩坑经验分享，帮你避坑，少走弯路，节省时间，还等什么，快来参考一下我的 electron 环境搭建指南！\"},{\"name\":\"keywords\",\"content\":\"electron 项目环境搭建 踩坑经验分享\"}]],\"footer\":false,\"permalink\":\"/pages/75a1df\",\"categories\":[\"后端\"],\"tags\":[\"桌面应用开发\"],\"coverImg\":\"/screenshots/Nodejs/Electron安装踩坑经验总结.png\",\"top\":true,\"sticky\":5,\"description\":\"全网最全最新 electron 项目环境搭建方式与踩坑经验分享\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"全网最新最全的 electron 项目环境搭建方式与踩坑经验分享\",\"date\":\"2025-04-19 22:52:13\",\"excerpt\":\"\",\"capture\":\"&lt;!--@include: @/public/snippets/preface.md--\\r\\n\\r\\n&gt; 本文项目搭建演示的`nodejs`版本如下：\\r\\n\\r\\n```bash\\r\\n$ node -v\\r\\n v22.14.0\\r\\n```\\r\\n\\r\\n 一、官方文档手动搭建\\r\\n\\r\\n文档地址：快速入门 | Electron，按照文档步骤操作即可，项目只包含了`electron`依赖，仅仅只是一个`hello world`展示。\\r\\n\\r\\n&gt; ⚠️ 注意：失败！我设置了代理（网络问题）和切换镜像源（淘宝）等操作都没用。截图如下：\\r\\n\\r\\n\\r\\n\\r\\n 二、官方脚手架方式创建\\r\\n\\r\\n- 创建项目命令如下：\\r\\n\\r\\n```bash\\r\\n$ npm init electron-app@latest my-app -- --template=vite  my-app:项目名(自定义)\\r\\n 或\\r\\n$ npm create \"}],\"Django\":[{\"url\":\"/web开发/后端/Python/Django快速入门教程\",\"frontmatter\":{\"date\":\"2025-04-21 18:17:55\",\"title\":\"Django快速入门教程\",\"permalink\":\"/pages/5e2304\",\"categories\":[\"后端\",\"Python\"],\"tags\":[\"Django\"],\"description\":\"Django 哲学宗旨：懂得越多，写得越少\",\"coverImg\":\"/screenshots/Python/Django快速入门教程.png\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Django快速入门教程\",\"date\":\"2025-04-21 18:17:55\",\"excerpt\":\"\",\"capture\":\"Django 快速入门\\n 安装 Django\\n```bash\\n$ pip install django\\n```\\n 创建项目\\n```bash\\n$ mkdir &lt;项目名称\\n$ django-admin startproject [&lt;settings&gt;] &lt;项目名称&gt;    settings 是配置目录名称。如果不指定，配置目录的名称与项目名称一致\\n$ cd &lt;项目名称&gt;\\n```\\n- `manage.py`：管理 `Django` 项目的命令行工具。\\n- `settings/`：项目系统配置目录。\\n- `settings/settings.py`：`Django` 项目的配置文件。\\n- `settings/urls.py`：Django 项目的 URL 声明，就像你网站的 `路由` 。\\n- `settings/asgi.py`：项目运行在 `ASGI` \"}],\"Ollama\":[{\"url\":\"/前沿领域/人工智能/Ollama/\",\"frontmatter\":{\"date\":\"2025-04-20 23:43:03\",\"title\":\"index\",\"permalink\":\"/pages/066462\",\"categories\":[\"人工智能\"],\"tags\":[\"Ollama\"]},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"index\",\"date\":\"2025-04-20 23:43:03\",\"excerpt\":\"\",\"capture\":\"Ollama 开源大模型\\r\\n\\r\\n::: info 文档\\r\\n\\r\\nOllama 是一个开源的大型语言模型（LLM）服务工具，它允许用户在本地机器上运行和部署大型语言模型。\\r\\n\\r\\n-   推荐 1：Ollama 官网\\r\\n-   推荐 2：Ollama Github 仓库\\r\\n\\r\\n:::\\r\\n\\r\\n::: tip 提示\\r\\n\\r\\n-   `ollama`命令行工具的使用很类似`docker`命令，通过 `olloma -h` 可查看帮助\\r\\n-   推荐阅读：博客文章\\r\\n\\r\\n:::\\r\\n\\r\\n 列出已有模型\\r\\n\\r\\n```bash\\r\\n$ ollama list\\r\\n```\\r\\n\\r\\n 创建模型\\r\\n\\r\\n\\r\\n\\r\\n```bash\\r\\n$ ollama create mymodel -f ./Modelfile\\r\\n```\\r\\n\\r\\n 拉取模型\\r\\n\\r\\n&gt; 拉取本地已经存在的模型会自动比较两者差异进行更新\\r\\n\\r\\n```bash\\r\\n$\"}],\"C++\":[{\"url\":\"/web开发/后端/Cpp/\",\"frontmatter\":{\"date\":\"2025-04-19 15:24:14\",\"title\":\"C++语言快速入门\",\"categories\":[\"后端\"],\"tags\":[\"C++\"],\"description\":\"C++是一种静态类型的中级语言，综合了高级语言和低级语言的特点\",\"coverImg\":\"/banner/8.webp\",\"permalink\":\"/pages/2aeaba\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"C++语言快速入门\",\"date\":\"2025-04-19 15:24:14\",\"excerpt\":\"\",\"capture\":\"C++语言快速入门\\n 安装 `C++` 编译环境\\n```bash\\n $ sudo subscription-manager repos --enable codeready-builder-for-rhel-8-x86_64-rpms\\n$ sudo dnf install -y gcc gcc-c++ make\\n 或者安装完整的开发工具组（包含更多工具如gdb、git等）\\n$ sudo dnf groupinstall -y \\\"Development Tools\\\"\\n 检查安装\\n$ gcc --version\\n$ g++ --version\\n$ make --version\\n```\\n 第一个 `C++` 程序\\n```c++\\n// main.cpp\\ninclude &lt;iostream\\nusing namespace std;\\nint main()\\n{\\n    cout &lt;&lt; \"}],\"Lua\":[{\"url\":\"/web开发/后端/Lua/\",\"frontmatter\":{\"date\":\"2025-04-19 07:24:14\",\"title\":\"Lua语言快速入门\",\"categories\":[\"后端\"],\"tags\":[\"Lua\"],\"description\":\"Lua 是一款轻量级、高效灵活、跨平台的多范式编程语言\",\"coverImg\":\"/banner/1.webp\",\"permalink\":\"/pages/e7b99e\"},\"author\":{\"name\":\"程序员皮蛋鸽鸽\",\"link\":\"https://github.com/ZhouYu2156\"},\"title\":\"Lua语言快速入门\",\"date\":\"2025-04-19 07:24:14\",\"excerpt\":\"\",\"capture\":\"Lua语言快速入门\\n 环境安装\\n- 了解更多，请参考：菜鸟教程-Lua 环境安装\\n- Linux 系统(CentOS)\\n```bash\\n$ sudo yum install -y epel-release\\n$ sudo yum install -y lua\\n```\\n 快速体验\\n 交互式\\n```bash\\n$ man lua                  查看 lua 命令行帮助说明\\n$ lua -v                   查看版本信息\\n$ lua -i                   进入交互模式\\n\\n```\\n 脚本式编程\\n- 创建 `*.lua` 文件\\n```lua\\n!/usr/local/bin/lua\\nprint(\\\"Hello world!\\\")\\n```\\n- 赋予可执行权限\\n```bash\\n$ chmod 700 hello.lua\\n```\\n- 执行脚本\\n```bas\"}]}},\"groupCards\":{\"categories\":[{\"name\":\"后端\",\"length\":12},{\"name\":\"开发者工具\",\"length\":4},{\"name\":\"web开发\",\"length\":22},{\"name\":\"MongoDB\",\"length\":1},{\"name\":\"Python\",\"length\":4},{\"name\":\"前端\",\"length\":9},{\"name\":\"JavaScript\",\"length\":9},{\"name\":\"视觉与设计\",\"length\":1},{\"name\":\"Adoube\",\"length\":1},{\"name\":\"PhotoShop\",\"length\":1},{\"name\":\"人工智能\",\"length\":1},{\"name\":\"VSCode\",\"length\":2},{\"name\":\"运维\",\"length\":5},{\"name\":\"Linux\",\"length\":2},{\"name\":\"Nginx\",\"length\":1},{\"name\":\"服务器\",\"length\":2},{\"name\":\"MySQL\",\"length\":1},{\"name\":\"Git\",\"length\":1}],\"tags\":[{\"name\":\"Nodejs\",\"length\":2},{\"name\":\"Python\",\"length\":1},{\"name\":\"Flask\",\"length\":1},{\"name\":\"VSCode\",\"length\":1},{\"name\":\"桌面应用开发\",\"length\":1},{\"name\":\"Django\",\"length\":1},{\"name\":\"Ollama\",\"length\":1},{\"name\":\"C++\",\"length\":1},{\"name\":\"Lua\",\"length\":1}]}}},\"locales\":{},\"scrollOffset\":134,\"cleanUrls\":true}");