import{_ as s,c as a,o as d,ai as i}from"./chunks/framework.nDjVKRVr.js";const k=JSON.parse(`{"title":"C++语言快速入门","description":"C++是一种静态类型的中级语言，综合了高级语言和低级语言的特点","frontmatter":{"date":"2025-04-19T15:24:14.000Z","title":"C++语言快速入门","categories":["后端"],"tags":["C++"],"description":"C++是一种静态类型的中级语言，综合了高级语言和低级语言的特点","coverImg":"/banner/8.webp","permalink":"/pages/2aeaba","head":[["script",{"charset":"UTF-8","id":"LA_COLLECT","src":"//sdk.51.la/js-sdk-pro.min.js"}],["script",{},"typeof LA !== 'undefined' && LA.init({\\"id\\":\\"你id\\",\\"ck\\":\\"你ck\\",\\"hashMode\\":true})"]]},"headers":[],"relativePath":"web开发/后端/Cpp/index.md","filePath":"web开发/后端/Cpp/index.md","lastUpdated":1745258192000}`),e={name:"web开发/后端/Cpp/index.md"};function n(l,t,r,h,p,o){return d(),a("div",null,t[0]||(t[0]=[i(`<h1 id="c-语言快速入门" tabindex="-1">C++语言快速入门 <a class="header-anchor" href="#c-语言快速入门" aria-label="Permalink to &quot;C++语言快速入门&quot;">​</a></h1><h2 id="安装-c-编译环境" tabindex="-1">安装 <code>C++</code> 编译环境 <a class="header-anchor" href="#安装-c-编译环境" aria-label="Permalink to &quot;安装 \`C++\` 编译环境&quot;">​</a></h2><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># $ sudo subscription-manager repos --enable codeready-builder-for-rhel-8-x86_64-rpms</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dnf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gcc-c++</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或者安装完整的开发工具组（包含更多工具如gdb、git等）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dnf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> groupinstall</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Development Tools&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 检查安装</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> g++</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="第一个-c-程序" tabindex="-1">第一个 <code>C++</code> 程序 <a class="header-anchor" href="#第一个-c-程序" aria-label="Permalink to &quot;第一个 \`C++\` 程序&quot;">​</a></h2><div class="language-c++ vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// main.cpp</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, world!&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>执行</li></ul><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> g++</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.cpp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 编译</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./main</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  # 执行</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行权限</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ll</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./main</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="基本语法" tabindex="-1">基本语法 <a class="header-anchor" href="#基本语法" aria-label="Permalink to &quot;基本语法&quot;">​</a></h2><h3 id="关键字" tabindex="-1">关键字 <a class="header-anchor" href="#关键字" aria-label="Permalink to &quot;关键字&quot;">​</a></h3><table tabindex="0"><thead><tr><th>第一列</th><th>第二列</th><th>第三列</th><th>第四列</th></tr></thead><tbody><tr><td>asm</td><td>else</td><td>new</td><td>this</td></tr><tr><td>auto</td><td>enum</td><td>operator</td><td>throw</td></tr><tr><td>bool</td><td>explicit</td><td>private</td><td>true</td></tr><tr><td>break</td><td>export</td><td>protected</td><td>try</td></tr><tr><td>case</td><td>extern</td><td>public</td><td>typedef</td></tr><tr><td>catch</td><td>false</td><td>register</td><td>typeid</td></tr><tr><td>char</td><td>float</td><td>reinterpret_cast</td><td>typename</td></tr><tr><td>class</td><td>for</td><td>return</td><td>union</td></tr><tr><td>const</td><td>friend</td><td>short</td><td>unsigned</td></tr><tr><td>const_cast</td><td>goto</td><td>signed</td><td>using</td></tr><tr><td>continue</td><td>if</td><td>sizeof</td><td>virtual</td></tr><tr><td>default</td><td>inline</td><td>static</td><td>void</td></tr><tr><td>delete</td><td>int</td><td>static_cast</td><td>volatile</td></tr><tr><td>do</td><td>long</td><td>struct</td><td>wchar_t</td></tr><tr><td>double</td><td>mutable</td><td>switch</td><td>while</td></tr><tr><td>dynamic_cast</td><td>namespace</td><td>template</td><td></td></tr></tbody></table><h3 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-label="Permalink to &quot;注释&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">提示</p><ul><li>程序的注释是解释性语句，您可以在 C++ 代码中包含注释来提高源代码的可读性。所有的编程语言都允许某种形式的注释。</li><li><code>C++</code> 支持单行注释和多行注释。注释中的所有字符会被 <code>C++</code> 编译器忽略。</li></ul></div><p>C++ 注释一般有两种：</p><ul><li><p><code>//</code> 一般用于单行注释。</p></li><li><p><code>/* 注释内容 */</code> 一般用于多行注释。</p></li></ul><h3 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">信息</p><p>变量保留的是它所存储的值的内存位置。这意味着，当您创建一个变量时，就会在内存中保留存放某种类型数据的空间。</p><p>操作系统会根据变量的数据类型，来分配内存和决定在保留内存中存储什么。</p></div><h4 id="基本的内置类型" tabindex="-1">基本的内置类型 <a class="header-anchor" href="#基本的内置类型" aria-label="Permalink to &quot;基本的内置类型&quot;">​</a></h4><blockquote><p><code>C++</code> 为程序员提供了种类丰富的内置数据类型和用户自定义的数据类型。下表列出了七种基本的 <code>C++</code> 数据类型：</p></blockquote><table tabindex="0"><thead><tr><th>类型</th><th>关键字</th></tr></thead><tbody><tr><td>布尔型</td><td>bool</td></tr><tr><td>字符型</td><td>char</td></tr><tr><td>整型</td><td>int</td></tr><tr><td>浮点型</td><td>float</td></tr><tr><td>双浮点型</td><td>double</td></tr><tr><td>无类型</td><td>void</td></tr><tr><td>宽字符型</td><td>wchar_t</td></tr></tbody></table><blockquote><p>其实 <code>wchar_t</code> 是这样来的，所以 wchar_t 实际上的空间是和 short int 一样。</p></blockquote><div class="language-c++ vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> short</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> wchar_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="修饰符" tabindex="-1">修饰符 <a class="header-anchor" href="#修饰符" aria-label="Permalink to &quot;修饰符&quot;">​</a></h4><table tabindex="0"><thead><tr><th>修饰符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>signed</td><td>表示有符号类型（默认）</td><td>signed int x = -10;</td></tr><tr><td>unsigned</td><td>表示无符号类型</td><td>unsigned int y = 10;</td></tr><tr><td>short</td><td>表示短整型</td><td>short int z = 100;</td></tr><tr><td>long</td><td>表示长整型</td><td>long int a = 100000;</td></tr><tr><td>const</td><td>表示常量，值不可修改</td><td>const int b = 5;</td></tr><tr><td>volatile</td><td>表示变量可能被意外修改，禁止编译器优化</td><td>volatile int c = 10;</td></tr><tr><td>mutable</td><td>表示类成员可以在 const 对象中修改</td><td>mutable int counter;</td></tr></tbody></table><blockquote><p>关于各种数据类型的长度可自行查看 <a href="https://www.runoob.com/cplusplus/cpp-data-types.html" target="_blank" rel="noreferrer">菜鸟教程</a></p></blockquote><h4 id="c-11-新增类型" tabindex="-1"><code>C++ 11</code> 新增类型 <a class="header-anchor" href="#c-11-新增类型" aria-label="Permalink to &quot;\`C++ 11\` 新增类型&quot;">​</a></h4><table tabindex="0"><thead><tr><th>数据类型</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>auto</td><td>自动类型推断</td><td><code>auto x = 10;</code></td></tr><tr><td>decltype</td><td>获取表达式的类型</td><td><code>decltype(x) y = 20;</code></td></tr><tr><td>nullptr</td><td>空指针常量</td><td><code>int* ptr = nullptr;</code></td></tr><tr><td>std::initializer_list</td><td>初始化列表类型</td><td><code>std::initializer_list&lt;int&gt; list = {1, 2, 3};</code></td></tr><tr><td>std::tuple</td><td>元组类型，可以存储多个不同类型的值</td><td><code>std::tuple&lt;int, float, char&gt; t(1, 2.0, &#39;a&#39;);</code></td></tr></tbody></table><h4 id="派生数据类型" tabindex="-1">派生数据类型 <a class="header-anchor" href="#派生数据类型" aria-label="Permalink to &quot;派生数据类型&quot;">​</a></h4><table tabindex="0"><thead><tr><th>数据类型</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>数组</td><td>相同类型元素的集合</td><td><code>int arr[5] = {1, 2, 3, 4, 5};</code></td></tr><tr><td>指针</td><td>存储变量内存地址的类型</td><td><code>int* ptr = &amp;x;</code></td></tr><tr><td>引用</td><td>变量的别名</td><td><code>int&amp; ref = x;</code></td></tr><tr><td>函数</td><td>函数类型，表示函数的签名</td><td><code>int func(int a, int b);</code></td></tr><tr><td>结构体</td><td>用户定义的数据类型，可以包含多个不同类型的成员</td><td><code>struct Point { int x; int y; };</code></td></tr><tr><td>类</td><td>用户定义的数据类型，支持封装、继承和多态</td><td><code>class MyClass { ... };</code></td></tr><tr><td>联合体</td><td>多个成员共享同一块内存</td><td><code>union Data { int i; float f; };</code></td></tr><tr><td>枚举</td><td>用户定义的整数常量集合</td><td><code>enum Color { RED, GREEN, BLUE };</code></td></tr></tbody></table><h4 id="类型别名" tabindex="-1">类型别名 <a class="header-anchor" href="#类型别名" aria-label="Permalink to &quot;类型别名&quot;">​</a></h4><table tabindex="0"><thead><tr><th>别名</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>typedef</td><td>为现有类型定义别名</td><td>typedef int MyInt;</td></tr><tr><td>using</td><td>为现有类型定义别名（C++11 引入）</td><td>using MyInt = int;</td></tr></tbody></table><h4 id="标准库类型" tabindex="-1">标准库类型 <a class="header-anchor" href="#标准库类型" aria-label="Permalink to &quot;标准库类型&quot;">​</a></h4><table tabindex="0"><thead><tr><th>数据类型</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>std::string</td><td>字符串类型</td><td><code>std::string s = &quot;Hello&quot;;</code></td></tr><tr><td>std::vector</td><td>动态数组</td><td><code>std::vector&lt;int&gt; v = {1, 2, 3};</code></td></tr><tr><td>std::array</td><td>固定大小数组</td><td><code>（C++11 引入） std::array&lt;int, 3&gt; a = {1, 2, 3};</code></td></tr><tr><td>std::pair</td><td>存储两个值的容器</td><td><code>std::pair&lt;int, float&gt; p(1, 2.0);</code></td></tr><tr><td>std::map</td><td>键值对容器</td><td><code>std::map&lt;int, std::string&gt; m;</code></td></tr><tr><td>std::set</td><td>唯一值集合</td><td><code>std::set&lt;int&gt; s = {1, 2, 3};</code></td></tr></tbody></table><h4 id="typedef-声明" tabindex="-1">typedef 声明 <a class="header-anchor" href="#typedef-声明" aria-label="Permalink to &quot;typedef 声明&quot;">​</a></h4>`,33)]))}const b=s(e,[["render",n]]);export{k as __pageData,b as default};
